
DMA_UART_STREAM_BUFF_DOUBLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  080095a0  080095a0  000195a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800990c  0800990c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009914  08009914  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009914  08009914  00019914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009918  08009918  00019918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800991c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00014570  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014580  20014580  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c032  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003da7  00000000  00000000  0003c072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0003fe20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001588  00000000  00000000  00041550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000045e8  00000000  00000000  00042ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9af  00000000  00000000  000470c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea152  00000000  00000000  00066a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150bc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006108  00000000  00000000  00150c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009588 	.word	0x08009588

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08009588 	.word	0x08009588

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012f08 	.word	0x20012f08

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <initUart1Pins>:
#include "UartQuickDirtyInit.h"
#include <stm32f4xx_hal.h>
#include <main.h>

void initUart1Pins( void )
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <initUart1Pins+0x58>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <initUart1Pins+0x58>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <initUart1Pins+0x58>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

	//PA9 is USART1_RX PA10 is USART1_TX
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005ca:	2307      	movs	r3, #7
 80005cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <initUart1Pins+0x5c>)
 80005d4:	f001 fc82 	bl	8001edc <HAL_GPIO_Init>
}
 80005d8:	bf00      	nop
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000

080005e8 <initUart5Pins>:

void initUart5Pins( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <initUart5Pins+0x98>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <initUart5Pins+0x98>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <initUart5Pins+0x98>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <initUart5Pins+0x98>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <initUart5Pins+0x98>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <initUart5Pins+0x98>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]


	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000648:	2308      	movs	r3, #8
 800064a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <initUart5Pins+0x9c>)
 8000654:	f001 fc42 	bl	8001edc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000658:	2304      	movs	r3, #4
 800065a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000668:	2308      	movs	r3, #8
 800066a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <initUart5Pins+0xa0>)
 8000674:	f001 fc32 	bl	8001edc <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00

0800068c <STM_UartInit>:
 * @param Baudrate desired baudrate the UART will be setup to use
 * @param DmaTx pointer to DMA struct to use when transmitting via DMA
 * @param DmaRx pointer to DMA struct to use when receiving via DMA
 */
void STM_UartInit( USART_TypeDef* STM_UART_PERIPH, uint32_t Baudrate, DMA_HandleTypeDef* DmaTx, DMA_HandleTypeDef* DmaRx )
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b098      	sub	sp, #96	; 0x60
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
 8000698:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef retVal;
	UART_HandleTypeDef uartInitStruct;
	assert_param(	STM_UART_PERIPH == USART1 ||
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <STM_UartInit+0xcc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d007      	beq.n	80006b2 <STM_UartInit+0x26>
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4a2d      	ldr	r2, [pc, #180]	; (800075c <STM_UartInit+0xd0>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d003      	beq.n	80006b2 <STM_UartInit+0x26>
 80006aa:	2154      	movs	r1, #84	; 0x54
 80006ac:	482c      	ldr	r0, [pc, #176]	; (8000760 <STM_UartInit+0xd4>)
 80006ae:	f000 fe83 	bl	80013b8 <assert_failed>
					STM_UART_PERIPH == UART5 );

	if(STM_UART_PERIPH == USART1)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <STM_UartInit+0xcc>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d110      	bne.n	80006dc <STM_UartInit+0x50>
	{
		initUart1Pins();
 80006ba:	f7ff ff65 	bl	8000588 <initUart1Pins>
		__USART1_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <STM_UartInit+0xd8>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	4a27      	ldr	r2, [pc, #156]	; (8000764 <STM_UartInit+0xd8>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6453      	str	r3, [r2, #68]	; 0x44
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <STM_UartInit+0xd8>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	e013      	b.n	8000704 <STM_UartInit+0x78>
	}
	else if (STM_UART_PERIPH == UART5)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a1f      	ldr	r2, [pc, #124]	; (800075c <STM_UartInit+0xd0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d10f      	bne.n	8000704 <STM_UartInit+0x78>
	{
		initUart5Pins();
 80006e4:	f7ff ff80 	bl	80005e8 <initUart5Pins>
		__UART5_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <STM_UartInit+0xd8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <STM_UartInit+0xd8>)
 80006f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <STM_UartInit+0xd8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
	}

	uartInitStruct.Instance = STM_UART_PERIPH;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	61bb      	str	r3, [r7, #24]
	uartInitStruct.Init.BaudRate = Baudrate;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	61fb      	str	r3, [r7, #28]
	uartInitStruct.Init.WordLength = UART_WORDLENGTH_8B;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
	uartInitStruct.Init.StopBits = UART_STOPBITS_1;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
	uartInitStruct.Init.Parity = UART_PARITY_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
	uartInitStruct.Init.Mode = UART_MODE_TX_RX;
 8000718:	230c      	movs	r3, #12
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartInitStruct.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
	uartInitStruct.Init.OverSampling = UART_OVERSAMPLING_8;
 8000720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
	//uartInitStruct.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	uartInitStruct.hdmatx = DmaTx;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
	uartInitStruct.hdmarx = DmaRx;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	653b      	str	r3, [r7, #80]	; 0x50
	//uartInitStruct.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	retVal = HAL_UART_Init(&uartInitStruct);
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f90e 	bl	8003954 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	assert_param(retVal == HAL_OK);
 800073e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <STM_UartInit+0xc2>
 8000746:	2170      	movs	r1, #112	; 0x70
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <STM_UartInit+0xd4>)
 800074a:	f000 fe35 	bl	80013b8 <assert_failed>

}
 800074e:	bf00      	nop
 8000750:	3760      	adds	r7, #96	; 0x60
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40011000 	.word	0x40011000
 800075c:	40005000 	.word	0x40005000
 8000760:	080095a0 	.word	0x080095a0
 8000764:	40023800 	.word	0x40023800

08000768 <SetupUart5ExternalSim>:
 * @param Baudrate desired baudrate for the UART4
 *
 * This is a quick and dirty setup. . .
 */
void SetupUart5ExternalSim( uint32_t BaudRate )
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	//setup DMA
	uart5TxDmaSetup();
 8000770:	f000 f81a 	bl	80007a8 <uart5TxDmaSetup>

	//GPIO pins are setup in BSP/Nucleo_F767ZI_Init
	STM_UartInit(UART5, BaudRate, &hdma_uart5_tx, NULL);
 8000774:	2300      	movs	r3, #0
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <SetupUart5ExternalSim+0x34>)
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4809      	ldr	r0, [pc, #36]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 800077c:	f7ff ff86 	bl	800068c <STM_UartInit>

	//also enable DMA for UART5 Transmits
	UART5->CR3 |= USART_CR3_DMAT;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 8000786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078a:	6153      	str	r3, [r2, #20]
	 *	start the repeating DMA transfer.  Eventually, non-circular
	 *	receivers will loose a character here or there at high baudrates.
	 *	When this happens, SEGGER_SYSVIEW_Print() will stop printing when it hits
	 *	the first NULL character.
	 */
	uart5TxDmaStartRepeat(uart5Msg, sizeof(uart5Msg));
 800078c:	2110      	movs	r1, #16
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <SetupUart5ExternalSim+0x3c>)
 8000790:	f000 f874 	bl	800087c <uart5TxDmaStartRepeat>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	40005000 	.word	0x40005000
 80007a4:	080098b0 	.word	0x080098b0

080007a8 <uart5TxDmaSetup>:

static void uart5TxDmaSetup( void )
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Stream7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	202f      	movs	r0, #47	; 0x2f
 80007d0:	f000 fffc 	bl	80017cc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80007d4:	202f      	movs	r0, #47	; 0x2f
 80007d6:	f001 f825 	bl	8001824 <HAL_NVIC_EnableIRQ>

	//initialize the DMA peripheral to transfer uart4Msg
	//to UART4 repeatedly
	memset(&hdma_uart5_tx, 0, sizeof(hdma_uart5_tx));
 80007da:	2260      	movs	r2, #96	; 0x60
 80007dc:	2100      	movs	r1, #0
 80007de:	4823      	ldr	r0, [pc, #140]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007e0:	f008 feca 	bl	8009578 <memset>
	hdma_uart5_tx.Instance = DMA1_Stream7;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007e6:	4a22      	ldr	r2, [pc, #136]	; (8000870 <uart5TxDmaSetup+0xc8>)
 80007e8:	601a      	str	r2, [r3, #0]
	hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;			//channel 4 is for UART5 Tx
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f0:	605a      	str	r2, [r3, #4]
	hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;	//transfering out of memory and into the peripheral register
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007f4:	2240      	movs	r2, #64	; 0x40
 80007f6:	609a      	str	r2, [r3, #8]
	hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;	//no fifo
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_uart5_tx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
	hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;			//increment 1 byte at a time
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <uart5TxDmaSetup+0xc4>)
 800080c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000810:	611a      	str	r2, [r3, #16]
	hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;				//this will automatically restart the transfer at the beginning after it has finished
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000818:	61da      	str	r2, [r3, #28]
	hdma_uart5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;	//write 1 at a time to the peripheral
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <uart5TxDmaSetup+0xc4>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
	hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;		//always keep the peripheral address the same (the Tx data register is always in the same location)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
	hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
	//we're setting low priority since this is meant to be simulated data - the DMA
	//transfers of the active code should take priority
	hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <uart5TxDmaSetup+0xc4>)
 800082e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000832:	621a      	str	r2, [r3, #32]
	assert_param(HAL_DMA_Init(&hdma_uart5_tx) == HAL_OK);
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000836:	f001 f80d 	bl	8001854 <HAL_DMA_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <uart5TxDmaSetup+0xa0>
 8000840:	2165      	movs	r1, #101	; 0x65
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <uart5TxDmaSetup+0xcc>)
 8000844:	f000 fdb8 	bl	80013b8 <assert_failed>
	DMA1_Stream7->CR &= ~DMA_SxCR_EN;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <uart5TxDmaSetup+0xc8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <uart5TxDmaSetup+0xc8>)
 800084e:	f023 0301 	bic.w	r3, r3, #1
 8000852:	6013      	str	r3, [r2, #0]

	//set the DMA transmit mode flag to enable DMA transfers
	UART5->CR3 |= USART_CR3_DMAT;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <uart5TxDmaSetup+0xd0>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <uart5TxDmaSetup+0xd0>)
 800085a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085e:	6153      	str	r3, [r2, #20]
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	2000002c 	.word	0x2000002c
 8000870:	400260b8 	.word	0x400260b8
 8000874:	080095c4 	.word	0x080095c4
 8000878:	40005000 	.word	0x40005000

0800087c <uart5TxDmaStartRepeat>:
 * that will automatically repeat after it is finished
 * @param Msg pointer to array to transfer
 * @param Len number of elements in the array
 */
static void uart5TxDmaStartRepeat( const uint8_t* Msg, uint16_t Len )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]

	//clear the transfer complete flag to make sure our transfer starts
	//UART5->CR |= USART_SR_TC;
	UART5->SR &= ~USART_SR_TC;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <uart5TxDmaStartRepeat+0x3c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <uart5TxDmaStartRepeat+0x3c>)
 800088e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000892:	6013      	str	r3, [r2, #0]
	assert_param(HAL_DMA_Start(&hdma_uart5_tx, (uint32_t)Msg, (uint32_t)&(UART5->DR), Len) == HAL_OK);
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <uart5TxDmaStartRepeat+0x40>)
 800089a:	4809      	ldr	r0, [pc, #36]	; (80008c0 <uart5TxDmaStartRepeat+0x44>)
 800089c:	f001 f9f4 	bl	8001c88 <HAL_DMA_Start>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d003      	beq.n	80008ae <uart5TxDmaStartRepeat+0x32>
 80008a6:	2178      	movs	r1, #120	; 0x78
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <uart5TxDmaStartRepeat+0x48>)
 80008aa:	f000 fd85 	bl	80013b8 <assert_failed>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40005000 	.word	0x40005000
 80008bc:	40005004 	.word	0x40005004
 80008c0:	2000002c 	.word	0x2000002c
 80008c4:	080095c4 	.word	0x080095c4

080008c8 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	//shouldn't ever get here - interrupts are not enabled
	while(1);
 80008cc:	e7fe      	b.n	80008cc <DMA1_Stream7_IRQHandler+0x4>
	...

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db0b      	blt.n	8000942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	4907      	ldr	r1, [pc, #28]	; (8000950 <__NVIC_EnableIRQ+0x38>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	2001      	movs	r0, #1
 800093a:	fa00 f202 	lsl.w	r2, r0, r2
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <main>:
static bool rxInProgress = false;

static DMA_HandleTypeDef usart1DmaRx;

int main()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8


	HWInit();
 80009ae:	f000 fa07 	bl	8000dc0 <HWInit>
	SEGGER_SYSVIEW_Conf();
 80009b2:	f008 fc73 	bl	800929c <SEGGER_SYSVIEW_Conf>

	//ensure proper priority grouping for freeRTOS
	NVIC_SetPriorityGrouping(0);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff ff8a 	bl	80008d0 <__NVIC_SetPriorityGrouping>
	//this delay is only present since we're using a simple
	//block-based buffer for receiving data - the transmission
	//needs to start after the receiver is ready for data for the
	//strings to start in the correct position in this simple setup
	TimerHandle_t oneShotHandle =
			xTimerCreate(	"startUart5Traffic",
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <main+0x94>)
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2300      	movs	r3, #0
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009c8:	481d      	ldr	r0, [pc, #116]	; (8000a40 <main+0x98>)
 80009ca:	f005 feb3 	bl	8006734 <xTimerCreate>
 80009ce:	6078      	str	r0, [r7, #4]
					500 /portTICK_PERIOD_MS,
					pdFALSE,
					NULL,
					startUart5Traffic);
	assert_param(oneShotHandle != NULL);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d103      	bne.n	80009de <main+0x36>
 80009d6:	2142      	movs	r1, #66	; 0x42
 80009d8:	481a      	ldr	r0, [pc, #104]	; (8000a44 <main+0x9c>)
 80009da:	f000 fced 	bl	80013b8 <assert_failed>
	xTimerStart(oneShotHandle, 0);
 80009de:	f004 ff4d 	bl	800587c <xTaskGetTickCount>
 80009e2:	4602      	mov	r2, r0
 80009e4:	2300      	movs	r3, #0
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2300      	movs	r3, #0
 80009ea:	2101      	movs	r1, #1
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f005 fefd 	bl	80067ec <xTimerGenericCommand>

	//setup tasks, making sure they have been properly created before moving on
	rxStream = xStreamBufferCreate( 100, 1);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2101      	movs	r1, #1
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f004 f95c 	bl	8004cb4 <xStreamBufferGenericCreate>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <main+0xa0>)
 8000a00:	6013      	str	r3, [r2, #0]
	assert_param(rxStream != NULL);
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <main+0xa0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <main+0x6a>
 8000a0a:	2147      	movs	r1, #71	; 0x47
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <main+0x9c>)
 8000a0e:	f000 fcd3 	bl	80013b8 <assert_failed>

	assert_param(xTaskCreate(uartPrintOutTask, "uartPrint", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL) == pdPASS);
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	2303      	movs	r3, #3
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	490b      	ldr	r1, [pc, #44]	; (8000a4c <main+0xa4>)
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <main+0xa8>)
 8000a22:	f004 fcb7 	bl	8005394 <xTaskCreate>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d003      	beq.n	8000a34 <main+0x8c>
 8000a2c:	2149      	movs	r1, #73	; 0x49
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <main+0x9c>)
 8000a30:	f000 fcc2 	bl	80013b8 <assert_failed>

	//start the scheduler - shouldn't return unless there's a problem
	vTaskStartScheduler();
 8000a34:	f004 fe12 	bl	800565c <vTaskStartScheduler>

	//if you've wound up here, there is likely an issue with overrunning the freeRTOS heap
	while(1)
 8000a38:	e7fe      	b.n	8000a38 <main+0x90>
 8000a3a:	bf00      	nop
 8000a3c:	08000ba5 	.word	0x08000ba5
 8000a40:	080095dc 	.word	0x080095dc
 8000a44:	080095f0 	.word	0x080095f0
 8000a48:	200000ac 	.word	0x200000ac
 8000a4c:	08009618 	.word	0x08009618
 8000a50:	08000bbd 	.word	0x08000bbd

08000a54 <setupUSART1DMA_circular>:
}
	/**
	 * sets up DMA for USART2 reception into a single buffer.
	 */
void setupUSART1DMA_circular( void )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

	__HAL_RCC_DMA2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <setupUSART1DMA_circular+0xb0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a28      	ldr	r2, [pc, #160]	; (8000b04 <setupUSART1DMA_circular+0xb0>)
 8000a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <setupUSART1DMA_circular+0xb0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

	NVIC_SetPriority(DMA2_Stream5_IRQn, 6);
 8000a76:	2106      	movs	r1, #6
 8000a78:	2044      	movs	r0, #68	; 0x44
 8000a7a:	f7ff ff6b 	bl	8000954 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000a7e:	2044      	movs	r0, #68	; 0x44
 8000a80:	f7ff ff4a 	bl	8000918 <__NVIC_EnableIRQ>


	//initialize the DMA peripheral to transfer uart4Msg
	//to UART5 repeatedly
	memset(&usart1DmaRx, 0, sizeof(usart1DmaRx));
 8000a84:	2260      	movs	r2, #96	; 0x60
 8000a86:	2100      	movs	r1, #0
 8000a88:	481f      	ldr	r0, [pc, #124]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000a8a:	f008 fd75 	bl	8009578 <memset>
//		Error_Handler();
//	}


 /* USART1_RX Init */
	usart1DmaRx.Instance = DMA2_Stream5;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000a90:	4a1e      	ldr	r2, [pc, #120]	; (8000b0c <setupUSART1DMA_circular+0xb8>)
 8000a92:	601a      	str	r2, [r3, #0]
	usart1DmaRx.Init.Channel = DMA_CHANNEL_4;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	605a      	str	r2, [r3, #4]
	usart1DmaRx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
	usart1DmaRx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
	usart1DmaRx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aae:	611a      	str	r2, [r3, #16]
	usart1DmaRx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
	usart1DmaRx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
	usart1DmaRx.Init.Mode = DMA_CIRCULAR;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac2:	61da      	str	r2, [r3, #28]
	usart1DmaRx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000ac6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aca:	621a      	str	r2, [r3, #32]
	usart1DmaRx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
	usart1DmaRx.Init.PeriphBurst = DMA_PBURST_SINGLE;		//write 1 at a time to the peripheral
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
	usart1DmaRx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_DMA_Init(&usart1DmaRx) != HAL_OK)
 8000ade:	480a      	ldr	r0, [pc, #40]	; (8000b08 <setupUSART1DMA_circular+0xb4>)
 8000ae0:	f000 feb8 	bl	8001854 <HAL_DMA_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <setupUSART1DMA_circular+0x9a>
	{
	  Error_Handler();
 8000aea:	f000 fc5d 	bl	80013a8 <Error_Handler>
	}

	DMA2_Stream5->CR |= DMA_SxCR_TCIE;	//enable transfer complete interrupts
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <setupUSART1DMA_circular+0xb8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <setupUSART1DMA_circular+0xb8>)
 8000af4:	f043 0310 	orr.w	r3, r3, #16
 8000af8:	6013      	str	r3, [r2, #0]
	//USART1->CR3 |= USART_CR3_DMAR; //  USART_CR3_DMAR_Msk;	//set the DMA receive mode flag in the USART
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	200000b4 	.word	0x200000b4
 8000b0c:	40026488 	.word	0x40026488

08000b10 <startCircularReceiveDMA>:
/**
 * Start an interrupt driven receive.  This particular ISR is hard-coded
 * to give a semaphore when the reception is finished
 */
int32_t startCircularReceiveDMA( void )
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	rxInProgress = true;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <startCircularReceiveDMA+0x7c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]

	//get the DMA peripheral ready to receive data immediately before enabling UART
	__HAL_DMA_DISABLE(&usart1DmaRx);
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <startCircularReceiveDMA+0x80>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <startCircularReceiveDMA+0x80>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f022 0201 	bic.w	r2, r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
	setupUSART1DMA_circular();
 8000b2a:	f7ff ff93 	bl	8000a54 <setupUSART1DMA_circular>

	//setup second address for double buffered mode
	DMA2_Stream5->M1AR = (uint32_t) rxData2;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <startCircularReceiveDMA+0x84>)
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <startCircularReceiveDMA+0x88>)
 8000b32:	611a      	str	r2, [r3, #16]

	//NOTE: HAL_DMA_Start explicitly disables double buffer mode
	//			so we'll explicitly enable double buffer mode later when
	//			the actual transfer is started
	if(HAL_DMA_Start(&usart1DmaRx, (uint32_t)&(USART1->DR), (uint32_t)rxData1, RX_BUFF_LEN) != HAL_OK)
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <startCircularReceiveDMA+0x8c>)
 8000b36:	2310      	movs	r3, #16
 8000b38:	4919      	ldr	r1, [pc, #100]	; (8000ba0 <startCircularReceiveDMA+0x90>)
 8000b3a:	4815      	ldr	r0, [pc, #84]	; (8000b90 <startCircularReceiveDMA+0x80>)
 8000b3c:	f001 f8a4 	bl	8001c88 <HAL_DMA_Start>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <startCircularReceiveDMA+0x3c>
	{
		return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e01c      	b.n	8000b86 <startCircularReceiveDMA+0x76>
	}

	//disable the stream and controller so we can setup dual buffers
	__HAL_DMA_DISABLE(&usart1DmaRx);
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <startCircularReceiveDMA+0x80>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <startCircularReceiveDMA+0x80>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 0201 	bic.w	r2, r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
	//set the double buffer mode
	DMA2_Stream5->CR |= DMA_SxCR_DBM;
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <startCircularReceiveDMA+0x84>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0c      	ldr	r2, [pc, #48]	; (8000b94 <startCircularReceiveDMA+0x84>)
 8000b62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b66:	6013      	str	r3, [r2, #0]
	//re-enable the stream and controller
	__HAL_DMA_ENABLE(&usart1DmaRx);
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <startCircularReceiveDMA+0x80>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <startCircularReceiveDMA+0x80>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 0201 	orr.w	r2, r2, #1
 8000b76:	601a      	str	r2, [r3, #0]
	DMA2_Stream5->CR |= DMA_SxCR_EN;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <startCircularReceiveDMA+0x84>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <startCircularReceiveDMA+0x84>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]
	//we'll wind up with a lot of noise on the line (the way the ISR is written will
	//cause a transfer to terminate if there are any errors are detected, rather than simply
	//continue with what data it can).  In practice, most of the "errors" at baudrates below
	//460800 are noise detection
	//		USART2->CR3 |= (USART_CR3_EIE);	//enable error interrupts
	return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000b0 	.word	0x200000b0
 8000b90:	200000b4 	.word	0x200000b4
 8000b94:	40026488 	.word	0x40026488
 8000b98:	2000009c 	.word	0x2000009c
 8000b9c:	2000008c 	.word	0x2000008c
 8000ba0:	40011004 	.word	0x40011004

08000ba4 <startUart5Traffic>:



void startUart5Traffic( TimerHandle_t xTimer )
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	SetupUart5ExternalSim(BAUDRATE);
 8000bac:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000bb0:	f7ff fdda 	bl	8000768 <SetupUart5ExternalSim>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <uartPrintOutTask>:
	HAL_DMA_Abort(&usart1DmaRx);
}


void uartPrintOutTask( void* NotUsed)
{
 8000bbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	static const uint8_t maxBytesReceived = 16;
	uint8_t rxBufferedData[maxBytesReceived];
 8000bc6:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <uartPrintOutTask+0xe4>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <uartPrintOutTask+0xe4>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	4691      	mov	r9, r2
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bee:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <uartPrintOutTask+0xe4>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	461c      	mov	r4, r3
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <uartPrintOutTask+0xe4>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	3307      	adds	r3, #7
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	ebad 0d03 	sub.w	sp, sp, r3
 8000c18:	466b      	mov	r3, sp
 8000c1a:	3300      	adds	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]

	//setup double buffer mode for receiving via DMA into dual buffers
	//that are automatically switched by the DMA hardware
	startCircularReceiveDMA();
 8000c1e:	f7ff ff77 	bl	8000b10 <startCircularReceiveDMA>
	//next, setup USART1
	STM_UartInit(USART1, BAUDRATE, NULL, &usart1DmaRx);
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <uartPrintOutTask+0xe8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000c2a:	481f      	ldr	r0, [pc, #124]	; (8000ca8 <uartPrintOutTask+0xec>)
 8000c2c:	f7ff fd2e 	bl	800068c <STM_UartInit>

	//enable DMA reception mode
	USART1->CR3 |= USART_CR3_DMAR;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <uartPrintOutTask+0xec>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <uartPrintOutTask+0xec>)
 8000c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3a:	6153      	str	r3, [r2, #20]

	//clears error flags
	//clear error flags
	USART1->SR &= ~(USART_SR_ORE |  // overun error
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <uartPrintOutTask+0xec>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <uartPrintOutTask+0xec>)
 8000c42:	f023 030f 	bic.w	r3, r3, #15
 8000c46:	6013      	str	r3, [r2, #0]
					USART_SR_NE |
					USART_SR_FE |
					USART_SR_PE);

	NVIC_SetPriority(USART1_IRQn, 6);
 8000c48:	2106      	movs	r1, #6
 8000c4a:	2025      	movs	r0, #37	; 0x25
 8000c4c:	f7ff fe82 	bl	8000954 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000c50:	2025      	movs	r0, #37	; 0x25
 8000c52:	f7ff fe61 	bl	8000918 <__NVIC_EnableIRQ>
	USART1->CR1 |= (USART_CR1_UE);
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <uartPrintOutTask+0xec>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <uartPrintOutTask+0xec>)
 8000c5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c60:	60d3      	str	r3, [r2, #12]

	while(1)
	{
		//fill a local buffer with 0's to make it easier to print
		memset(rxBufferedData, 0, 20);
 8000c62:	2214      	movs	r2, #20
 8000c64:	2100      	movs	r1, #0
 8000c66:	6938      	ldr	r0, [r7, #16]
 8000c68:	f008 fc86 	bl	8009578 <memset>
		uint8_t numBytes = xStreamBufferReceive(	rxStream,
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <uartPrintOutTask+0xf0>)
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <uartPrintOutTask+0xe4>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	2364      	movs	r3, #100	; 0x64
 8000c78:	6939      	ldr	r1, [r7, #16]
 8000c7a:	f004 f973 	bl	8004f64 <xStreamBufferReceive>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	73fb      	strb	r3, [r7, #15]
				rxBufferedData,
				maxBytesReceived,
				100 );
		if(numBytes > 0)
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d006      	beq.n	8000c96 <uartPrintOutTask+0xda>
		{
			SEGGER_SYSVIEW_PrintfHost("received: ");
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <uartPrintOutTask+0xf4>)
 8000c8a:	f008 fa2d 	bl	80090e8 <SEGGER_SYSVIEW_PrintfHost>
			SEGGER_SYSVIEW_Print((char*)rxBufferedData);
 8000c8e:	6938      	ldr	r0, [r7, #16]
 8000c90:	f008 fa3e 	bl	8009110 <SEGGER_SYSVIEW_Print>
 8000c94:	e7e5      	b.n	8000c62 <uartPrintOutTask+0xa6>
		}
		else
		{
			SEGGER_SYSVIEW_PrintfHost("timeout");
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <uartPrintOutTask+0xf8>)
 8000c98:	f008 fa26 	bl	80090e8 <SEGGER_SYSVIEW_PrintfHost>
	{
 8000c9c:	e7e1      	b.n	8000c62 <uartPrintOutTask+0xa6>
 8000c9e:	bf00      	nop
 8000ca0:	080098c0 	.word	0x080098c0
 8000ca4:	200000b4 	.word	0x200000b4
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	200000ac 	.word	0x200000ac
 8000cb0:	08009624 	.word	0x08009624
 8000cb4:	08009630 	.word	0x08009630

08000cb8 <DMA2_Stream5_IRQHandler>:
 * the DMA controller will start writing to the buffer i n
 * DMA1_Stream5->M1AR.
 *
 */
void DMA2_Stream5_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
	uint16_t numWritten = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	817b      	strh	r3, [r7, #10]
	uint8_t* currBuffPtr = NULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]


	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000cca:	f007 ff65 	bl	8008b98 <SEGGER_SYSVIEW_RecordEnterISR>

	if(rxInProgress && (DMA2->HISR & DMA_HISR_TCIF5))
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <DMA2_Stream5_IRQHandler+0x90>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d022      	beq.n	8000d1c <DMA2_Stream5_IRQHandler+0x64>
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <DMA2_Stream5_IRQHandler+0x94>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d01c      	beq.n	8000d1c <DMA2_Stream5_IRQHandler+0x64>
		//the freeRTOS stream buffer
		//the DMA_SxCR_CT bit indicates the "Current Target"
		//which is either DMA_SxM0AR or DMA_SxM1AR
		//see section 8.5.5 for details on the CT bit of
		//the DMA_SxCR register
		if(DMA2_Stream5->CR & DMA_SxCR_CT)
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <DMA2_Stream5_IRQHandler+0x98>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <DMA2_Stream5_IRQHandler+0x3c>
		{
			currBuffPtr = rxData1;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <DMA2_Stream5_IRQHandler+0x9c>)
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e001      	b.n	8000cf8 <DMA2_Stream5_IRQHandler+0x40>
		}
		else
		{
			currBuffPtr = rxData2;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <DMA2_Stream5_IRQHandler+0xa0>)
 8000cf6:	60fb      	str	r3, [r7, #12]
		}

		//if there is something to add to the queue, do so
		//(don't call xStreamBuferSendFromISR with a length of 0)
		numWritten = xStreamBufferSendFromISR(	rxStream,
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <DMA2_Stream5_IRQHandler+0xa4>)
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2210      	movs	r2, #16
 8000d00:	68f9      	ldr	r1, [r7, #12]
 8000d02:	f004 f879 	bl	8004df8 <xStreamBufferSendFromISR>
 8000d06:	4603      	mov	r3, r0
 8000d08:	817b      	strh	r3, [r7, #10]
				RX_BUFF_LEN,
				&xHigherPriorityTaskWoken);

		//OH NO - not everything was written to the stream
		//if this is catastrophic, do something drastic!
		while(numWritten != RX_BUFF_LEN);
 8000d0a:	897b      	ldrh	r3, [r7, #10]
 8000d0c:	2b10      	cmp	r3, #16
 8000d0e:	d1fc      	bne.n	8000d0a <DMA2_Stream5_IRQHandler+0x52>

		DMA2->HIFCR |= DMA_HIFCR_CTCIF5;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <DMA2_Stream5_IRQHandler+0x94>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <DMA2_Stream5_IRQHandler+0x94>)
 8000d16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d1a:	60d3      	str	r3, [r2, #12]
	}
	SEGGER_SYSVIEW_RecordExitISR();
 8000d1c:	f007 ff7e 	bl	8008c1c <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00a      	beq.n	8000d3c <DMA2_Stream5_IRQHandler+0x84>
 8000d26:	f007 ff95 	bl	8008c54 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <DMA2_Stream5_IRQHandler+0xa8>)
 8000d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	f3bf 8f4f 	dsb	sy
 8000d36:	f3bf 8f6f 	isb	sy
}
 8000d3a:	e001      	b.n	8000d40 <DMA2_Stream5_IRQHandler+0x88>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000d3c:	f007 ff6e 	bl	8008c1c <SEGGER_SYSVIEW_RecordExitISR>
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200000b0 	.word	0x200000b0
 8000d4c:	40026400 	.word	0x40026400
 8000d50:	40026488 	.word	0x40026488
 8000d54:	2000008c 	.word	0x2000008c
 8000d58:	2000009c 	.word	0x2000009c
 8000d5c:	200000ac 	.word	0x200000ac
 8000d60:	e000ed04 	.word	0xe000ed04

08000d64 <USART1_IRQHandler>:

/**
 * This ISR should only execute when there is an error
 */
void USART1_IRQHandler( void )
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000d6e:	f007 ff13 	bl	8008b98 <SEGGER_SYSVIEW_RecordEnterISR>

	//first check for errors
		if(	USART1->SR & (	USART_SR_ORE_Msk |
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <USART1_IRQHandler+0x54>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <USART1_IRQHandler+0x26>
				USART_SR_NE_Msk |
				USART_SR_FE_Msk |
				USART_SR_PE_Msk ))
		{
			//clear error flags
			USART1->SR &= ~(USART_SR_ORE |  // overun error
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <USART1_IRQHandler+0x54>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <USART1_IRQHandler+0x54>)
 8000d84:	f023 030f 	bic.w	r3, r3, #15
 8000d88:	6013      	str	r3, [r2, #0]
	//there is no need to check receive not empty, since
	//receive interrupt requests are triggering transfers
	//through DMA1 channel 4 stream 5
	//	if(	USART2->ISR & USART_ISR_RXNE_Msk)

	SEGGER_SYSVIEW_RecordExitISR();
 8000d8a:	f007 ff47 	bl	8008c1c <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00a      	beq.n	8000daa <USART1_IRQHandler+0x46>
 8000d94:	f007 ff5e 	bl	8008c54 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <USART1_IRQHandler+0x58>)
 8000d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	f3bf 8f4f 	dsb	sy
 8000da4:	f3bf 8f6f 	isb	sy
}
 8000da8:	e001      	b.n	8000dae <USART1_IRQHandler+0x4a>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000daa:	f007 ff37 	bl	8008c1c <SEGGER_SYSVIEW_RecordExitISR>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	e000ed04 	.word	0xe000ed04

08000dc0 <HWInit>:
 * Initialize the minimum amount of hardware that will be used in all examples
 * Other initialization might also be necessary (PWM for LED's, USART's, USB, etc)
 * and should be performed after the initial call to HWInit
 */
void HWInit( void )
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	HAL_Init();
 8000dc4:	f000 fc06 	bl	80015d4 <HAL_Init>
	SystemClock_Config();
 8000dc8:	f000 f806 	bl	8000dd8 <SystemClock_Config>
	gpioPinsInit();			//initialize GPIO lines for LED's
 8000dcc:	f000 f870 	bl	8000eb0 <gpioPinsInit>
	rngInit();
 8000dd0:	f000 fac8 	bl	8001364 <rngInit>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <SystemClock_Config>:
	return RNG->DR %Max + Min;
}


void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	; 0x50
 8000ddc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2230      	movs	r2, #48	; 0x30
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f008 fbc6 	bl	8009578 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a28      	ldr	r2, [pc, #160]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <SystemClock_Config+0xd4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e24:	4a21      	ldr	r2, [pc, #132]	; (8000eac <SystemClock_Config+0xd4>)
 8000e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <SystemClock_Config+0xd4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e40:	2310      	movs	r3, #16
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	2302      	movs	r3, #2
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000e50:	2332      	movs	r3, #50	; 0x32
 8000e52:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e54:	2304      	movs	r3, #4
 8000e56:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fb8f 	bl	8002584 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000e6c:	f000 fa9c 	bl	80013a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2302      	movs	r3, #2
 8000e76:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e80:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e86:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fea0 	bl	8002bd4 <HAL_RCC_ClockConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000e9a:	f000 fa85 	bl	80013a8 <Error_Handler>
	}

}
 8000e9e:	bf00      	nop
 8000ea0:	3750      	adds	r7, #80	; 0x50
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40007000 	.word	0x40007000

08000eb0 <gpioPinsInit>:
/**
  * Initialize all relevant GPIO lines for LED's used in examples, as well as
  * USB pins
  */
static void gpioPinsInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
 8000eca:	4bb2      	ldr	r3, [pc, #712]	; (8001194 <gpioPinsInit+0x2e4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4ab1      	ldr	r2, [pc, #708]	; (8001194 <gpioPinsInit+0x2e4>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4baf      	ldr	r3, [pc, #700]	; (8001194 <gpioPinsInit+0x2e4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	4bab      	ldr	r3, [pc, #684]	; (8001194 <gpioPinsInit+0x2e4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4aaa      	ldr	r2, [pc, #680]	; (8001194 <gpioPinsInit+0x2e4>)
 8000eec:	f043 0320 	orr.w	r3, r3, #32
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4ba8      	ldr	r3, [pc, #672]	; (8001194 <gpioPinsInit+0x2e4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0320 	and.w	r3, r3, #32
 8000efa:	61fb      	str	r3, [r7, #28]
 8000efc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	4ba4      	ldr	r3, [pc, #656]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4aa3      	ldr	r2, [pc, #652]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4ba1      	ldr	r3, [pc, #644]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	4b9d      	ldr	r3, [pc, #628]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a9c      	ldr	r2, [pc, #624]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b9a      	ldr	r3, [pc, #616]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b96      	ldr	r3, [pc, #600]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a95      	ldr	r2, [pc, #596]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b93      	ldr	r3, [pc, #588]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b8f      	ldr	r3, [pc, #572]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a8e      	ldr	r2, [pc, #568]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b8c      	ldr	r3, [pc, #560]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	4b88      	ldr	r3, [pc, #544]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a87      	ldr	r2, [pc, #540]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b85      	ldr	r3, [pc, #532]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b81      	ldr	r3, [pc, #516]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a80      	ldr	r2, [pc, #512]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b7e      	ldr	r3, [pc, #504]	; (8001194 <gpioPinsInit+0x2e4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2116      	movs	r1, #22
 8000faa:	487b      	ldr	r0, [pc, #492]	; (8001198 <gpioPinsInit+0x2e8>)
 8000fac:	f001 fab8 	bl	8002520 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	4879      	ldr	r0, [pc, #484]	; (800119c <gpioPinsInit+0x2ec>)
 8000fb6:	f001 fab3 	bl	8002520 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fc0:	4877      	ldr	r0, [pc, #476]	; (80011a0 <gpioPinsInit+0x2f0>)
 8000fc2:	f001 faad 	bl	8002520 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fcc:	4875      	ldr	r0, [pc, #468]	; (80011a4 <gpioPinsInit+0x2f4>)
 8000fce:	f001 faa7 	bl	8002520 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
	                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
	                           A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000fd2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
			|A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
			|A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	486e      	ldr	r0, [pc, #440]	; (80011a8 <gpioPinsInit+0x2f8>)
 8000ff0:	f000 ff74 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000ff4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001006:	2305      	movs	r3, #5
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	4865      	ldr	r0, [pc, #404]	; (80011a8 <gpioPinsInit+0x2f8>)
 8001012:	f000 ff63 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pin : ENABLE_Pin */
	GPIO_InitStruct.Pin = ENABLE_Pin;
 8001016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001028:	230e      	movs	r3, #14
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	485d      	ldr	r0, [pc, #372]	; (80011a8 <gpioPinsInit+0x2f8>)
 8001034:	f000 ff52 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001048:	230c      	movs	r3, #12
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	4851      	ldr	r0, [pc, #324]	; (8001198 <gpioPinsInit+0x2e8>)
 8001054:	f000 ff42 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001058:	2316      	movs	r3, #22
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	484a      	ldr	r0, [pc, #296]	; (8001198 <gpioPinsInit+0x2e8>)
 8001070:	f000 ff34 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001074:	f248 0307 	movw	r3, #32775	; 0x8007
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800107a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	4844      	ldr	r0, [pc, #272]	; (800119c <gpioPinsInit+0x2ec>)
 800108c:	f000 ff26 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
	                           R5_Pin */
	GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001090:	f641 0358 	movw	r3, #6232	; 0x1858
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
			|R5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a2:	230e      	movs	r3, #14
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	483b      	ldr	r0, [pc, #236]	; (800119c <gpioPinsInit+0x2ec>)
 80010ae:	f000 ff15 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4834      	ldr	r0, [pc, #208]	; (800119c <gpioPinsInit+0x2ec>)
 80010ca:	f000 ff07 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80010ce:	2320      	movs	r3, #32
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <gpioPinsInit+0x2e8>)
 80010e4:	f000 fefa 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : R3_Pin R6_Pin */
	GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010e8:	2303      	movs	r3, #3
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010f8:	2309      	movs	r3, #9
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	482a      	ldr	r0, [pc, #168]	; (80011ac <gpioPinsInit+0x2fc>)
 8001104:	f000 feea 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8001108:	2304      	movs	r3, #4
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001118:	4619      	mov	r1, r3
 800111a:	4824      	ldr	r0, [pc, #144]	; (80011ac <gpioPinsInit+0x2fc>)
 800111c:	f000 fede 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
	                           SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001120:	f248 1333 	movw	r3, #33075	; 0x8133
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
			|SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001132:	230c      	movs	r3, #12
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4819      	ldr	r0, [pc, #100]	; (80011a4 <gpioPinsInit+0x2f4>)
 800113e:	f000 fecd 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
	                           D8_Pin D9_Pin D10_Pin D11_Pin
	                           D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001142:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
			|D8_Pin|D9_Pin|D10_Pin|D11_Pin
			|D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001154:	230c      	movs	r3, #12
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	4814      	ldr	r0, [pc, #80]	; (80011b0 <gpioPinsInit+0x300>)
 8001160:	f000 febc 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
	GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001164:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001176:	230e      	movs	r3, #14
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	480a      	ldr	r0, [pc, #40]	; (80011ac <gpioPinsInit+0x2fc>)
 8001182:	f000 feab 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001186:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001190:	e010      	b.n	80011b4 <gpioPinsInit+0x304>
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40020800 	.word	0x40020800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40021000 	.word	0x40021000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80011bc:	230c      	movs	r3, #12
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	4862      	ldr	r0, [pc, #392]	; (8001350 <gpioPinsInit+0x4a0>)
 80011c8:	f000 fe88 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80011cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	485b      	ldr	r0, [pc, #364]	; (8001350 <gpioPinsInit+0x4a0>)
 80011e2:	f000 fe7b 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
	                           D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80011e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
			|D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f8:	230c      	movs	r3, #12
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	4854      	ldr	r0, [pc, #336]	; (8001354 <gpioPinsInit+0x4a4>)
 8001204:	f000 fe6a 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8001208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	484d      	ldr	r0, [pc, #308]	; (8001354 <gpioPinsInit+0x4a4>)
 800121e:	f000 fe5d 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001222:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	4846      	ldr	r0, [pc, #280]	; (8001354 <gpioPinsInit+0x4a4>)
 800123c:	f000 fe4e 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
	GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001240:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001252:	230e      	movs	r3, #14
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	483e      	ldr	r0, [pc, #248]	; (8001358 <gpioPinsInit+0x4a8>)
 800125e:	f000 fe3d 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
	GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001262:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001274:	230e      	movs	r3, #14
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4619      	mov	r1, r3
 800127e:	4837      	ldr	r0, [pc, #220]	; (800135c <gpioPinsInit+0x4ac>)
 8001280:	f000 fe2c 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SDA_Pin */
	GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128a:	2312      	movs	r3, #18
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001296:	2304      	movs	r3, #4
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	482e      	ldr	r0, [pc, #184]	; (800135c <gpioPinsInit+0x4ac>)
 80012a2:	f000 fe1b 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SCL_Pin */
	GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80012a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ac:	2312      	movs	r3, #18
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012b8:	2304      	movs	r3, #4
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	4827      	ldr	r0, [pc, #156]	; (8001360 <gpioPinsInit+0x4b0>)
 80012c4:	f000 fe0a 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : G7_Pin B2_Pin */
	GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80012c8:	2348      	movs	r3, #72	; 0x48
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012d8:	230e      	movs	r3, #14
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	481c      	ldr	r0, [pc, #112]	; (8001354 <gpioPinsInit+0x4a4>)
 80012e4:	f000 fdfa 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : G3_Pin B4_Pin */
	GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80012e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012fa:	2309      	movs	r3, #9
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	4814      	ldr	r0, [pc, #80]	; (8001358 <gpioPinsInit+0x4a8>)
 8001306:	f000 fde9 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800130a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <gpioPinsInit+0x4a8>)
 8001324:	f000 fdda 	bl	8001edc <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001328:	2360      	movs	r3, #96	; 0x60
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001338:	230c      	movs	r3, #12
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4803      	ldr	r0, [pc, #12]	; (8001350 <gpioPinsInit+0x4a0>)
 8001344:	f000 fdca 	bl	8001edc <HAL_GPIO_Init>

}
 8001348:	bf00      	nop
 800134a:	3738      	adds	r7, #56	; 0x38
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40020400 	.word	0x40020400
 8001354:	40020c00 	.word	0x40020c00
 8001358:	40021800 	.word	0x40021800
 800135c:	40020800 	.word	0x40020800
 8001360:	40020000 	.word	0x40020000

08001364 <rngInit>:

/**
 * Init the random number generator (RNG) peripheral
 */
static void rngInit( void )
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
	//start the peripheral clock
	__HAL_RCC_RNG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <rngInit+0x3c>)
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <rngInit+0x3c>)
 8001374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001378:	6353      	str	r3, [r2, #52]	; 0x34
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <rngInit+0x3c>)
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

	//enable the random number generator
	RNG->CR |= RNG_CR_RNGEN;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <rngInit+0x40>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <rngInit+0x40>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6013      	str	r3, [r2, #0]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	50060800 	.word	0x50060800

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4802      	ldr	r0, [pc, #8]	; (80013d0 <assert_failed+0x18>)
 80013c8:	f007 fe8e 	bl	80090e8 <SEGGER_SYSVIEW_PrintfHost>
                            on line %d\r\n", file, line);
  while(1);
 80013cc:	e7fe      	b.n	80013cc <assert_failed+0x14>
 80013ce:	bf00      	nop
 80013d0:	08009638 	.word	0x08009638

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001412:	2007      	movs	r0, #7
 8001414:	f000 f9ba 	bl	800178c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	; 0x38
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4b33      	ldr	r3, [pc, #204]	; (8001508 <HAL_InitTick+0xe4>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a32      	ldr	r2, [pc, #200]	; (8001508 <HAL_InitTick+0xe4>)
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_InitTick+0xe4>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001450:	f107 0210 	add.w	r2, r7, #16
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fe9a 	bl	8003194 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800146a:	f001 fe6b 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 800146e:	6378      	str	r0, [r7, #52]	; 0x34
 8001470:	e004      	b.n	800147c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001472:	f001 fe67 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 8001476:	4603      	mov	r3, r0
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147e:	4a23      	ldr	r2, [pc, #140]	; (800150c <HAL_InitTick+0xe8>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0c9b      	lsrs	r3, r3, #18
 8001486:	3b01      	subs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <HAL_InitTick+0xec>)
 800148c:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_InitTick+0xf0>)
 800148e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <HAL_InitTick+0xec>)
 8001492:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001496:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001498:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_InitTick+0xec>)
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_InitTick+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_InitTick+0xec>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_InitTick+0xec>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014b0:	4817      	ldr	r0, [pc, #92]	; (8001510 <HAL_InitTick+0xec>)
 80014b2:	f001 fea1 	bl	80031f8 <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d11b      	bne.n	80014fc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014c4:	4812      	ldr	r0, [pc, #72]	; (8001510 <HAL_InitTick+0xec>)
 80014c6:	f001 ff91 	bl	80033ec <HAL_TIM_Base_Start_IT>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d111      	bne.n	80014fc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014d8:	2036      	movs	r0, #54	; 0x36
 80014da:	f000 f9a3 	bl	8001824 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d808      	bhi.n	80014f6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014e4:	2200      	movs	r2, #0
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	2036      	movs	r0, #54	; 0x36
 80014ea:	f000 f96f 	bl	80017cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_InitTick+0xf4>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e002      	b.n	80014fc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001500:	4618      	mov	r0, r3
 8001502:	3738      	adds	r7, #56	; 0x38
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	431bde83 	.word	0x431bde83
 8001510:	20000114 	.word	0x20000114
 8001514:	40001000 	.word	0x40001000
 8001518:	20000004 	.word	0x20000004

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <NMI_Handler+0x4>

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <MemManage_Handler+0x4>

0800152e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler+0x4>

0800153a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <TIM6_DAC_IRQHandler+0x10>)
 800154e:	f002 f813 	bl	8003578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000114 	.word	0x20000114

0800155c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001586:	490e      	ldr	r1, [pc, #56]	; (80015c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800159c:	4c0b      	ldr	r4, [pc, #44]	; (80015cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015aa:	f7ff ffd7 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ae:	f007 ffa1 	bl	80094f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff f9f9 	bl	80009a8 <main>
  bx  lr    
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015c4:	0800991c 	.word	0x0800991c
  ldr r2, =_sbss
 80015c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015cc:	20014580 	.word	0x20014580

080015d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <HAL_Init+0x40>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_Init+0x40>)
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x40>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f8c5 	bl	800178c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff ff0e 	bl	8001424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fee4 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2000015c 	.word	0x2000015c

08001630 <__NVIC_SetPriorityGrouping>:
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b07      	cmp	r3, #7
 8001798:	d00f      	beq.n	80017ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b06      	cmp	r3, #6
 800179e:	d00c      	beq.n	80017ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d009      	beq.n	80017ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d006      	beq.n	80017ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d003      	beq.n	80017ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017b2:	2190      	movs	r1, #144	; 0x90
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80017b6:	f7ff fdff 	bl	80013b8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ff38 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	0800967c 	.word	0x0800967c

080017cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d903      	bls.n	80017ec <HAL_NVIC_SetPriority+0x20>
 80017e4:	21a8      	movs	r1, #168	; 0xa8
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <HAL_NVIC_SetPriority+0x54>)
 80017e8:	f7ff fde6 	bl	80013b8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b0f      	cmp	r3, #15
 80017f0:	d903      	bls.n	80017fa <HAL_NVIC_SetPriority+0x2e>
 80017f2:	21a9      	movs	r1, #169	; 0xa9
 80017f4:	480a      	ldr	r0, [pc, #40]	; (8001820 <HAL_NVIC_SetPriority+0x54>)
 80017f6:	f7ff fddf 	bl	80013b8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fa:	f7ff ff3d 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	6978      	ldr	r0, [r7, #20]
 8001806:	f7ff ff8d 	bl	8001724 <NVIC_EncodePriority>
 800180a:	4602      	mov	r2, r0
 800180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff5c 	bl	80016d0 <__NVIC_SetPriority>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	0800967c 	.word	0x0800967c

08001824 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	da03      	bge.n	800183e <HAL_NVIC_EnableIRQ+0x1a>
 8001836:	21bc      	movs	r1, #188	; 0xbc
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_NVIC_EnableIRQ+0x2c>)
 800183a:	f7ff fdbd 	bl	80013b8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff26 	bl	8001694 <__NVIC_EnableIRQ>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	0800967c 	.word	0x0800967c

08001854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff feda 	bl	8001618 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e203      	b.n	8001c78 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a8b      	ldr	r2, [pc, #556]	; (8001aa4 <HAL_DMA_Init+0x250>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d04e      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a8a      	ldr	r2, [pc, #552]	; (8001aa8 <HAL_DMA_Init+0x254>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d049      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a88      	ldr	r2, [pc, #544]	; (8001aac <HAL_DMA_Init+0x258>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d044      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a87      	ldr	r2, [pc, #540]	; (8001ab0 <HAL_DMA_Init+0x25c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d03f      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a85      	ldr	r2, [pc, #532]	; (8001ab4 <HAL_DMA_Init+0x260>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d03a      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a84      	ldr	r2, [pc, #528]	; (8001ab8 <HAL_DMA_Init+0x264>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d035      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a82      	ldr	r2, [pc, #520]	; (8001abc <HAL_DMA_Init+0x268>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d030      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a81      	ldr	r2, [pc, #516]	; (8001ac0 <HAL_DMA_Init+0x26c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d02b      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <HAL_DMA_Init+0x270>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d026      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a7e      	ldr	r2, [pc, #504]	; (8001ac8 <HAL_DMA_Init+0x274>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d021      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a7c      	ldr	r2, [pc, #496]	; (8001acc <HAL_DMA_Init+0x278>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01c      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a7b      	ldr	r2, [pc, #492]	; (8001ad0 <HAL_DMA_Init+0x27c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d017      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a79      	ldr	r2, [pc, #484]	; (8001ad4 <HAL_DMA_Init+0x280>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d012      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a78      	ldr	r2, [pc, #480]	; (8001ad8 <HAL_DMA_Init+0x284>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00d      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a76      	ldr	r2, [pc, #472]	; (8001adc <HAL_DMA_Init+0x288>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d008      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a75      	ldr	r2, [pc, #468]	; (8001ae0 <HAL_DMA_Init+0x28c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d003      	beq.n	8001918 <HAL_DMA_Init+0xc4>
 8001910:	21b7      	movs	r1, #183	; 0xb7
 8001912:	4874      	ldr	r0, [pc, #464]	; (8001ae4 <HAL_DMA_Init+0x290>)
 8001914:	f7ff fd50 	bl	80013b8 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d026      	beq.n	800196e <HAL_DMA_Init+0x11a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001928:	d021      	beq.n	800196e <HAL_DMA_Init+0x11a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001932:	d01c      	beq.n	800196e <HAL_DMA_Init+0x11a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800193c:	d017      	beq.n	800196e <HAL_DMA_Init+0x11a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001946:	d012      	beq.n	800196e <HAL_DMA_Init+0x11a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001950:	d00d      	beq.n	800196e <HAL_DMA_Init+0x11a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800195a:	d008      	beq.n	800196e <HAL_DMA_Init+0x11a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001964:	d003      	beq.n	800196e <HAL_DMA_Init+0x11a>
 8001966:	21b8      	movs	r1, #184	; 0xb8
 8001968:	485e      	ldr	r0, [pc, #376]	; (8001ae4 <HAL_DMA_Init+0x290>)
 800196a:	f7ff fd25 	bl	80013b8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_DMA_Init+0x13a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d007      	beq.n	800198e <HAL_DMA_Init+0x13a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b80      	cmp	r3, #128	; 0x80
 8001984:	d003      	beq.n	800198e <HAL_DMA_Init+0x13a>
 8001986:	21b9      	movs	r1, #185	; 0xb9
 8001988:	4856      	ldr	r0, [pc, #344]	; (8001ae4 <HAL_DMA_Init+0x290>)
 800198a:	f7ff fd15 	bl	80013b8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001996:	d007      	beq.n	80019a8 <HAL_DMA_Init+0x154>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_DMA_Init+0x154>
 80019a0:	21ba      	movs	r1, #186	; 0xba
 80019a2:	4850      	ldr	r0, [pc, #320]	; (8001ae4 <HAL_DMA_Init+0x290>)
 80019a4:	f7ff fd08 	bl	80013b8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b0:	d007      	beq.n	80019c2 <HAL_DMA_Init+0x16e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_DMA_Init+0x16e>
 80019ba:	21bb      	movs	r1, #187	; 0xbb
 80019bc:	4849      	ldr	r0, [pc, #292]	; (8001ae4 <HAL_DMA_Init+0x290>)
 80019be:	f7ff fcfb 	bl	80013b8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <HAL_DMA_Init+0x192>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d2:	d008      	beq.n	80019e6 <HAL_DMA_Init+0x192>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019dc:	d003      	beq.n	80019e6 <HAL_DMA_Init+0x192>
 80019de:	21bc      	movs	r1, #188	; 0xbc
 80019e0:	4840      	ldr	r0, [pc, #256]	; (8001ae4 <HAL_DMA_Init+0x290>)
 80019e2:	f7ff fce9 	bl	80013b8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00d      	beq.n	8001a0a <HAL_DMA_Init+0x1b6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f6:	d008      	beq.n	8001a0a <HAL_DMA_Init+0x1b6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a00:	d003      	beq.n	8001a0a <HAL_DMA_Init+0x1b6>
 8001a02:	21bd      	movs	r1, #189	; 0xbd
 8001a04:	4837      	ldr	r0, [pc, #220]	; (8001ae4 <HAL_DMA_Init+0x290>)
 8001a06:	f7ff fcd7 	bl	80013b8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00c      	beq.n	8001a2c <HAL_DMA_Init+0x1d8>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a1a:	d007      	beq.n	8001a2c <HAL_DMA_Init+0x1d8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	2b20      	cmp	r3, #32
 8001a22:	d003      	beq.n	8001a2c <HAL_DMA_Init+0x1d8>
 8001a24:	21be      	movs	r1, #190	; 0xbe
 8001a26:	482f      	ldr	r0, [pc, #188]	; (8001ae4 <HAL_DMA_Init+0x290>)
 8001a28:	f7ff fcc6 	bl	80013b8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d012      	beq.n	8001a5a <HAL_DMA_Init+0x206>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d00d      	beq.n	8001a5a <HAL_DMA_Init+0x206>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a46:	d008      	beq.n	8001a5a <HAL_DMA_Init+0x206>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001a50:	d003      	beq.n	8001a5a <HAL_DMA_Init+0x206>
 8001a52:	21bf      	movs	r1, #191	; 0xbf
 8001a54:	4823      	ldr	r0, [pc, #140]	; (8001ae4 <HAL_DMA_Init+0x290>)
 8001a56:	f7ff fcaf 	bl	80013b8 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_DMA_Init+0x21e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d003      	beq.n	8001a72 <HAL_DMA_Init+0x21e>
 8001a6a:	21c0      	movs	r1, #192	; 0xc0
 8001a6c:	481d      	ldr	r0, [pc, #116]	; (8001ae4 <HAL_DMA_Init+0x290>)
 8001a6e:	f7ff fca3 	bl	80013b8 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d064      	beq.n	8001b44 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d032      	beq.n	8001ae8 <HAL_DMA_Init+0x294>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d02e      	beq.n	8001ae8 <HAL_DMA_Init+0x294>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d02a      	beq.n	8001ae8 <HAL_DMA_Init+0x294>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d026      	beq.n	8001ae8 <HAL_DMA_Init+0x294>
 8001a9a:	21c5      	movs	r1, #197	; 0xc5
 8001a9c:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <HAL_DMA_Init+0x290>)
 8001a9e:	f7ff fc8b 	bl	80013b8 <assert_failed>
 8001aa2:	e021      	b.n	8001ae8 <HAL_DMA_Init+0x294>
 8001aa4:	40026010 	.word	0x40026010
 8001aa8:	40026028 	.word	0x40026028
 8001aac:	40026040 	.word	0x40026040
 8001ab0:	40026058 	.word	0x40026058
 8001ab4:	40026070 	.word	0x40026070
 8001ab8:	40026088 	.word	0x40026088
 8001abc:	400260a0 	.word	0x400260a0
 8001ac0:	400260b8 	.word	0x400260b8
 8001ac4:	40026410 	.word	0x40026410
 8001ac8:	40026428 	.word	0x40026428
 8001acc:	40026440 	.word	0x40026440
 8001ad0:	40026458 	.word	0x40026458
 8001ad4:	40026470 	.word	0x40026470
 8001ad8:	40026488 	.word	0x40026488
 8001adc:	400264a0 	.word	0x400264a0
 8001ae0:	400264b8 	.word	0x400264b8
 8001ae4:	080096b8 	.word	0x080096b8
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d012      	beq.n	8001b16 <HAL_DMA_Init+0x2c2>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001af8:	d00d      	beq.n	8001b16 <HAL_DMA_Init+0x2c2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b02:	d008      	beq.n	8001b16 <HAL_DMA_Init+0x2c2>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b0c:	d003      	beq.n	8001b16 <HAL_DMA_Init+0x2c2>
 8001b0e:	21c6      	movs	r1, #198	; 0xc6
 8001b10:	485b      	ldr	r0, [pc, #364]	; (8001c80 <HAL_DMA_Init+0x42c>)
 8001b12:	f7ff fc51 	bl	80013b8 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d012      	beq.n	8001b44 <HAL_DMA_Init+0x2f0>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b26:	d00d      	beq.n	8001b44 <HAL_DMA_Init+0x2f0>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b30:	d008      	beq.n	8001b44 <HAL_DMA_Init+0x2f0>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001b3a:	d003      	beq.n	8001b44 <HAL_DMA_Init+0x2f0>
 8001b3c:	21c7      	movs	r1, #199	; 0xc7
 8001b3e:	4850      	ldr	r0, [pc, #320]	; (8001c80 <HAL_DMA_Init+0x42c>)
 8001b40:	f7ff fc3a 	bl	80013b8 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b64:	e00f      	b.n	8001b86 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b66:	f7ff fd57 	bl	8001618 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d908      	bls.n	8001b86 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2220      	movs	r2, #32
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e078      	b.n	8001c78 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1e8      	bne.n	8001b66 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_DMA_Init+0x430>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d107      	bne.n	8001bf0 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4313      	orrs	r3, r2
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f023 0307 	bic.w	r3, r3, #7
 8001c06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d117      	bne.n	8001c4a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00e      	beq.n	8001c4a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f8d9 	bl	8001de4 <DMA_CheckFifoParam>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2240      	movs	r2, #64	; 0x40
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c46:	2301      	movs	r3, #1
 8001c48:	e016      	b.n	8001c78 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f890 	bl	8001d78 <DMA_CalcBaseAndBitshift>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	223f      	movs	r2, #63	; 0x3f
 8001c62:	409a      	lsls	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	080096b8 	.word	0x080096b8
 8001c84:	f010803f 	.word	0xf010803f

08001c88 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_DMA_Start+0x20>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca6:	d304      	bcc.n	8001cb2 <HAL_DMA_Start+0x2a>
 8001ca8:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001cac:	481a      	ldr	r0, [pc, #104]	; (8001d18 <HAL_DMA_Start+0x90>)
 8001cae:	f7ff fb83 	bl	80013b8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_DMA_Start+0x38>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e026      	b.n	8001d0e <HAL_DMA_Start+0x86>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d115      	bne.n	8001d00 <HAL_DMA_Start+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f817 	bl	8001d1c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e005      	b.n	8001d0c <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	080096b8 	.word	0x080096b8

08001d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b40      	cmp	r3, #64	; 0x40
 8001d48:	d108      	bne.n	8001d5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d5a:	e007      	b.n	8001d6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	60da      	str	r2, [r3, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	3b10      	subs	r3, #16
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <DMA_CalcBaseAndBitshift+0x64>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d92:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <DMA_CalcBaseAndBitshift+0x68>)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d909      	bls.n	8001dba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	1d1a      	adds	r2, r3, #4
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	659a      	str	r2, [r3, #88]	; 0x58
 8001db8:	e007      	b.n	8001dca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dc2:	f023 0303 	bic.w	r3, r3, #3
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	aaaaaaab 	.word	0xaaaaaaab
 8001de0:	080098dc 	.word	0x080098dc

08001de4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11f      	bne.n	8001e3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d856      	bhi.n	8001eb2 <DMA_CheckFifoParam+0xce>
 8001e04:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <DMA_CheckFifoParam+0x28>)
 8001e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0a:	bf00      	nop
 8001e0c:	08001e1d 	.word	0x08001e1d
 8001e10:	08001e2f 	.word	0x08001e2f
 8001e14:	08001e1d 	.word	0x08001e1d
 8001e18:	08001eb3 	.word	0x08001eb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d046      	beq.n	8001eb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e2c:	e043      	b.n	8001eb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e36:	d140      	bne.n	8001eba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3c:	e03d      	b.n	8001eba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e46:	d121      	bne.n	8001e8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d837      	bhi.n	8001ebe <DMA_CheckFifoParam+0xda>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <DMA_CheckFifoParam+0x70>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001e65 	.word	0x08001e65
 8001e58:	08001e6b 	.word	0x08001e6b
 8001e5c:	08001e65 	.word	0x08001e65
 8001e60:	08001e7d 	.word	0x08001e7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
      break;
 8001e68:	e030      	b.n	8001ecc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d025      	beq.n	8001ec2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e7a:	e022      	b.n	8001ec2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e84:	d11f      	bne.n	8001ec6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e8a:	e01c      	b.n	8001ec6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d903      	bls.n	8001e9a <DMA_CheckFifoParam+0xb6>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d003      	beq.n	8001ea0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e98:	e018      	b.n	8001ecc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e9e:	e015      	b.n	8001ecc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00e      	beq.n	8001eca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb0:	e00b      	b.n	8001eca <DMA_CheckFifoParam+0xe6>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e00a      	b.n	8001ecc <DMA_CheckFifoParam+0xe8>
      break;
 8001eb6:	bf00      	nop
 8001eb8:	e008      	b.n	8001ecc <DMA_CheckFifoParam+0xe8>
      break;
 8001eba:	bf00      	nop
 8001ebc:	e006      	b.n	8001ecc <DMA_CheckFifoParam+0xe8>
      break;
 8001ebe:	bf00      	nop
 8001ec0:	e004      	b.n	8001ecc <DMA_CheckFifoParam+0xe8>
      break;
 8001ec2:	bf00      	nop
 8001ec4:	e002      	b.n	8001ecc <DMA_CheckFifoParam+0xe8>
      break;   
 8001ec6:	bf00      	nop
 8001ec8:	e000      	b.n	8001ecc <DMA_CheckFifoParam+0xe8>
      break;
 8001eca:	bf00      	nop
    }
  } 
  
  return status; 
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a3d      	ldr	r2, [pc, #244]	; (8001fec <HAL_GPIO_Init+0x110>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d02b      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a3c      	ldr	r2, [pc, #240]	; (8001ff0 <HAL_GPIO_Init+0x114>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d027      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a3b      	ldr	r2, [pc, #236]	; (8001ff4 <HAL_GPIO_Init+0x118>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d023      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a3a      	ldr	r2, [pc, #232]	; (8001ff8 <HAL_GPIO_Init+0x11c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01f      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a39      	ldr	r2, [pc, #228]	; (8001ffc <HAL_GPIO_Init+0x120>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01b      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a38      	ldr	r2, [pc, #224]	; (8002000 <HAL_GPIO_Init+0x124>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d017      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a37      	ldr	r2, [pc, #220]	; (8002004 <HAL_GPIO_Init+0x128>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a36      	ldr	r2, [pc, #216]	; (8002008 <HAL_GPIO_Init+0x12c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00f      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a35      	ldr	r2, [pc, #212]	; (800200c <HAL_GPIO_Init+0x130>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00b      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a34      	ldr	r2, [pc, #208]	; (8002010 <HAL_GPIO_Init+0x134>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a33      	ldr	r2, [pc, #204]	; (8002014 <HAL_GPIO_Init+0x138>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x76>
 8001f4a:	21ac      	movs	r1, #172	; 0xac
 8001f4c:	4832      	ldr	r0, [pc, #200]	; (8002018 <HAL_GPIO_Init+0x13c>)
 8001f4e:	f7ff fa33 	bl	80013b8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_GPIO_Init+0x8c>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0c1b      	lsrs	r3, r3, #16
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x94>
 8001f68:	21ad      	movs	r1, #173	; 0xad
 8001f6a:	482b      	ldr	r0, [pc, #172]	; (8002018 <HAL_GPIO_Init+0x13c>)
 8001f6c:	f7ff fa24 	bl	80013b8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d035      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d031      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b11      	cmp	r3, #17
 8001f86:	d02d      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d029      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b12      	cmp	r3, #18
 8001f96:	d025      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001fa0:	d020      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001faa:	d01b      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001fb4:	d016      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001fbe:	d011      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001fd2:	d007      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x108>
 8001fdc:	21ae      	movs	r1, #174	; 0xae
 8001fde:	480e      	ldr	r0, [pc, #56]	; (8002018 <HAL_GPIO_Init+0x13c>)
 8001fe0:	f7ff f9ea 	bl	80013b8 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	e274      	b.n	80024d4 <HAL_GPIO_Init+0x5f8>
 8001fea:	bf00      	nop
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40021400 	.word	0x40021400
 8002004:	40021800 	.word	0x40021800
 8002008:	40021c00 	.word	0x40021c00
 800200c:	40022000 	.word	0x40022000
 8002010:	40022400 	.word	0x40022400
 8002014:	40022800 	.word	0x40022800
 8002018:	080096f0 	.word	0x080096f0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 824a 	bne.w	80024ce <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d005      	beq.n	8002052 <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	2b02      	cmp	r3, #2
 8002050:	d144      	bne.n	80020dc <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00f      	beq.n	800207a <HAL_GPIO_Init+0x19e>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d00b      	beq.n	800207a <HAL_GPIO_Init+0x19e>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x19e>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x19e>
 8002072:	21c0      	movs	r1, #192	; 0xc0
 8002074:	4831      	ldr	r0, [pc, #196]	; (800213c <HAL_GPIO_Init+0x260>)
 8002076:	f7ff f99f 	bl	80013b8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 0201 	and.w	r2, r3, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d02b      	beq.n	8002140 <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00b      	beq.n	8002108 <HAL_GPIO_Init+0x22c>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d007      	beq.n	8002108 <HAL_GPIO_Init+0x22c>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x22c>
 8002100:	21d1      	movs	r1, #209	; 0xd1
 8002102:	480e      	ldr	r0, [pc, #56]	; (800213c <HAL_GPIO_Init+0x260>)
 8002104:	f7ff f958 	bl	80013b8 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	e002      	b.n	8002140 <HAL_GPIO_Init+0x264>
 800213a:	bf00      	nop
 800213c:	080096f0 	.word	0x080096f0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	f040 80df 	bne.w	800230c <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80b6 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b09      	cmp	r3, #9
 800215e:	f000 80b1 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80ac 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a7 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80a2 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 809d 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b01      	cmp	r3, #1
 8002190:	f000 8098 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b01      	cmp	r3, #1
 800219a:	f000 8093 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	f000 808e 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	f000 8089 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	f000 8084 	beq.w	80022c4 <HAL_GPIO_Init+0x3e8>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d07f      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d07b      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d077      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d073      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d06f      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d06b      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b09      	cmp	r3, #9
 80021f2:	d067      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b06      	cmp	r3, #6
 80021fa:	d063      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b09      	cmp	r3, #9
 8002202:	d05f      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b07      	cmp	r3, #7
 800220a:	d05b      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b07      	cmp	r3, #7
 8002212:	d057      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b07      	cmp	r3, #7
 800221a:	d053      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d04f      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d04b      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d047      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b09      	cmp	r3, #9
 800223a:	d043      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b09      	cmp	r3, #9
 8002242:	d03f      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b0a      	cmp	r3, #10
 800224a:	d03b      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b0a      	cmp	r3, #10
 8002252:	d037      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b0b      	cmp	r3, #11
 800225a:	d033      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b0c      	cmp	r3, #12
 8002262:	d02f      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d02b      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b0d      	cmp	r3, #13
 8002272:	d027      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d023      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b05      	cmp	r3, #5
 8002282:	d01f      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d01b      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d013      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d00f      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d00b      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d007      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b0e      	cmp	r3, #14
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x3e8>
 80022bc:	21de      	movs	r1, #222	; 0xde
 80022be:	488a      	ldr	r0, [pc, #552]	; (80024e8 <HAL_GPIO_Init+0x60c>)
 80022c0:	f7ff f87a 	bl	80013b8 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0203 	and.w	r2, r3, #3
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80c0 	beq.w	80024ce <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b66      	ldr	r3, [pc, #408]	; (80024ec <HAL_GPIO_Init+0x610>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a65      	ldr	r2, [pc, #404]	; (80024ec <HAL_GPIO_Init+0x610>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235c:	6453      	str	r3, [r2, #68]	; 0x44
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <HAL_GPIO_Init+0x610>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800236a:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <HAL_GPIO_Init+0x614>)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_GPIO_Init+0x618>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d037      	beq.n	8002406 <HAL_GPIO_Init+0x52a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <HAL_GPIO_Init+0x61c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d031      	beq.n	8002402 <HAL_GPIO_Init+0x526>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_GPIO_Init+0x620>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02b      	beq.n	80023fe <HAL_GPIO_Init+0x522>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a55      	ldr	r2, [pc, #340]	; (8002500 <HAL_GPIO_Init+0x624>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d025      	beq.n	80023fa <HAL_GPIO_Init+0x51e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a54      	ldr	r2, [pc, #336]	; (8002504 <HAL_GPIO_Init+0x628>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <HAL_GPIO_Init+0x51a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a53      	ldr	r2, [pc, #332]	; (8002508 <HAL_GPIO_Init+0x62c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d019      	beq.n	80023f2 <HAL_GPIO_Init+0x516>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_GPIO_Init+0x630>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_GPIO_Init+0x512>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_GPIO_Init+0x634>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00d      	beq.n	80023ea <HAL_GPIO_Init+0x50e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a50      	ldr	r2, [pc, #320]	; (8002514 <HAL_GPIO_Init+0x638>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x50a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x63c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_GPIO_Init+0x506>
 80023de:	2309      	movs	r3, #9
 80023e0:	e012      	b.n	8002408 <HAL_GPIO_Init+0x52c>
 80023e2:	230a      	movs	r3, #10
 80023e4:	e010      	b.n	8002408 <HAL_GPIO_Init+0x52c>
 80023e6:	2308      	movs	r3, #8
 80023e8:	e00e      	b.n	8002408 <HAL_GPIO_Init+0x52c>
 80023ea:	2307      	movs	r3, #7
 80023ec:	e00c      	b.n	8002408 <HAL_GPIO_Init+0x52c>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e00a      	b.n	8002408 <HAL_GPIO_Init+0x52c>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x52c>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x52c>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x52c>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x52c>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x52c>
 8002406:	2300      	movs	r3, #0
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002418:	4935      	ldr	r1, [pc, #212]	; (80024f0 <HAL_GPIO_Init+0x614>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_GPIO_Init+0x640>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244a:	4a34      	ldr	r2, [pc, #208]	; (800251c <HAL_GPIO_Init+0x640>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002450:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_GPIO_Init+0x640>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002474:	4a29      	ldr	r2, [pc, #164]	; (800251c <HAL_GPIO_Init+0x640>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247a:	4b28      	ldr	r3, [pc, #160]	; (800251c <HAL_GPIO_Init+0x640>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <HAL_GPIO_Init+0x640>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_GPIO_Init+0x640>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <HAL_GPIO_Init+0x640>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f67f ada0 	bls.w	800201c <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	080096f0 	.word	0x080096f0
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021000 	.word	0x40021000
 8002508:	40021400 	.word	0x40021400
 800250c:	40021800 	.word	0x40021800
 8002510:	40021c00 	.word	0x40021c00
 8002514:	40022000 	.word	0x40022000
 8002518:	40022400 	.word	0x40022400
 800251c:	40013c00 	.word	0x40013c00

08002520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
 800252c:	4613      	mov	r3, r2
 800252e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <HAL_GPIO_WritePin+0x20>
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <HAL_GPIO_WritePin+0x2a>
 8002540:	f240 119d 	movw	r1, #413	; 0x19d
 8002544:	480e      	ldr	r0, [pc, #56]	; (8002580 <HAL_GPIO_WritePin+0x60>)
 8002546:	f7fe ff37 	bl	80013b8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800254a:	787b      	ldrb	r3, [r7, #1]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_GPIO_WritePin+0x40>
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d004      	beq.n	8002560 <HAL_GPIO_WritePin+0x40>
 8002556:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800255a:	4809      	ldr	r0, [pc, #36]	; (8002580 <HAL_GPIO_WritePin+0x60>)
 800255c:	f7fe ff2c 	bl	80013b8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800256c:	e003      	b.n	8002576 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	041a      	lsls	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	619a      	str	r2, [r3, #24]
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	080096f0 	.word	0x080096f0

08002584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e314      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	d903      	bls.n	80025a6 <HAL_RCC_OscConfig+0x22>
 800259e:	21e6      	movs	r1, #230	; 0xe6
 80025a0:	4897      	ldr	r0, [pc, #604]	; (8002800 <HAL_RCC_OscConfig+0x27c>)
 80025a2:	f7fe ff09 	bl	80013b8 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8088 	beq.w	80026c4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <HAL_RCC_OscConfig+0x54>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d008      	beq.n	80025d8 <HAL_RCC_OscConfig+0x54>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ce:	d003      	beq.n	80025d8 <HAL_RCC_OscConfig+0x54>
 80025d0:	21eb      	movs	r1, #235	; 0xeb
 80025d2:	488b      	ldr	r0, [pc, #556]	; (8002800 <HAL_RCC_OscConfig+0x27c>)
 80025d4:	f7fe fef0 	bl	80013b8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d8:	4b8a      	ldr	r3, [pc, #552]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d00c      	beq.n	80025fe <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e4:	4b87      	ldr	r3, [pc, #540]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d112      	bne.n	8002616 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f0:	4b84      	ldr	r3, [pc, #528]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025fc:	d10b      	bne.n	8002616 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fe:	4b81      	ldr	r3, [pc, #516]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d05b      	beq.n	80026c2 <HAL_RCC_OscConfig+0x13e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d157      	bne.n	80026c2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e2d4      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0xaa>
 8002620:	4b78      	ldr	r3, [pc, #480]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a77      	ldr	r2, [pc, #476]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e01d      	b.n	800266a <HAL_RCC_OscConfig+0xe6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002636:	d10c      	bne.n	8002652 <HAL_RCC_OscConfig+0xce>
 8002638:	4b72      	ldr	r3, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a71      	ldr	r2, [pc, #452]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 800263e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b6f      	ldr	r3, [pc, #444]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a6e      	ldr	r2, [pc, #440]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e00b      	b.n	800266a <HAL_RCC_OscConfig+0xe6>
 8002652:	4b6c      	ldr	r3, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6b      	ldr	r2, [pc, #428]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b69      	ldr	r3, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a68      	ldr	r2, [pc, #416]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d013      	beq.n	800269a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7fe ffd1 	bl	8001618 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267a:	f7fe ffcd 	bl	8001618 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b64      	cmp	r3, #100	; 0x64
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e299      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268c:	4b5d      	ldr	r3, [pc, #372]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0xf6>
 8002698:	e014      	b.n	80026c4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269a:	f7fe ffbd 	bl	8001618 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a2:	f7fe ffb9 	bl	8001618 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e285      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b4:	4b53      	ldr	r3, [pc, #332]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x11e>
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d079      	beq.n	80027c4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCC_OscConfig+0x166>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d004      	beq.n	80026ea <HAL_RCC_OscConfig+0x166>
 80026e0:	f240 111d 	movw	r1, #285	; 0x11d
 80026e4:	4846      	ldr	r0, [pc, #280]	; (8002800 <HAL_RCC_OscConfig+0x27c>)
 80026e6:	f7fe fe67 	bl	80013b8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b1f      	cmp	r3, #31
 80026f0:	d904      	bls.n	80026fc <HAL_RCC_OscConfig+0x178>
 80026f2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80026f6:	4842      	ldr	r0, [pc, #264]	; (8002800 <HAL_RCC_OscConfig+0x27c>)
 80026f8:	f7fe fe5e 	bl	80013b8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026fc:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002708:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002710:	2b08      	cmp	r3, #8
 8002712:	d11c      	bne.n	800274e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002714:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d116      	bne.n	800274e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002720:	4b38      	ldr	r3, [pc, #224]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_OscConfig+0x1b4>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d001      	beq.n	8002738 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e243      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	492f      	ldr	r1, [pc, #188]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274c:	e03a      	b.n	80027c4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d020      	beq.n	8002798 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002756:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <HAL_RCC_OscConfig+0x284>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe ff5c 	bl	8001618 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002764:	f7fe ff58 	bl	8001618 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e224      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	491c      	ldr	r1, [pc, #112]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
 8002796:	e015      	b.n	80027c4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_RCC_OscConfig+0x284>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe ff3b 	bl	8001618 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe ff37 	bl	8001618 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e203      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_OscConfig+0x280>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d045      	beq.n	800285c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_OscConfig+0x266>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d004      	beq.n	80027ea <HAL_RCC_OscConfig+0x266>
 80027e0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80027e4:	4806      	ldr	r0, [pc, #24]	; (8002800 <HAL_RCC_OscConfig+0x27c>)
 80027e6:	f7fe fde7 	bl	80013b8 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01e      	beq.n	8002830 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_OscConfig+0x288>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe ff0e 	bl	8001618 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	e010      	b.n	8002822 <HAL_RCC_OscConfig+0x29e>
 8002800:	0800972c 	.word	0x0800972c
 8002804:	40023800 	.word	0x40023800
 8002808:	42470000 	.word	0x42470000
 800280c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002810:	f7fe ff02 	bl	8001618 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1ce      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	4b5e      	ldr	r3, [pc, #376]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x28c>
 800282e:	e015      	b.n	800285c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002830:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_RCC_OscConfig+0x41c>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe feef 	bl	8001618 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283e:	f7fe feeb 	bl	8001618 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1b7      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002850:	4b52      	ldr	r3, [pc, #328]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f0      	bne.n	800283e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80b0 	beq.w	80029ca <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <HAL_RCC_OscConfig+0x30c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d008      	beq.n	8002890 <HAL_RCC_OscConfig+0x30c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b05      	cmp	r3, #5
 8002884:	d004      	beq.n	8002890 <HAL_RCC_OscConfig+0x30c>
 8002886:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800288a:	4846      	ldr	r0, [pc, #280]	; (80029a4 <HAL_RCC_OscConfig+0x420>)
 800288c:	f7fe fd94 	bl	80013b8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002890:	4b42      	ldr	r3, [pc, #264]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10f      	bne.n	80028bc <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	4b3e      	ldr	r3, [pc, #248]	; (800299c <HAL_RCC_OscConfig+0x418>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	4a3d      	ldr	r2, [pc, #244]	; (800299c <HAL_RCC_OscConfig+0x418>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028aa:	6413      	str	r3, [r2, #64]	; 0x40
 80028ac:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCC_OscConfig+0x418>)
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <HAL_RCC_OscConfig+0x424>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d118      	bne.n	80028fa <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCC_OscConfig+0x424>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a36      	ldr	r2, [pc, #216]	; (80029a8 <HAL_RCC_OscConfig+0x424>)
 80028ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d4:	f7fe fea0 	bl	8001618 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe fe9c 	bl	8001618 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e168      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_RCC_OscConfig+0x424>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d106      	bne.n	8002910 <HAL_RCC_OscConfig+0x38c>
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a25      	ldr	r2, [pc, #148]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	e01c      	b.n	800294a <HAL_RCC_OscConfig+0x3c6>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b05      	cmp	r3, #5
 8002916:	d10c      	bne.n	8002932 <HAL_RCC_OscConfig+0x3ae>
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCC_OscConfig+0x418>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a1f      	ldr	r2, [pc, #124]	; (800299c <HAL_RCC_OscConfig+0x418>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a1c      	ldr	r2, [pc, #112]	; (800299c <HAL_RCC_OscConfig+0x418>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	e00b      	b.n	800294a <HAL_RCC_OscConfig+0x3c6>
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a19      	ldr	r2, [pc, #100]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d015      	beq.n	800297e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7fe fe61 	bl	8001618 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe fe5d 	bl	8001618 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e127      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_RCC_OscConfig+0x418>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ee      	beq.n	800295a <HAL_RCC_OscConfig+0x3d6>
 800297c:	e01c      	b.n	80029b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe fe4b 	bl	8001618 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	e012      	b.n	80029ac <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe fe47 	bl	8001618 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d909      	bls.n	80029ac <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e111      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
 800299c:	40023800 	.word	0x40023800
 80029a0:	42470e80 	.word	0x42470e80
 80029a4:	0800972c 	.word	0x0800972c
 80029a8:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	4b86      	ldr	r3, [pc, #536]	; (8002bc8 <HAL_RCC_OscConfig+0x644>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e6      	bne.n	8002986 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b8:	7dfb      	ldrb	r3, [r7, #23]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d105      	bne.n	80029ca <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029be:	4b82      	ldr	r3, [pc, #520]	; (8002bc8 <HAL_RCC_OscConfig+0x644>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a81      	ldr	r2, [pc, #516]	; (8002bc8 <HAL_RCC_OscConfig+0x644>)
 80029c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_RCC_OscConfig+0x468>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d008      	beq.n	80029ec <HAL_RCC_OscConfig+0x468>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d004      	beq.n	80029ec <HAL_RCC_OscConfig+0x468>
 80029e2:	f240 11cd 	movw	r1, #461	; 0x1cd
 80029e6:	4879      	ldr	r0, [pc, #484]	; (8002bcc <HAL_RCC_OscConfig+0x648>)
 80029e8:	f7fe fce6 	bl	80013b8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80e4 	beq.w	8002bbe <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f6:	4b74      	ldr	r3, [pc, #464]	; (8002bc8 <HAL_RCC_OscConfig+0x644>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	f000 80a5 	beq.w	8002b4e <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	f040 8089 	bne.w	8002b20 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_OscConfig+0x4a6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a1e:	d004      	beq.n	8002a2a <HAL_RCC_OscConfig+0x4a6>
 8002a20:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002a24:	4869      	ldr	r0, [pc, #420]	; (8002bcc <HAL_RCC_OscConfig+0x648>)
 8002a26:	f7fe fcc7 	bl	80013b8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	2b3f      	cmp	r3, #63	; 0x3f
 8002a30:	d904      	bls.n	8002a3c <HAL_RCC_OscConfig+0x4b8>
 8002a32:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002a36:	4865      	ldr	r0, [pc, #404]	; (8002bcc <HAL_RCC_OscConfig+0x648>)
 8002a38:	f7fe fcbe 	bl	80013b8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	2b31      	cmp	r3, #49	; 0x31
 8002a42:	d904      	bls.n	8002a4e <HAL_RCC_OscConfig+0x4ca>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002a4c:	d904      	bls.n	8002a58 <HAL_RCC_OscConfig+0x4d4>
 8002a4e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002a52:	485e      	ldr	r0, [pc, #376]	; (8002bcc <HAL_RCC_OscConfig+0x648>)
 8002a54:	f7fe fcb0 	bl	80013b8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d010      	beq.n	8002a82 <HAL_RCC_OscConfig+0x4fe>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d00c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x4fe>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_OscConfig+0x4fe>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d004      	beq.n	8002a82 <HAL_RCC_OscConfig+0x4fe>
 8002a78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002a7c:	4853      	ldr	r0, [pc, #332]	; (8002bcc <HAL_RCC_OscConfig+0x648>)
 8002a7e:	f7fe fc9b 	bl	80013b8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d903      	bls.n	8002a92 <HAL_RCC_OscConfig+0x50e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	2b0f      	cmp	r3, #15
 8002a90:	d904      	bls.n	8002a9c <HAL_RCC_OscConfig+0x518>
 8002a92:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002a96:	484d      	ldr	r0, [pc, #308]	; (8002bcc <HAL_RCC_OscConfig+0x648>)
 8002a98:	f7fe fc8e 	bl	80013b8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b4c      	ldr	r3, [pc, #304]	; (8002bd0 <HAL_RCC_OscConfig+0x64c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fdb9 	bl	8001618 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aaa:	f7fe fdb5 	bl	8001618 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e081      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abc:	4b42      	ldr	r3, [pc, #264]	; (8002bc8 <HAL_RCC_OscConfig+0x644>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	019b      	lsls	r3, r3, #6
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	041b      	lsls	r3, r3, #16
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	4936      	ldr	r1, [pc, #216]	; (8002bc8 <HAL_RCC_OscConfig+0x644>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af2:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <HAL_RCC_OscConfig+0x64c>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe fd8e 	bl	8001618 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fd8a 	bl	8001618 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e056      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_RCC_OscConfig+0x644>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x57c>
 8002b1e:	e04e      	b.n	8002bbe <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x64c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe fd77 	bl	8001618 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fe fd73 	bl	8001618 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e03f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b40:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <HAL_RCC_OscConfig+0x644>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x5aa>
 8002b4c:	e037      	b.n	8002bbe <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e032      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x644>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d028      	beq.n	8002bba <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d121      	bne.n	8002bba <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d11a      	bne.n	8002bba <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d111      	bne.n	8002bba <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	085b      	lsrs	r3, r3, #1
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	0800972c 	.word	0x0800972c
 8002bd0:	42470060 	.word	0x42470060

08002bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e18c      	b.n	8002f02 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x24>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d904      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x2e>
 8002bf8:	f240 215a 	movw	r1, #602	; 0x25a
 8002bfc:	4887      	ldr	r0, [pc, #540]	; (8002e1c <HAL_RCC_ClockConfig+0x248>)
 8002bfe:	f7fe fbdb 	bl	80013b8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d031      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d02e      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d02b      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d028      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d025      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d022      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d01f      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b07      	cmp	r3, #7
 8002c30:	d01c      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d019      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b09      	cmp	r3, #9
 8002c3c:	d016      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b0a      	cmp	r3, #10
 8002c42:	d013      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b0b      	cmp	r3, #11
 8002c48:	d010      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d00d      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b0d      	cmp	r3, #13
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b0e      	cmp	r3, #14
 8002c5a:	d007      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	d004      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x98>
 8002c62:	f240 215b 	movw	r1, #603	; 0x25b
 8002c66:	486d      	ldr	r0, [pc, #436]	; (8002e1c <HAL_RCC_ClockConfig+0x248>)
 8002c68:	f7fe fba6 	bl	80013b8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b6c      	ldr	r3, [pc, #432]	; (8002e20 <HAL_RCC_ClockConfig+0x24c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d90c      	bls.n	8002c94 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b69      	ldr	r3, [pc, #420]	; (8002e20 <HAL_RCC_ClockConfig+0x24c>)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <HAL_RCC_ClockConfig+0x24c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e136      	b.n	8002f02 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d049      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cac:	4b5d      	ldr	r3, [pc, #372]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a5c      	ldr	r2, [pc, #368]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc4:	4b57      	ldr	r3, [pc, #348]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a56      	ldr	r2, [pc, #344]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d024      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x14e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b80      	cmp	r3, #128	; 0x80
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x14e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b90      	cmp	r3, #144	; 0x90
 8002ce6:	d01c      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x14e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2ba0      	cmp	r3, #160	; 0xa0
 8002cee:	d018      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x14e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2bb0      	cmp	r3, #176	; 0xb0
 8002cf6:	d014      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x14e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2bc0      	cmp	r3, #192	; 0xc0
 8002cfe:	d010      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x14e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2bd0      	cmp	r3, #208	; 0xd0
 8002d06:	d00c      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x14e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2be0      	cmp	r3, #224	; 0xe0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x14e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2bf0      	cmp	r3, #240	; 0xf0
 8002d16:	d004      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x14e>
 8002d18:	f240 217e 	movw	r1, #638	; 0x27e
 8002d1c:	483f      	ldr	r0, [pc, #252]	; (8002e1c <HAL_RCC_ClockConfig+0x248>)
 8002d1e:	f7fe fb4b 	bl	80013b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d22:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	493d      	ldr	r1, [pc, #244]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d059      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x196>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d00c      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x196>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x196>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d004      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x196>
 8002d60:	f240 2185 	movw	r1, #645	; 0x285
 8002d64:	482d      	ldr	r0, [pc, #180]	; (8002e1c <HAL_RCC_ClockConfig+0x248>)
 8002d66:	f7fe fb27 	bl	80013b8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d119      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e0bf      	b.n	8002f02 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0af      	b.n	8002f02 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0a7      	b.n	8002f02 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4919      	ldr	r1, [pc, #100]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fc28 	bl	8001618 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe fc24 	bl	8001618 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e08f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_RCC_ClockConfig+0x250>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_ClockConfig+0x24c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d212      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <HAL_RCC_ClockConfig+0x24c>)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_ClockConfig+0x24c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d007      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e072      	b.n	8002f02 <HAL_RCC_ClockConfig+0x32e>
 8002e1c:	0800972c 	.word	0x0800972c
 8002e20:	40023c00 	.word	0x40023c00
 8002e24:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d025      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d018      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x29a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e44:	d013      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x29a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e4e:	d00e      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x29a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x29a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002e62:	d004      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x29a>
 8002e64:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002e68:	4828      	ldr	r0, [pc, #160]	; (8002f0c <HAL_RCC_ClockConfig+0x338>)
 8002e6a:	f7fe faa5 	bl	80013b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6e:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_RCC_ClockConfig+0x33c>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	4925      	ldr	r1, [pc, #148]	; (8002f10 <HAL_RCC_ClockConfig+0x33c>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d026      	beq.n	8002eda <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d018      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x2f2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9c:	d013      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x2f2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x2f2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x2f2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002eba:	d004      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x2f2>
 8002ebc:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002ec0:	4812      	ldr	r0, [pc, #72]	; (8002f0c <HAL_RCC_ClockConfig+0x338>)
 8002ec2:	f7fe fa79 	bl	80013b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_RCC_ClockConfig+0x33c>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	490e      	ldr	r1, [pc, #56]	; (8002f10 <HAL_RCC_ClockConfig+0x33c>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eda:	f000 f821 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_ClockConfig+0x33c>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	490a      	ldr	r1, [pc, #40]	; (8002f14 <HAL_RCC_ClockConfig+0x340>)
 8002eec:	5ccb      	ldrb	r3, [r1, r3]
 8002eee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef2:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <HAL_RCC_ClockConfig+0x344>)
 8002ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x348>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fa92 	bl	8001424 <HAL_InitTick>

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	0800972c 	.word	0x0800972c
 8002f10:	40023800 	.word	0x40023800
 8002f14:	080098c4 	.word	0x080098c4
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	20000004 	.word	0x20000004

08002f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f24:	b094      	sub	sp, #80	; 0x50
 8002f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f30:	2300      	movs	r3, #0
 8002f32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f38:	4b79      	ldr	r3, [pc, #484]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 030c 	and.w	r3, r3, #12
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d00d      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x40>
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	f200 80e1 	bhi.w	800310c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x34>
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d003      	beq.n	8002f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f52:	e0db      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f54:	4b73      	ldr	r3, [pc, #460]	; (8003124 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f58:	e0db      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5a:	4b73      	ldr	r3, [pc, #460]	; (8003128 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f5e:	e0d8      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f60:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f6a:	4b6d      	ldr	r3, [pc, #436]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d063      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f76:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	099b      	lsrs	r3, r3, #6
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f92:	4622      	mov	r2, r4
 8002f94:	462b      	mov	r3, r5
 8002f96:	f04f 0000 	mov.w	r0, #0
 8002f9a:	f04f 0100 	mov.w	r1, #0
 8002f9e:	0159      	lsls	r1, r3, #5
 8002fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa4:	0150      	lsls	r0, r2, #5
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4621      	mov	r1, r4
 8002fac:	1a51      	subs	r1, r2, r1
 8002fae:	6139      	str	r1, [r7, #16]
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc4:	4659      	mov	r1, fp
 8002fc6:	018b      	lsls	r3, r1, #6
 8002fc8:	4651      	mov	r1, sl
 8002fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fce:	4651      	mov	r1, sl
 8002fd0:	018a      	lsls	r2, r1, #6
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fd8:	4659      	mov	r1, fp
 8002fda:	eb63 0901 	sbc.w	r9, r3, r1
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff2:	4690      	mov	r8, r2
 8002ff4:	4699      	mov	r9, r3
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	eb18 0303 	adds.w	r3, r8, r3
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	462b      	mov	r3, r5
 8003000:	eb49 0303 	adc.w	r3, r9, r3
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003012:	4629      	mov	r1, r5
 8003014:	024b      	lsls	r3, r1, #9
 8003016:	4621      	mov	r1, r4
 8003018:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800301c:	4621      	mov	r1, r4
 800301e:	024a      	lsls	r2, r1, #9
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003026:	2200      	movs	r2, #0
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
 800302a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800302c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003030:	f7fd f928 	bl	8000284 <__aeabi_uldivmod>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4613      	mov	r3, r2
 800303a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800303c:	e058      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303e:	4b38      	ldr	r3, [pc, #224]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	099b      	lsrs	r3, r3, #6
 8003044:	2200      	movs	r2, #0
 8003046:	4618      	mov	r0, r3
 8003048:	4611      	mov	r1, r2
 800304a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
 8003054:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003058:	4642      	mov	r2, r8
 800305a:	464b      	mov	r3, r9
 800305c:	f04f 0000 	mov.w	r0, #0
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	0159      	lsls	r1, r3, #5
 8003066:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306a:	0150      	lsls	r0, r2, #5
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4641      	mov	r1, r8
 8003072:	ebb2 0a01 	subs.w	sl, r2, r1
 8003076:	4649      	mov	r1, r9
 8003078:	eb63 0b01 	sbc.w	fp, r3, r1
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003088:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800308c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003090:	ebb2 040a 	subs.w	r4, r2, sl
 8003094:	eb63 050b 	sbc.w	r5, r3, fp
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	00eb      	lsls	r3, r5, #3
 80030a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a6:	00e2      	lsls	r2, r4, #3
 80030a8:	4614      	mov	r4, r2
 80030aa:	461d      	mov	r5, r3
 80030ac:	4643      	mov	r3, r8
 80030ae:	18e3      	adds	r3, r4, r3
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	464b      	mov	r3, r9
 80030b4:	eb45 0303 	adc.w	r3, r5, r3
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030c6:	4629      	mov	r1, r5
 80030c8:	028b      	lsls	r3, r1, #10
 80030ca:	4621      	mov	r1, r4
 80030cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d0:	4621      	mov	r1, r4
 80030d2:	028a      	lsls	r2, r1, #10
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030da:	2200      	movs	r2, #0
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	61fa      	str	r2, [r7, #28]
 80030e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e4:	f7fd f8ce 	bl	8000284 <__aeabi_uldivmod>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4613      	mov	r3, r2
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	3301      	adds	r3, #1
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003100:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800310a:	e002      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetSysClockFreq+0x204>)
 800310e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003114:	4618      	mov	r0, r3
 8003116:	3750      	adds	r7, #80	; 0x50
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800
 8003124:	00f42400 	.word	0x00f42400
 8003128:	007a1200 	.word	0x007a1200

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCC_GetHCLKFreq+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000000 	.word	0x20000000

08003144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003148:	f7ff fff0 	bl	800312c <HAL_RCC_GetHCLKFreq>
 800314c:	4602      	mov	r2, r0
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	0a9b      	lsrs	r3, r3, #10
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	4903      	ldr	r1, [pc, #12]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800315a:	5ccb      	ldrb	r3, [r1, r3]
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	080098d4 	.word	0x080098d4

0800316c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003170:	f7ff ffdc 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	0b5b      	lsrs	r3, r3, #13
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4903      	ldr	r1, [pc, #12]	; (8003190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40023800 	.word	0x40023800
 8003190:	080098d4 	.word	0x080098d4

08003194 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	220f      	movs	r2, #15
 80031a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_RCC_GetClockConfig+0x5c>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0203 	and.w	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_RCC_GetClockConfig+0x5c>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <HAL_RCC_GetClockConfig+0x5c>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031c8:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_GetClockConfig+0x5c>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	08db      	lsrs	r3, r3, #3
 80031ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031d6:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <HAL_RCC_GetClockConfig+0x60>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 020f 	and.w	r2, r3, #15
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	601a      	str	r2, [r3, #0]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40023c00 	.word	0x40023c00

080031f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0c5      	b.n	8003396 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a64      	ldr	r2, [pc, #400]	; (80033a0 <HAL_TIM_Base_Init+0x1a8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d045      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d040      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a60      	ldr	r2, [pc, #384]	; (80033a4 <HAL_TIM_Base_Init+0x1ac>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d03b      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a5e      	ldr	r2, [pc, #376]	; (80033a8 <HAL_TIM_Base_Init+0x1b0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d036      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a5d      	ldr	r2, [pc, #372]	; (80033ac <HAL_TIM_Base_Init+0x1b4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d031      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a5b      	ldr	r2, [pc, #364]	; (80033b0 <HAL_TIM_Base_Init+0x1b8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d02c      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a5a      	ldr	r2, [pc, #360]	; (80033b4 <HAL_TIM_Base_Init+0x1bc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d027      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a58      	ldr	r2, [pc, #352]	; (80033b8 <HAL_TIM_Base_Init+0x1c0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d022      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a57      	ldr	r2, [pc, #348]	; (80033bc <HAL_TIM_Base_Init+0x1c4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d01d      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a55      	ldr	r2, [pc, #340]	; (80033c0 <HAL_TIM_Base_Init+0x1c8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d018      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a54      	ldr	r2, [pc, #336]	; (80033c4 <HAL_TIM_Base_Init+0x1cc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_TIM_Base_Init+0x1d0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a51      	ldr	r2, [pc, #324]	; (80033cc <HAL_TIM_Base_Init+0x1d4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a4f      	ldr	r2, [pc, #316]	; (80033d0 <HAL_TIM_Base_Init+0x1d8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_TIM_Base_Init+0xa8>
 8003296:	f240 1113 	movw	r1, #275	; 0x113
 800329a:	484e      	ldr	r0, [pc, #312]	; (80033d4 <HAL_TIM_Base_Init+0x1dc>)
 800329c:	f7fe f88c 	bl	80013b8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d014      	beq.n	80032d2 <HAL_TIM_Base_Init+0xda>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d010      	beq.n	80032d2 <HAL_TIM_Base_Init+0xda>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d00c      	beq.n	80032d2 <HAL_TIM_Base_Init+0xda>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d008      	beq.n	80032d2 <HAL_TIM_Base_Init+0xda>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b60      	cmp	r3, #96	; 0x60
 80032c6:	d004      	beq.n	80032d2 <HAL_TIM_Base_Init+0xda>
 80032c8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80032cc:	4841      	ldr	r0, [pc, #260]	; (80033d4 <HAL_TIM_Base_Init+0x1dc>)
 80032ce:	f7fe f873 	bl	80013b8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00e      	beq.n	80032f8 <HAL_TIM_Base_Init+0x100>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e2:	d009      	beq.n	80032f8 <HAL_TIM_Base_Init+0x100>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d004      	beq.n	80032f8 <HAL_TIM_Base_Init+0x100>
 80032ee:	f240 1115 	movw	r1, #277	; 0x115
 80032f2:	4838      	ldr	r0, [pc, #224]	; (80033d4 <HAL_TIM_Base_Init+0x1dc>)
 80032f4:	f7fe f860 	bl	80013b8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_TIM_Base_Init+0x11a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b80      	cmp	r3, #128	; 0x80
 8003306:	d004      	beq.n	8003312 <HAL_TIM_Base_Init+0x11a>
 8003308:	f44f 718b 	mov.w	r1, #278	; 0x116
 800330c:	4831      	ldr	r0, [pc, #196]	; (80033d4 <HAL_TIM_Base_Init+0x1dc>)
 800330e:	f7fe f853 	bl	80013b8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f856 	bl	80033d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f000 fa54 	bl	80037ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40010000 	.word	0x40010000
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800
 80033ac:	40000c00 	.word	0x40000c00
 80033b0:	40001000 	.word	0x40001000
 80033b4:	40001400 	.word	0x40001400
 80033b8:	40010400 	.word	0x40010400
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40014400 	.word	0x40014400
 80033c4:	40014800 	.word	0x40014800
 80033c8:	40001800 	.word	0x40001800
 80033cc:	40001c00 	.word	0x40001c00
 80033d0:	40002000 	.word	0x40002000
 80033d4:	08009764 	.word	0x08009764

080033d8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a51      	ldr	r2, [pc, #324]	; (8003540 <HAL_TIM_Base_Start_IT+0x154>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d045      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d040      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a4d      	ldr	r2, [pc, #308]	; (8003544 <HAL_TIM_Base_Start_IT+0x158>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d03b      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a4c      	ldr	r2, [pc, #304]	; (8003548 <HAL_TIM_Base_Start_IT+0x15c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d036      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a4a      	ldr	r2, [pc, #296]	; (800354c <HAL_TIM_Base_Start_IT+0x160>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d031      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a49      	ldr	r2, [pc, #292]	; (8003550 <HAL_TIM_Base_Start_IT+0x164>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d02c      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a47      	ldr	r2, [pc, #284]	; (8003554 <HAL_TIM_Base_Start_IT+0x168>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d027      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a46      	ldr	r2, [pc, #280]	; (8003558 <HAL_TIM_Base_Start_IT+0x16c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a44      	ldr	r2, [pc, #272]	; (800355c <HAL_TIM_Base_Start_IT+0x170>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01d      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a43      	ldr	r2, [pc, #268]	; (8003560 <HAL_TIM_Base_Start_IT+0x174>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a41      	ldr	r2, [pc, #260]	; (8003564 <HAL_TIM_Base_Start_IT+0x178>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a40      	ldr	r2, [pc, #256]	; (8003568 <HAL_TIM_Base_Start_IT+0x17c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3e      	ldr	r2, [pc, #248]	; (800356c <HAL_TIM_Base_Start_IT+0x180>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a3d      	ldr	r2, [pc, #244]	; (8003570 <HAL_TIM_Base_Start_IT+0x184>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_TIM_Base_Start_IT+0x9e>
 8003480:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003484:	483b      	ldr	r0, [pc, #236]	; (8003574 <HAL_TIM_Base_Start_IT+0x188>)
 8003486:	f7fd ff97 	bl	80013b8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d001      	beq.n	800349a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e04e      	b.n	8003538 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a22      	ldr	r2, [pc, #136]	; (8003540 <HAL_TIM_Base_Start_IT+0x154>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0x116>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d01d      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0x116>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1e      	ldr	r2, [pc, #120]	; (8003544 <HAL_TIM_Base_Start_IT+0x158>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0x116>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_TIM_Base_Start_IT+0x15c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0x116>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1b      	ldr	r2, [pc, #108]	; (800354c <HAL_TIM_Base_Start_IT+0x160>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0x116>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <HAL_TIM_Base_Start_IT+0x16c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0x116>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1a      	ldr	r2, [pc, #104]	; (800355c <HAL_TIM_Base_Start_IT+0x170>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0x116>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_TIM_Base_Start_IT+0x17c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d111      	bne.n	8003526 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b06      	cmp	r3, #6
 8003512:	d010      	beq.n	8003536 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003524:	e007      	b.n	8003536 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40010000 	.word	0x40010000
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40001000 	.word	0x40001000
 8003554:	40001400 	.word	0x40001400
 8003558:	40010400 	.word	0x40010400
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800
 8003568:	40001800 	.word	0x40001800
 800356c:	40001c00 	.word	0x40001c00
 8003570:	40002000 	.word	0x40002000
 8003574:	08009764 	.word	0x08009764

08003578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0202 	mvn.w	r2, #2
 80035a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f8f8 	bl	80037b0 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8ea 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f8fb 	bl	80037c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0204 	mvn.w	r2, #4
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8ce 	bl	80037b0 <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8c0 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f8d1 	bl	80037c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b08      	cmp	r3, #8
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b08      	cmp	r3, #8
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0208 	mvn.w	r2, #8
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2204      	movs	r2, #4
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8a4 	bl	80037b0 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f896 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f8a7 	bl	80037c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b10      	cmp	r3, #16
 8003688:	d122      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b10      	cmp	r3, #16
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0210 	mvn.w	r2, #16
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2208      	movs	r2, #8
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f87a 	bl	80037b0 <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f86c 	bl	800379c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f87d 	bl	80037c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10e      	bne.n	80036fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d107      	bne.n	80036fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0201 	mvn.w	r2, #1
 80036f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f846 	bl	8003788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b80      	cmp	r3, #128	; 0x80
 8003708:	d10e      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d107      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f90c 	bl	8003940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d107      	bne.n	8003754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f842 	bl	80037d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b20      	cmp	r3, #32
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d107      	bne.n	8003780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0220 	mvn.w	r2, #32
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8d6 	bl	800392c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a40      	ldr	r2, [pc, #256]	; (8003900 <TIM_Base_SetConfig+0x114>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380a:	d00f      	beq.n	800382c <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3d      	ldr	r2, [pc, #244]	; (8003904 <TIM_Base_SetConfig+0x118>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00b      	beq.n	800382c <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a3c      	ldr	r2, [pc, #240]	; (8003908 <TIM_Base_SetConfig+0x11c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3b      	ldr	r2, [pc, #236]	; (800390c <TIM_Base_SetConfig+0x120>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a3a      	ldr	r2, [pc, #232]	; (8003910 <TIM_Base_SetConfig+0x124>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d108      	bne.n	800383e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <TIM_Base_SetConfig+0x114>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02b      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d027      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2c      	ldr	r2, [pc, #176]	; (8003904 <TIM_Base_SetConfig+0x118>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d023      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2b      	ldr	r2, [pc, #172]	; (8003908 <TIM_Base_SetConfig+0x11c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01f      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2a      	ldr	r2, [pc, #168]	; (800390c <TIM_Base_SetConfig+0x120>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01b      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a29      	ldr	r2, [pc, #164]	; (8003910 <TIM_Base_SetConfig+0x124>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d017      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a28      	ldr	r2, [pc, #160]	; (8003914 <TIM_Base_SetConfig+0x128>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a27      	ldr	r2, [pc, #156]	; (8003918 <TIM_Base_SetConfig+0x12c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00f      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a26      	ldr	r2, [pc, #152]	; (800391c <TIM_Base_SetConfig+0x130>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00b      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a25      	ldr	r2, [pc, #148]	; (8003920 <TIM_Base_SetConfig+0x134>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a24      	ldr	r2, [pc, #144]	; (8003924 <TIM_Base_SetConfig+0x138>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a23      	ldr	r2, [pc, #140]	; (8003928 <TIM_Base_SetConfig+0x13c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d108      	bne.n	80038b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <TIM_Base_SetConfig+0x114>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0xf8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a0c      	ldr	r2, [pc, #48]	; (8003910 <TIM_Base_SetConfig+0x124>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d103      	bne.n	80038ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	615a      	str	r2, [r3, #20]
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40010000 	.word	0x40010000
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40010400 	.word	0x40010400
 8003914:	40014000 	.word	0x40014000
 8003918:	40014400 	.word	0x40014400
 800391c:	40014800 	.word	0x40014800
 8003920:	40001800 	.word	0x40001800
 8003924:	40001c00 	.word	0x40001c00
 8003928:	40002000 	.word	0x40002000

0800392c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0be      	b.n	8003ae4 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d031      	beq.n	80039d2 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a5e      	ldr	r2, [pc, #376]	; (8003aec <HAL_UART_Init+0x198>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <HAL_UART_Init+0x4c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a5c      	ldr	r2, [pc, #368]	; (8003af0 <HAL_UART_Init+0x19c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_UART_Init+0x4c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a5b      	ldr	r2, [pc, #364]	; (8003af4 <HAL_UART_Init+0x1a0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_UART_Init+0x4c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a59      	ldr	r2, [pc, #356]	; (8003af8 <HAL_UART_Init+0x1a4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_UART_Init+0x4c>
 8003996:	f240 1173 	movw	r1, #371	; 0x173
 800399a:	4858      	ldr	r0, [pc, #352]	; (8003afc <HAL_UART_Init+0x1a8>)
 800399c:	f7fd fd0c 	bl	80013b8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d041      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b0:	d03c      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ba:	d037      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c4:	d032      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 80039c6:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80039ca:	484c      	ldr	r0, [pc, #304]	; (8003afc <HAL_UART_Init+0x1a8>)
 80039cc:	f7fd fcf4 	bl	80013b8 <assert_failed>
 80039d0:	e02c      	b.n	8003a2c <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a45      	ldr	r2, [pc, #276]	; (8003aec <HAL_UART_Init+0x198>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d027      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a43      	ldr	r2, [pc, #268]	; (8003af0 <HAL_UART_Init+0x19c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d022      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a42      	ldr	r2, [pc, #264]	; (8003af4 <HAL_UART_Init+0x1a0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d01d      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a42      	ldr	r2, [pc, #264]	; (8003b00 <HAL_UART_Init+0x1ac>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a41      	ldr	r2, [pc, #260]	; (8003b04 <HAL_UART_Init+0x1b0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a3b      	ldr	r2, [pc, #236]	; (8003af8 <HAL_UART_Init+0x1a4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a3d      	ldr	r2, [pc, #244]	; (8003b08 <HAL_UART_Init+0x1b4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a3b      	ldr	r2, [pc, #236]	; (8003b0c <HAL_UART_Init+0x1b8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_UART_Init+0xd8>
 8003a22:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003a26:	4835      	ldr	r0, [pc, #212]	; (8003afc <HAL_UART_Init+0x1a8>)
 8003a28:	f7fd fcc6 	bl	80013b8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <HAL_UART_Init+0xf4>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3c:	d004      	beq.n	8003a48 <HAL_UART_Init+0xf4>
 8003a3e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003a42:	482e      	ldr	r0, [pc, #184]	; (8003afc <HAL_UART_Init+0x1a8>)
 8003a44:	f7fd fcb8 	bl	80013b8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <HAL_UART_Init+0x110>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a58:	d004      	beq.n	8003a64 <HAL_UART_Init+0x110>
 8003a5a:	f240 117b 	movw	r1, #379	; 0x17b
 8003a5e:	4827      	ldr	r0, [pc, #156]	; (8003afc <HAL_UART_Init+0x1a8>)
 8003a60:	f7fd fcaa 	bl	80013b8 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f849 	bl	8003b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2224      	movs	r2, #36	; 0x24
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a94:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f844 	bl	8003b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aaa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40011000 	.word	0x40011000
 8003af0:	40004400 	.word	0x40004400
 8003af4:	40004800 	.word	0x40004800
 8003af8:	40011400 	.word	0x40011400
 8003afc:	0800979c 	.word	0x0800979c
 8003b00:	40004c00 	.word	0x40004c00
 8003b04:	40005000 	.word	0x40005000
 8003b08:	40007800 	.word	0x40007800
 8003b0c:	40007c00 	.word	0x40007c00

08003b10 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b28:	b0c0      	sub	sp, #256	; 0x100
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	4bcf      	ldr	r3, [pc, #828]	; (8003e74 <UART_SetConfig+0x350>)
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d904      	bls.n	8003b46 <UART_SetConfig+0x22>
 8003b3c:	f640 6161 	movw	r1, #3681	; 0xe61
 8003b40:	48cd      	ldr	r0, [pc, #820]	; (8003e78 <UART_SetConfig+0x354>)
 8003b42:	f7fd fc39 	bl	80013b8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_SetConfig+0x42>
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5a:	d004      	beq.n	8003b66 <UART_SetConfig+0x42>
 8003b5c:	f640 6162 	movw	r1, #3682	; 0xe62
 8003b60:	48c5      	ldr	r0, [pc, #788]	; (8003e78 <UART_SetConfig+0x354>)
 8003b62:	f7fd fc29 	bl	80013b8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d010      	beq.n	8003b92 <UART_SetConfig+0x6e>
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7a:	d00a      	beq.n	8003b92 <UART_SetConfig+0x6e>
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b86:	d004      	beq.n	8003b92 <UART_SetConfig+0x6e>
 8003b88:	f640 6163 	movw	r1, #3683	; 0xe63
 8003b8c:	48ba      	ldr	r0, [pc, #744]	; (8003e78 <UART_SetConfig+0x354>)
 8003b8e:	f7fd fc13 	bl	80013b8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <UART_SetConfig+0x88>
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d104      	bne.n	8003bb6 <UART_SetConfig+0x92>
 8003bac:	f640 6164 	movw	r1, #3684	; 0xe64
 8003bb0:	48b1      	ldr	r0, [pc, #708]	; (8003e78 <UART_SetConfig+0x354>)
 8003bb2:	f7fd fc01 	bl	80013b8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc6:	68d9      	ldr	r1, [r3, #12]
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	ea40 0301 	orr.w	r3, r0, r1
 8003bd2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c02:	f021 010c 	bic.w	r1, r1, #12
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c10:	430b      	orrs	r3, r1
 8003c12:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	6999      	ldr	r1, [r3, #24]
 8003c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	ea40 0301 	orr.w	r3, r0, r1
 8003c30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4b90      	ldr	r3, [pc, #576]	; (8003e7c <UART_SetConfig+0x358>)
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d005      	beq.n	8003c4a <UART_SetConfig+0x126>
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b8e      	ldr	r3, [pc, #568]	; (8003e80 <UART_SetConfig+0x35c>)
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d104      	bne.n	8003c54 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c4a:	f7ff fa8f 	bl	800316c <HAL_RCC_GetPCLK2Freq>
 8003c4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c52:	e003      	b.n	8003c5c <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c54:	f7ff fa76 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 8003c58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	f040 810f 	bne.w	8003e88 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c74:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c78:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	462b      	mov	r3, r5
 8003c80:	1891      	adds	r1, r2, r2
 8003c82:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c84:	415b      	adcs	r3, r3
 8003c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	eb12 0801 	adds.w	r8, r2, r1
 8003c92:	4629      	mov	r1, r5
 8003c94:	eb43 0901 	adc.w	r9, r3, r1
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ca4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ca8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cac:	4690      	mov	r8, r2
 8003cae:	4699      	mov	r9, r3
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	eb18 0303 	adds.w	r3, r8, r3
 8003cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cba:	462b      	mov	r3, r5
 8003cbc:	eb49 0303 	adc.w	r3, r9, r3
 8003cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cd0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cd4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cd8:	460b      	mov	r3, r1
 8003cda:	18db      	adds	r3, r3, r3
 8003cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8003cde:	4613      	mov	r3, r2
 8003ce0:	eb42 0303 	adc.w	r3, r2, r3
 8003ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cea:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cee:	f7fc fac9 	bl	8000284 <__aeabi_uldivmod>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4b63      	ldr	r3, [pc, #396]	; (8003e84 <UART_SetConfig+0x360>)
 8003cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	011c      	lsls	r4, r3, #4
 8003d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d0a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d0e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d12:	4642      	mov	r2, r8
 8003d14:	464b      	mov	r3, r9
 8003d16:	1891      	adds	r1, r2, r2
 8003d18:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d1a:	415b      	adcs	r3, r3
 8003d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d22:	4641      	mov	r1, r8
 8003d24:	eb12 0a01 	adds.w	sl, r2, r1
 8003d28:	4649      	mov	r1, r9
 8003d2a:	eb43 0b01 	adc.w	fp, r3, r1
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d42:	4692      	mov	sl, r2
 8003d44:	469b      	mov	fp, r3
 8003d46:	4643      	mov	r3, r8
 8003d48:	eb1a 0303 	adds.w	r3, sl, r3
 8003d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d50:	464b      	mov	r3, r9
 8003d52:	eb4b 0303 	adc.w	r3, fp, r3
 8003d56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d66:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	18db      	adds	r3, r3, r3
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
 8003d74:	4613      	mov	r3, r2
 8003d76:	eb42 0303 	adc.w	r3, r2, r3
 8003d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d80:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d84:	f7fc fa7e 	bl	8000284 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <UART_SetConfig+0x360>)
 8003d90:	fba3 2301 	umull	r2, r3, r3, r1
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	2264      	movs	r2, #100	; 0x64
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	1acb      	subs	r3, r1, r3
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003da4:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <UART_SetConfig+0x360>)
 8003da6:	fba3 2302 	umull	r2, r3, r3, r2
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003db2:	441c      	add	r4, r3
 8003db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dbe:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dc2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dc6:	4642      	mov	r2, r8
 8003dc8:	464b      	mov	r3, r9
 8003dca:	1891      	adds	r1, r2, r2
 8003dcc:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dce:	415b      	adcs	r3, r3
 8003dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	1851      	adds	r1, r2, r1
 8003dda:	6339      	str	r1, [r7, #48]	; 0x30
 8003ddc:	4649      	mov	r1, r9
 8003dde:	414b      	adcs	r3, r1
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dee:	4659      	mov	r1, fp
 8003df0:	00cb      	lsls	r3, r1, #3
 8003df2:	4651      	mov	r1, sl
 8003df4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df8:	4651      	mov	r1, sl
 8003dfa:	00ca      	lsls	r2, r1, #3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4603      	mov	r3, r0
 8003e02:	4642      	mov	r2, r8
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	eb42 0303 	adc.w	r3, r2, r3
 8003e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e22:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e26:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	18db      	adds	r3, r3, r3
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e30:	4613      	mov	r3, r2
 8003e32:	eb42 0303 	adc.w	r3, r2, r3
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e3c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e40:	f7fc fa20 	bl	8000284 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <UART_SetConfig+0x360>)
 8003e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2164      	movs	r1, #100	; 0x64
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	3332      	adds	r3, #50	; 0x32
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <UART_SetConfig+0x360>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	f003 0207 	and.w	r2, r3, #7
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4422      	add	r2, r4
 8003e70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e72:	e108      	b.n	8004086 <UART_SetConfig+0x562>
 8003e74:	00a037a0 	.word	0x00a037a0
 8003e78:	0800979c 	.word	0x0800979c
 8003e7c:	40011000 	.word	0x40011000
 8003e80:	40011400 	.word	0x40011400
 8003e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e9a:	4642      	mov	r2, r8
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	1891      	adds	r1, r2, r2
 8003ea0:	6239      	str	r1, [r7, #32]
 8003ea2:	415b      	adcs	r3, r3
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eaa:	4641      	mov	r1, r8
 8003eac:	1854      	adds	r4, r2, r1
 8003eae:	4649      	mov	r1, r9
 8003eb0:	eb43 0501 	adc.w	r5, r3, r1
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	00eb      	lsls	r3, r5, #3
 8003ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec2:	00e2      	lsls	r2, r4, #3
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	461d      	mov	r5, r3
 8003ec8:	4643      	mov	r3, r8
 8003eca:	18e3      	adds	r3, r4, r3
 8003ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ed0:	464b      	mov	r3, r9
 8003ed2:	eb45 0303 	adc.w	r3, r5, r3
 8003ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ee6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	008b      	lsls	r3, r1, #2
 8003efa:	4621      	mov	r1, r4
 8003efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f00:	4621      	mov	r1, r4
 8003f02:	008a      	lsls	r2, r1, #2
 8003f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f08:	f7fc f9bc 	bl	8000284 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4b60      	ldr	r3, [pc, #384]	; (8004094 <UART_SetConfig+0x570>)
 8003f12:	fba3 2302 	umull	r2, r3, r3, r2
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	011c      	lsls	r4, r3, #4
 8003f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	1891      	adds	r1, r2, r2
 8003f32:	61b9      	str	r1, [r7, #24]
 8003f34:	415b      	adcs	r3, r3
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	1851      	adds	r1, r2, r1
 8003f40:	6139      	str	r1, [r7, #16]
 8003f42:	4649      	mov	r1, r9
 8003f44:	414b      	adcs	r3, r1
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f54:	4659      	mov	r1, fp
 8003f56:	00cb      	lsls	r3, r1, #3
 8003f58:	4651      	mov	r1, sl
 8003f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5e:	4651      	mov	r1, sl
 8003f60:	00ca      	lsls	r2, r1, #3
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	4603      	mov	r3, r0
 8003f68:	4642      	mov	r2, r8
 8003f6a:	189b      	adds	r3, r3, r2
 8003f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f70:	464b      	mov	r3, r9
 8003f72:	460a      	mov	r2, r1
 8003f74:	eb42 0303 	adc.w	r3, r2, r3
 8003f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f94:	4649      	mov	r1, r9
 8003f96:	008b      	lsls	r3, r1, #2
 8003f98:	4641      	mov	r1, r8
 8003f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f9e:	4641      	mov	r1, r8
 8003fa0:	008a      	lsls	r2, r1, #2
 8003fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fa6:	f7fc f96d 	bl	8000284 <__aeabi_uldivmod>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4b39      	ldr	r3, [pc, #228]	; (8004094 <UART_SetConfig+0x570>)
 8003fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	2164      	movs	r1, #100	; 0x64
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	3332      	adds	r3, #50	; 0x32
 8003fc2:	4a34      	ldr	r2, [pc, #208]	; (8004094 <UART_SetConfig+0x570>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fce:	441c      	add	r4, r3
 8003fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	673b      	str	r3, [r7, #112]	; 0x70
 8003fd8:	677a      	str	r2, [r7, #116]	; 0x74
 8003fda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fde:	4642      	mov	r2, r8
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	1891      	adds	r1, r2, r2
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	415b      	adcs	r3, r3
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fee:	4641      	mov	r1, r8
 8003ff0:	1851      	adds	r1, r2, r1
 8003ff2:	6039      	str	r1, [r7, #0]
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	414b      	adcs	r3, r1
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004006:	4659      	mov	r1, fp
 8004008:	00cb      	lsls	r3, r1, #3
 800400a:	4651      	mov	r1, sl
 800400c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004010:	4651      	mov	r1, sl
 8004012:	00ca      	lsls	r2, r1, #3
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	4603      	mov	r3, r0
 800401a:	4642      	mov	r2, r8
 800401c:	189b      	adds	r3, r3, r2
 800401e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004020:	464b      	mov	r3, r9
 8004022:	460a      	mov	r2, r1
 8004024:	eb42 0303 	adc.w	r3, r2, r3
 8004028:	66fb      	str	r3, [r7, #108]	; 0x6c
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	663b      	str	r3, [r7, #96]	; 0x60
 8004034:	667a      	str	r2, [r7, #100]	; 0x64
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004042:	4649      	mov	r1, r9
 8004044:	008b      	lsls	r3, r1, #2
 8004046:	4641      	mov	r1, r8
 8004048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800404c:	4641      	mov	r1, r8
 800404e:	008a      	lsls	r2, r1, #2
 8004050:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004054:	f7fc f916 	bl	8000284 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <UART_SetConfig+0x570>)
 800405e:	fba3 1302 	umull	r1, r3, r3, r2
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	2164      	movs	r1, #100	; 0x64
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	3332      	adds	r3, #50	; 0x32
 8004070:	4a08      	ldr	r2, [pc, #32]	; (8004094 <UART_SetConfig+0x570>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	f003 020f 	and.w	r2, r3, #15
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4422      	add	r2, r4
 8004084:	609a      	str	r2, [r3, #8]
}
 8004086:	bf00      	nop
 8004088:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800408c:	46bd      	mov	sp, r7
 800408e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004092:	bf00      	nop
 8004094:	51eb851f 	.word	0x51eb851f

08004098 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f103 0208 	add.w	r2, r3, #8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f04f 32ff 	mov.w	r2, #4294967295
 80040b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f103 0208 	add.w	r2, r3, #8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f103 0208 	add.w	r2, r3, #8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	601a      	str	r2, [r3, #0]
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d103      	bne.n	800415a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	e00c      	b.n	8004174 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3308      	adds	r3, #8
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e002      	b.n	8004168 <vListInsert+0x2e>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	429a      	cmp	r2, r3
 8004172:	d2f6      	bcs.n	8004162 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	601a      	str	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6892      	ldr	r2, [r2, #8]
 80041c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6852      	ldr	r2, [r2, #4]
 80041cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d103      	bne.n	80041e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	1e5a      	subs	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800422a:	f002 feed 	bl	8007008 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	441a      	add	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	3b01      	subs	r3, #1
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	441a      	add	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	22ff      	movs	r2, #255	; 0xff
 800426e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	22ff      	movs	r2, #255	; 0xff
 8004276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d114      	bne.n	80042aa <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01a      	beq.n	80042be <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3310      	adds	r3, #16
 800428c:	4618      	mov	r0, r3
 800428e:	f001 fc8f 	bl	8005bb0 <xTaskRemoveFromEventList>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d012      	beq.n	80042be <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <xQueueGenericReset+0xcc>)
 800429a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	e009      	b.n	80042be <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3310      	adds	r3, #16
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fef2 	bl	8004098 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3324      	adds	r3, #36	; 0x24
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff feed 	bl	8004098 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80042be:	f002 fed3 	bl	8007068 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80042c2:	2301      	movs	r3, #1
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	e000ed04 	.word	0xe000ed04

080042d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08c      	sub	sp, #48	; 0x30
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	4613      	mov	r3, r2
 80042dc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <xQueueGenericCreate+0x2a>
        __asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	61bb      	str	r3, [r7, #24]
    }
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d006      	beq.n	8004318 <xQueueGenericCreate+0x48>
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	429a      	cmp	r2, r3
 8004316:	d101      	bne.n	800431c <xQueueGenericCreate+0x4c>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <xQueueGenericCreate+0x4e>
 800431c:	2300      	movs	r3, #0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <xQueueGenericCreate+0x68>
        __asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	617b      	str	r3, [r7, #20]
    }
 8004334:	bf00      	nop
 8004336:	e7fe      	b.n	8004336 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800433e:	d90a      	bls.n	8004356 <xQueueGenericCreate+0x86>
        __asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	613b      	str	r3, [r7, #16]
    }
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	3350      	adds	r3, #80	; 0x50
 800435a:	4618      	mov	r0, r3
 800435c:	f002 ff7e 	bl	800725c <pvPortMalloc>
 8004360:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00d      	beq.n	8004384 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	3350      	adds	r3, #80	; 0x50
 8004370:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004372:	79fa      	ldrb	r2, [r7, #7]
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f805 	bl	800438e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004384:	6a3b      	ldr	r3, [r7, #32]
    }
 8004386:	4618      	mov	r0, r3
 8004388:	3728      	adds	r7, #40	; 0x28
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d103      	bne.n	80043aa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e002      	b.n	80043b0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043bc:	2101      	movs	r1, #1
 80043be:	69b8      	ldr	r0, [r7, #24]
 80043c0:	f7ff ff1e 	bl	8004200 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	68f9      	ldr	r1, [r7, #12]
 80043d2:	2073      	movs	r0, #115	; 0x73
 80043d4:	f003 ff62 	bl	800829c <SEGGER_SYSVIEW_RecordU32x3>
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b090      	sub	sp, #64	; 0x40
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043ee:	2300      	movs	r3, #0
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xQueueGenericSend+0x32>
        __asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <xQueueGenericSend+0x40>
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <xQueueGenericSend+0x44>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <xQueueGenericSend+0x46>
 8004424:	2300      	movs	r3, #0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <xQueueGenericSend+0x60>
        __asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d103      	bne.n	800444e <xQueueGenericSend+0x6e>
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <xQueueGenericSend+0x72>
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <xQueueGenericSend+0x74>
 8004452:	2300      	movs	r3, #0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <xQueueGenericSend+0x8e>
        __asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	623b      	str	r3, [r7, #32]
    }
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800446e:	f001 fd4f 	bl	8005f10 <xTaskGetSchedulerState>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <xQueueGenericSend+0x9e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <xQueueGenericSend+0xa2>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <xQueueGenericSend+0xa4>
 8004482:	2300      	movs	r3, #0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <xQueueGenericSend+0xbe>
        __asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	61fb      	str	r3, [r7, #28]
    }
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800449e:	f002 fdb3 	bl	8007008 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <xQueueGenericSend+0xd4>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d136      	bne.n	8004522 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	4618      	mov	r0, r3
 80044b8:	f004 fd2a 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	460b      	mov	r3, r1
 80044c6:	4601      	mov	r1, r0
 80044c8:	205a      	movs	r0, #90	; 0x5a
 80044ca:	f003 ff5d 	bl	8008388 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044d4:	f000 fa78 	bl	80049c8 <prvCopyDataToQueue>
 80044d8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d010      	beq.n	8004504 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	3324      	adds	r3, #36	; 0x24
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 fb62 	bl	8005bb0 <xTaskRemoveFromEventList>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d013      	beq.n	800451a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80044f2:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <xQueueGenericSend+0x248>)
 80044f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	e00a      	b.n	800451a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800450a:	4b47      	ldr	r3, [pc, #284]	; (8004628 <xQueueGenericSend+0x248>)
 800450c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800451a:	f002 fda5 	bl	8007068 <vPortExitCritical>
                return pdPASS;
 800451e:	2301      	movs	r3, #1
 8004520:	e07d      	b.n	800461e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d110      	bne.n	800454a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004528:	f002 fd9e 	bl	8007068 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	4618      	mov	r0, r3
 8004530:	f004 fcee 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	460b      	mov	r3, r1
 800453e:	4601      	mov	r1, r0
 8004540:	205a      	movs	r0, #90	; 0x5a
 8004542:	f003 ff21 	bl	8008388 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8004546:	2300      	movs	r3, #0
 8004548:	e069      	b.n	800461e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800454a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004550:	f107 0314 	add.w	r3, r7, #20
 8004554:	4618      	mov	r0, r3
 8004556:	f001 fb91 	bl	8005c7c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800455a:	2301      	movs	r3, #1
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800455e:	f002 fd83 	bl	8007068 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004562:	f001 f8dd 	bl	8005720 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004566:	f002 fd4f 	bl	8007008 <vPortEnterCritical>
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004570:	b25b      	sxtb	r3, r3
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d103      	bne.n	8004580 <xQueueGenericSend+0x1a0>
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004586:	b25b      	sxtb	r3, r3
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d103      	bne.n	8004596 <xQueueGenericSend+0x1b6>
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004596:	f002 fd67 	bl	8007068 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800459a:	1d3a      	adds	r2, r7, #4
 800459c:	f107 0314 	add.w	r3, r7, #20
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 fb80 	bl	8005ca8 <xTaskCheckForTimeOut>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d124      	bne.n	80045f8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045b0:	f000 fb02 	bl	8004bb8 <prvIsQueueFull>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d018      	beq.n	80045ec <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	3310      	adds	r3, #16
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 faa2 	bl	8005b0c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80045c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ca:	f000 fa8d 	bl	8004ae8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80045ce:	f001 f8b5 	bl	800573c <xTaskResumeAll>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f47f af62 	bne.w	800449e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <xQueueGenericSend+0x248>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	e758      	b.n	800449e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80045ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ee:	f000 fa7b 	bl	8004ae8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80045f2:	f001 f8a3 	bl	800573c <xTaskResumeAll>
 80045f6:	e752      	b.n	800449e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80045f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045fa:	f000 fa75 	bl	8004ae8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045fe:	f001 f89d 	bl	800573c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	4618      	mov	r0, r3
 8004606:	f004 fc83 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	460b      	mov	r3, r1
 8004614:	4601      	mov	r1, r0
 8004616:	205a      	movs	r0, #90	; 0x5a
 8004618:	f003 feb6 	bl	8008388 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800461c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800461e:	4618      	mov	r0, r3
 8004620:	3738      	adds	r7, #56	; 0x38
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b090      	sub	sp, #64	; 0x40
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d103      	bne.n	8004668 <xQueueGenericSendFromISR+0x3c>
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <xQueueGenericSendFromISR+0x40>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <xQueueGenericSendFromISR+0x42>
 800466c:	2300      	movs	r3, #0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d103      	bne.n	8004696 <xQueueGenericSendFromISR+0x6a>
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <xQueueGenericSendFromISR+0x6e>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <xQueueGenericSendFromISR+0x70>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	623b      	str	r3, [r7, #32]
    }
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046b6:	f002 fd91 	bl	80071dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80046ba:	f3ef 8211 	mrs	r2, BASEPRI
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	61fa      	str	r2, [r7, #28]
 80046d0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80046d2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	429a      	cmp	r2, r3
 80046e0:	d302      	bcc.n	80046e8 <xQueueGenericSendFromISR+0xbc>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d148      	bne.n	800477a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	4618      	mov	r0, r3
 80046fc:	f004 fc08 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 8004700:	4601      	mov	r1, r0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	461a      	mov	r2, r3
 8004706:	2060      	movs	r0, #96	; 0x60
 8004708:	f003 fd6e 	bl	80081e8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004712:	f000 f959 	bl	80049c8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004716:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d112      	bne.n	8004746 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d025      	beq.n	8004774 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	3324      	adds	r3, #36	; 0x24
 800472c:	4618      	mov	r0, r3
 800472e:	f001 fa3f 	bl	8005bb0 <xTaskRemoveFromEventList>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01d      	beq.n	8004774 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01a      	beq.n	8004774 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e016      	b.n	8004774 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004746:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800474a:	2b7f      	cmp	r3, #127	; 0x7f
 800474c:	d10a      	bne.n	8004764 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	617b      	str	r3, [r7, #20]
    }
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004768:	3301      	adds	r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	b25a      	sxtb	r2, r3
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004774:	2301      	movs	r3, #1
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004778:	e00b      	b.n	8004792 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	4618      	mov	r0, r3
 800477e:	f004 fbc7 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 8004782:	4601      	mov	r1, r0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	461a      	mov	r2, r3
 8004788:	2060      	movs	r0, #96	; 0x60
 800478a:	f003 fd2d 	bl	80081e8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800478e:	2300      	movs	r3, #0
 8004790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004794:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800479c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800479e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3740      	adds	r7, #64	; 0x40
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b08f      	sub	sp, #60	; 0x3c
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <xQueueReceive+0x30>
        __asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	623b      	str	r3, [r7, #32]
    }
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <xQueueReceive+0x3e>
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <xQueueReceive+0x42>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <xQueueReceive+0x44>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <xQueueReceive+0x5e>
        __asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	61fb      	str	r3, [r7, #28]
    }
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004806:	f001 fb83 	bl	8005f10 <xTaskGetSchedulerState>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <xQueueReceive+0x6e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <xQueueReceive+0x72>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <xQueueReceive+0x74>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xQueueReceive+0x8e>
        __asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	61bb      	str	r3, [r7, #24]
    }
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004836:	f002 fbe7 	bl	8007008 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02f      	beq.n	80048a6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800484a:	f000 f927 	bl	8004a9c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	4618      	mov	r0, r3
 8004852:	f004 fb5d 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 8004856:	4604      	mov	r4, r0
 8004858:	2000      	movs	r0, #0
 800485a:	f004 fb59 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 800485e:	4602      	mov	r2, r0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2101      	movs	r1, #1
 8004864:	9100      	str	r1, [sp, #0]
 8004866:	4621      	mov	r1, r4
 8004868:	205c      	movs	r0, #92	; 0x5c
 800486a:	f003 fd8d 	bl	8008388 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	1e5a      	subs	r2, r3, #1
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00f      	beq.n	800489e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	3310      	adds	r3, #16
 8004882:	4618      	mov	r0, r3
 8004884:	f001 f994 	bl	8005bb0 <xTaskRemoveFromEventList>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800488e:	4b4d      	ldr	r3, [pc, #308]	; (80049c4 <xQueueReceive+0x21c>)
 8004890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800489e:	f002 fbe3 	bl	8007068 <vPortExitCritical>
                return pdPASS;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e08a      	b.n	80049bc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d113      	bne.n	80048d4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80048ac:	f002 fbdc 	bl	8007068 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	4618      	mov	r0, r3
 80048b4:	f004 fb2c 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 80048b8:	4604      	mov	r4, r0
 80048ba:	2000      	movs	r0, #0
 80048bc:	f004 fb28 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 80048c0:	4602      	mov	r2, r0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2101      	movs	r1, #1
 80048c6:	9100      	str	r1, [sp, #0]
 80048c8:	4621      	mov	r1, r4
 80048ca:	205c      	movs	r0, #92	; 0x5c
 80048cc:	f003 fd5c 	bl	8008388 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e073      	b.n	80049bc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80048da:	f107 0310 	add.w	r3, r7, #16
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 f9cc 	bl	8005c7c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80048e8:	f002 fbbe 	bl	8007068 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80048ec:	f000 ff18 	bl	8005720 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80048f0:	f002 fb8a 	bl	8007008 <vPortEnterCritical>
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048fa:	b25b      	sxtb	r3, r3
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d103      	bne.n	800490a <xQueueReceive+0x162>
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004910:	b25b      	sxtb	r3, r3
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d103      	bne.n	8004920 <xQueueReceive+0x178>
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004920:	f002 fba2 	bl	8007068 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004924:	1d3a      	adds	r2, r7, #4
 8004926:	f107 0310 	add.w	r3, r7, #16
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f001 f9bb 	bl	8005ca8 <xTaskCheckForTimeOut>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d124      	bne.n	8004982 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800493a:	f000 f927 	bl	8004b8c <prvIsQueueEmpty>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d018      	beq.n	8004976 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	3324      	adds	r3, #36	; 0x24
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f001 f8dd 	bl	8005b0c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004954:	f000 f8c8 	bl	8004ae8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004958:	f000 fef0 	bl	800573c <xTaskResumeAll>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	f47f af69 	bne.w	8004836 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004964:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <xQueueReceive+0x21c>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	e75f      	b.n	8004836 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004978:	f000 f8b6 	bl	8004ae8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800497c:	f000 fede 	bl	800573c <xTaskResumeAll>
 8004980:	e759      	b.n	8004836 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004984:	f000 f8b0 	bl	8004ae8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004988:	f000 fed8 	bl	800573c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800498c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800498e:	f000 f8fd 	bl	8004b8c <prvIsQueueEmpty>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	f43f af4e 	beq.w	8004836 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	4618      	mov	r0, r3
 800499e:	f004 fab7 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 80049a2:	4604      	mov	r4, r0
 80049a4:	2000      	movs	r0, #0
 80049a6:	f004 fab3 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 80049aa:	4602      	mov	r2, r0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2101      	movs	r1, #1
 80049b0:	9100      	str	r1, [sp, #0]
 80049b2:	4621      	mov	r1, r4
 80049b4:	205c      	movs	r0, #92	; 0x5c
 80049b6:	f003 fce7 	bl	8008388 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80049ba:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3734      	adds	r7, #52	; 0x34
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd90      	pop	{r4, r7, pc}
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d14d      	bne.n	8004a8a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 faaa 	bl	8005f4c <xTaskPriorityDisinherit>
 80049f8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	e043      	b.n	8004a8a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d119      	bne.n	8004a3c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6858      	ldr	r0, [r3, #4]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	461a      	mov	r2, r3
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	f004 fda2 	bl	800955c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	441a      	add	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d32b      	bcc.n	8004a8a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	e026      	b.n	8004a8a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68d8      	ldr	r0, [r3, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	461a      	mov	r2, r3
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	f004 fd88 	bl	800955c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	425b      	negs	r3, r3
 8004a56:	441a      	add	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d207      	bcs.n	8004a78 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	425b      	negs	r3, r3
 8004a72:	441a      	add	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d105      	bne.n	8004a8a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004a92:	697b      	ldr	r3, [r7, #20]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d018      	beq.n	8004ae0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	441a      	add	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d303      	bcc.n	8004ad0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68d9      	ldr	r1, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6838      	ldr	r0, [r7, #0]
 8004adc:	f004 fd3e 	bl	800955c <memcpy>
    }
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004af0:	f002 fa8a 	bl	8007008 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004afa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004afc:	e011      	b.n	8004b22 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d012      	beq.n	8004b2c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3324      	adds	r3, #36	; 0x24
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f001 f850 	bl	8005bb0 <xTaskRemoveFromEventList>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004b16:	f001 f92d 	bl	8005d74 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	dce9      	bgt.n	8004afe <prvUnlockQueue+0x16>
 8004b2a:	e000      	b.n	8004b2e <prvUnlockQueue+0x46>
                        break;
 8004b2c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	22ff      	movs	r2, #255	; 0xff
 8004b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004b36:	f002 fa97 	bl	8007068 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004b3a:	f002 fa65 	bl	8007008 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b44:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b46:	e011      	b.n	8004b6c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d012      	beq.n	8004b76 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3310      	adds	r3, #16
 8004b54:	4618      	mov	r0, r3
 8004b56:	f001 f82b 	bl	8005bb0 <xTaskRemoveFromEventList>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004b60:	f001 f908 	bl	8005d74 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004b64:	7bbb      	ldrb	r3, [r7, #14]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	dce9      	bgt.n	8004b48 <prvUnlockQueue+0x60>
 8004b74:	e000      	b.n	8004b78 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004b76:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	22ff      	movs	r2, #255	; 0xff
 8004b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004b80:	f002 fa72 	bl	8007068 <vPortExitCritical>
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b94:	f002 fa38 	bl	8007008 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e001      	b.n	8004baa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004baa:	f002 fa5d 	bl	8007068 <vPortExitCritical>

    return xReturn;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004bc0:	f002 fa22 	bl	8007008 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d102      	bne.n	8004bd6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e001      	b.n	8004bda <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004bda:	f002 fa45 	bl	8007068 <vPortExitCritical>

    return xReturn;
 8004bde:	68fb      	ldr	r3, [r7, #12]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	e01e      	b.n	8004c36 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004bf8:	4a13      	ldr	r2, [pc, #76]	; (8004c48 <vQueueAddToRegistry+0x60>)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d115      	bne.n	8004c30 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c04:	4910      	ldr	r1, [pc, #64]	; (8004c48 <vQueueAddToRegistry+0x60>)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004c0e:	4a0e      	ldr	r2, [pc, #56]	; (8004c48 <vQueueAddToRegistry+0x60>)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4413      	add	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f004 f977 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 8004c22:	4601      	mov	r1, r0
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	2071      	movs	r0, #113	; 0x71
 8004c2a:	f003 fadd 	bl	80081e8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8004c2e:	e006      	b.n	8004c3e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b07      	cmp	r3, #7
 8004c3a:	d9dd      	bls.n	8004bf8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000160 	.word	0x20000160

08004c4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004c5c:	f002 f9d4 	bl	8007008 <vPortEnterCritical>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c66:	b25b      	sxtb	r3, r3
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d103      	bne.n	8004c76 <vQueueWaitForMessageRestricted+0x2a>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c7c:	b25b      	sxtb	r3, r3
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d103      	bne.n	8004c8c <vQueueWaitForMessageRestricted+0x40>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c8c:	f002 f9ec 	bl	8007068 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3324      	adds	r3, #36	; 0x24
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 ff57 	bl	8005b54 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004ca6:	6978      	ldr	r0, [r7, #20]
 8004ca8:	f7ff ff1e 	bl	8004ae8 <prvUnlockQueue>
    }
 8004cac:	bf00      	nop
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <xStreamBufferGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xIsMessageBuffer )
    {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08c      	sub	sp, #48	; 0x30
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xIsMessageBuffer == pdTRUE )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d110      	bne.n	8004ce8 <xStreamBufferGenericCreate+0x34>
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d81b      	bhi.n	8004d0a <xStreamBufferGenericCreate+0x56>
        __asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	61fb      	str	r3, [r7, #28]
    }
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <xStreamBufferGenericCreate+0x32>
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > 0 );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <xStreamBufferGenericCreate+0x56>
        __asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	61bb      	str	r3, [r7, #24]
    }
 8004d06:	bf00      	nop
 8004d08:	e7fe      	b.n	8004d08 <xStreamBufferGenericCreate+0x54>
        }

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d90a      	bls.n	8004d28 <xStreamBufferGenericCreate+0x74>
        __asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	617b      	str	r3, [r7, #20]
    }
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <xStreamBufferGenericCreate+0x72>

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <xStreamBufferGenericCreate+0x7e>
        {
            xTriggerLevelBytes = ( size_t ) 1;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f113 0f26 	cmn.w	r3, #38	; 0x26
 8004d38:	d809      	bhi.n	8004d4e <xStreamBufferGenericCreate+0x9a>
        {
            xBufferSizeBytes++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3324      	adds	r3, #36	; 0x24
 8004d44:	4618      	mov	r0, r3
 8004d46:	f002 fa89 	bl	800725c <pvPortMalloc>
 8004d4a:	6278      	str	r0, [r7, #36]	; 0x24
 8004d4c:	e001      	b.n	8004d52 <xStreamBufferGenericCreate+0x9e>
        }
        else
        {
            pucAllocatedMemory = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
        }
        

        if( pucAllocatedMemory != NULL )
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d011      	beq.n	8004d7c <xStreamBufferGenericCreate+0xc8>
        {
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d6a:	f000 fae0 	bl	800532e <prvInitialiseNewStreamBuffer>
                                          pucAllocatedMemory + sizeof( StreamBuffer_t ), /* Storage area follows. */ /*lint !e9016 Indexing past structure valid for uint8_t pointer, also storage area has no alignment requirement. */
                                          xBufferSizeBytes,
                                          xTriggerLevelBytes,
                                          ucFlags );

            traceSTREAM_BUFFER_CREATE( ( ( StreamBuffer_t * ) pucAllocatedMemory ), xIsMessageBuffer );
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d72:	4619      	mov	r1, r3
 8004d74:	2089      	movs	r0, #137	; 0x89
 8004d76:	f003 fa37 	bl	80081e8 <SEGGER_SYSVIEW_RecordU32x2>
 8004d7a:	e005      	b.n	8004d88 <xStreamBufferGenericCreate+0xd4>
        }
        else
        {
            traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	4619      	mov	r1, r3
 8004d82:	2089      	movs	r0, #137	; 0x89
 8004d84:	f003 fa30 	bl	80081e8 <SEGGER_SYSVIEW_RecordU32x2>
        }

        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3728      	adds	r7, #40	; 0x28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <xStreamBufferSpacesAvailable>:
    return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8004d92:	b480      	push	{r7}
 8004d94:	b087      	sub	sp, #28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	613b      	str	r3, [r7, #16]
    size_t xSpace;

    configASSERT( pxStreamBuffer );
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xStreamBufferSpacesAvailable+0x28>
        __asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60fb      	str	r3, [r7, #12]
    }
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xStreamBufferSpacesAvailable+0x26>

    xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
    xSpace -= pxStreamBuffer->xHead;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	617b      	str	r3, [r7, #20]
    xSpace -= ( size_t ) 1;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]

    if( xSpace >= pxStreamBuffer->xLength )
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d304      	bcc.n	8004dea <xStreamBufferSpacesAvailable+0x58>
    {
        xSpace -= pxStreamBuffer->xLength;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	617b      	str	r3, [r7, #20]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xSpace;
 8004dea:	697b      	ldr	r3, [r7, #20]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b090      	sub	sp, #64	; 0x40
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	633b      	str	r3, [r7, #48]	; 0x30
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvTxData );
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xStreamBufferSendFromISR+0x32>
        __asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	623b      	str	r3, [r7, #32]
    }
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xStreamBufferSendFromISR+0x30>
    configASSERT( pxStreamBuffer );
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <xStreamBufferSendFromISR+0x4e>
        __asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	61fb      	str	r3, [r7, #28]
    }
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xStreamBufferSendFromISR+0x4c>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	7f1b      	ldrb	r3, [r3, #28]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <xStreamBufferSendFromISR+0x60>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	3304      	adds	r3, #4
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e5a:	f7ff ff9a 	bl	8004d92 <xStreamBufferSpacesAvailable>
 8004e5e:	62f8      	str	r0, [r7, #44]	; 0x2c
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e6c:	f000 f83d 	bl	8004eea <prvWriteMessageToBuffer>
 8004e70:	62b8      	str	r0, [r7, #40]	; 0x28

    if( xReturn > ( size_t ) 0 )
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d02d      	beq.n	8004ed4 <xStreamBufferSendFromISR+0xdc>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8004e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e7a:	f000 fa38 	bl	80052ee <prvBytesInBuffer>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d325      	bcc.n	8004ed4 <xStreamBufferSendFromISR+0xdc>
        __asm volatile
 8004e88:	f3ef 8211 	mrs	r2, BASEPRI
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	61ba      	str	r2, [r7, #24]
 8004e9e:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00d      	beq.n	8004ec8 <xStreamBufferSendFromISR+0xd0>
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	6918      	ldr	r0, [r3, #16]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	f001 fa3f 	bl	8006340 <xTaskGenericNotifyFromISR>
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	611a      	str	r2, [r3, #16]
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	613b      	str	r3, [r7, #16]
        __asm volatile
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f383 8811 	msr	BASEPRI, r3
    }
 8004ed2:	bf00      	nop
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed8:	4619      	mov	r1, r3
 8004eda:	208d      	movs	r0, #141	; 0x8d
 8004edc:	f003 f984 	bl	80081e8 <SEGGER_SYSVIEW_RecordU32x2>

    return xReturn;
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3738      	adds	r7, #56	; 0x38
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b086      	sub	sp, #24
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	603b      	str	r3, [r7, #0]
    BaseType_t xShouldWrite;
    size_t xReturn;

    if( xSpace == ( size_t ) 0 )
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d102      	bne.n	8004f04 <prvWriteMessageToBuffer+0x1a>
    {
        /* Doesn't matter if this is a stream buffer or a message buffer, there
         * is no space to write. */
        xShouldWrite = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e01d      	b.n	8004f40 <prvWriteMessageToBuffer+0x56>
    }
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	7f1b      	ldrb	r3, [r3, #28]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d108      	bne.n	8004f22 <prvWriteMessageToBuffer+0x38>
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Write as many bytes as
         * possible. */
        xShouldWrite = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	bf28      	it	cs
 8004f1c:	4613      	movcs	r3, r2
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	e00e      	b.n	8004f40 <prvWriteMessageToBuffer+0x56>
    }
    else if( xSpace >= xRequiredSpace )
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d308      	bcc.n	8004f3c <prvWriteMessageToBuffer+0x52>
    {
        /* This is a message buffer, as opposed to a stream buffer, and there
         * is enough space to write both the message length and the message itself
         * into the buffer.  Start by writing the length of the data, the data
         * itself will be written later in this function. */
        xShouldWrite = pdTRUE;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
        ( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004f2e:	1d3b      	adds	r3, r7, #4
 8004f30:	2204      	movs	r2, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f8ee 	bl	8005116 <prvWriteBytesToBuffer>
 8004f3a:	e001      	b.n	8004f40 <prvWriteMessageToBuffer+0x56>
    }
    else
    {
        /* There is space available, but not enough space. */
        xShouldWrite = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
    }

    if( xShouldWrite != pdFALSE )
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <prvWriteMessageToBuffer+0x6c>
    {
        /* Writes the data itself. */
        xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f8e2 	bl	8005116 <prvWriteBytesToBuffer>
 8004f52:	6138      	str	r0, [r7, #16]
 8004f54:	e001      	b.n	8004f5a <prvWriteMessageToBuffer+0x70>
    }
    else
    {
        xReturn = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
    }

    return xReturn;
 8004f5a:	693b      	ldr	r3, [r7, #16]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08e      	sub	sp, #56	; 0x38
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	623b      	str	r3, [r7, #32]
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8004f76:	2300      	movs	r3, #0
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c

    configASSERT( pvRxData );
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <xStreamBufferReceive+0x32>
        __asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	61fb      	str	r3, [r7, #28]
    }
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xStreamBufferReceive+0x30>
    configASSERT( pxStreamBuffer );
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <xStreamBufferReceive+0x4e>
        __asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	61bb      	str	r3, [r7, #24]
    }
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xStreamBufferReceive+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	7f1b      	ldrb	r3, [r3, #28]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <xStreamBufferReceive+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc2:	e001      	b.n	8004fc8 <xStreamBufferReceive+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d037      	beq.n	800503e <xStreamBufferReceive+0xda>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 8004fce:	f002 f81b 	bl	8007008 <vPortEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004fd2:	6a38      	ldr	r0, [r7, #32]
 8004fd4:	f000 f98b 	bl	80052ee <prvBytesInBuffer>
 8004fd8:	62b8      	str	r0, [r7, #40]	; 0x28
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d817      	bhi.n	8005012 <xStreamBufferReceive+0xae>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f001 fac1 	bl	800656c <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <xStreamBufferReceive+0xa4>
        __asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	617b      	str	r3, [r7, #20]
    }
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <xStreamBufferReceive+0xa2>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8005008:	f000 ff72 	bl	8005ef0 <xTaskGetCurrentTaskHandle>
 800500c:	4602      	mov	r2, r0
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	611a      	str	r2, [r3, #16]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005012:	f002 f829 	bl	8007068 <vPortExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 8005016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	429a      	cmp	r2, r3
 800501c:	d813      	bhi.n	8005046 <xStreamBufferReceive+0xe2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	2200      	movs	r2, #0
 8005026:	2100      	movs	r1, #0
 8005028:	2000      	movs	r0, #0
 800502a:	f001 f80f 	bl	800604c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	2200      	movs	r2, #0
 8005032:	611a      	str	r2, [r3, #16]

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8005034:	6a38      	ldr	r0, [r7, #32]
 8005036:	f000 f95a 	bl	80052ee <prvBytesInBuffer>
 800503a:	62b8      	str	r0, [r7, #40]	; 0x28
 800503c:	e003      	b.n	8005046 <xStreamBufferReceive+0xe2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800503e:	6a38      	ldr	r0, [r7, #32]
 8005040:	f000 f955 	bl	80052ee <prvBytesInBuffer>
 8005044:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8005046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	429a      	cmp	r2, r3
 800504c:	d926      	bls.n	800509c <xStreamBufferReceive+0x138>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	6a38      	ldr	r0, [r7, #32]
 800505a:	f000 f82a 	bl	80050b2 <prvReadMessageFromBuffer>
 800505e:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d020      	beq.n	80050a8 <xStreamBufferReceive+0x144>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506a:	4619      	mov	r1, r3
 800506c:	208e      	movs	r0, #142	; 0x8e
 800506e:	f003 f8bb 	bl	80081e8 <SEGGER_SYSVIEW_RecordU32x2>
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 8005072:	f000 fb55 	bl	8005720 <vTaskSuspendAll>
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00b      	beq.n	8005096 <xStreamBufferReceive+0x132>
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	6958      	ldr	r0, [r3, #20]
 8005082:	2300      	movs	r3, #0
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2300      	movs	r3, #0
 8005088:	2200      	movs	r2, #0
 800508a:	2100      	movs	r1, #0
 800508c:	f001 f866 	bl	800615c <xTaskGenericNotify>
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	2200      	movs	r2, #0
 8005094:	615a      	str	r2, [r3, #20]
 8005096:	f000 fb51 	bl	800573c <xTaskResumeAll>
 800509a:	e005      	b.n	80050a8 <xStreamBufferReceive+0x144>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	4619      	mov	r1, r3
 80050a2:	208e      	movs	r0, #142	; 0x8e
 80050a4:	f003 f8a0 	bl	80081e8 <SEGGER_SYSVIEW_RecordU32x2>
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3730      	adds	r7, #48	; 0x30
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable,
                                        size_t xBytesToStoreMessageLength )
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b088      	sub	sp, #32
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
 80050be:	603b      	str	r3, [r7, #0]
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d019      	beq.n	80050fa <prvReadMessageFromBuffer+0x48>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	61bb      	str	r3, [r7, #24]
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80050cc:	f107 0110 	add.w	r1, r7, #16
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f890 	bl	80051fa <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	61fb      	str	r3, [r7, #28]

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	603b      	str	r3, [r7, #0]

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d907      	bls.n	80050fe <prvReadMessageFromBuffer+0x4c>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	601a      	str	r2, [r3, #0]
            xNextMessageLength = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	e001      	b.n	80050fe <prvReadMessageFromBuffer+0x4c>
    }
    else
    {
        /* A stream of bytes is being received (as opposed to a discrete
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	61fb      	str	r3, [r7, #28]
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f878 	bl	80051fa <prvReadBytesFromBuffer>
 800510a:	6178      	str	r0, [r7, #20]

    return xReceivedLength;
 800510c:	697b      	ldr	r3, [r7, #20]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b08a      	sub	sp, #40	; 0x28
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <prvWriteBytesToBuffer+0x28>
        __asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	61fb      	str	r3, [r7, #28]
    }
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <prvWriteBytesToBuffer+0x26>

    xNextHead = pxStreamBuffer->xHead;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	4293      	cmp	r3, r2
 8005150:	bf28      	it	cs
 8005152:	4613      	movcs	r3, r2
 8005154:	623b      	str	r3, [r7, #32]

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8005156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	441a      	add	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	d90a      	bls.n	800517a <prvWriteBytesToBuffer+0x64>
        __asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	61bb      	str	r3, [r7, #24]
    }
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <prvWriteBytesToBuffer+0x62>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	4413      	add	r3, r2
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	4618      	mov	r0, r3
 8005188:	f004 f9e8 	bl	800955c <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	429a      	cmp	r2, r3
 8005192:	d91c      	bls.n	80051ce <prvWriteBytesToBuffer+0xb8>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	1ad2      	subs	r2, r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d90a      	bls.n	80051b8 <prvWriteBytesToBuffer+0xa2>
        __asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	617b      	str	r3, [r7, #20]
    }
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <prvWriteBytesToBuffer+0xa0>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6998      	ldr	r0, [r3, #24]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	18d1      	adds	r1, r2, r3
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	f004 f9c7 	bl	800955c <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24

    if( xNextHead >= pxStreamBuffer->xLength )
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	429a      	cmp	r2, r3
 80051de:	d304      	bcc.n	80051ea <prvWriteBytesToBuffer+0xd4>
    {
        xNextHead -= pxStreamBuffer->xLength;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ee:	605a      	str	r2, [r3, #4]

    return xCount;
 80051f0:	687b      	ldr	r3, [r7, #4]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3728      	adds	r7, #40	; 0x28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b08a      	sub	sp, #40	; 0x28
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	603b      	str	r3, [r7, #0]
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	4293      	cmp	r3, r2
 800520e:	bf28      	it	cs
 8005210:	4613      	movcs	r3, r2
 8005212:	623b      	str	r3, [r7, #32]

    if( xCount > ( size_t ) 0 )
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d064      	beq.n	80052e4 <prvReadBytesFromBuffer+0xea>
    {
        xNextTail = pxStreamBuffer->xTail;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	6a3a      	ldr	r2, [r7, #32]
 800522a:	4293      	cmp	r3, r2
 800522c:	bf28      	it	cs
 800522e:	4613      	movcs	r3, r2
 8005230:	61fb      	str	r3, [r7, #28]

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	d90a      	bls.n	8005250 <prvReadBytesFromBuffer+0x56>
        __asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	61bb      	str	r3, [r7, #24]
    }
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <prvReadBytesFromBuffer+0x54>
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8005250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	441a      	add	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	d90a      	bls.n	8005274 <prvReadBytesFromBuffer+0x7a>
        __asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	617b      	str	r3, [r7, #20]
    }
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <prvReadBytesFromBuffer+0x78>
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	699a      	ldr	r2, [r3, #24]
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	4413      	add	r3, r2
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	4619      	mov	r1, r3
 8005280:	68b8      	ldr	r0, [r7, #8]
 8005282:	f004 f96b 	bl	800955c <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	429a      	cmp	r2, r3
 800528c:	d919      	bls.n	80052c2 <prvReadBytesFromBuffer+0xc8>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
 800528e:	6a3a      	ldr	r2, [r7, #32]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	d90a      	bls.n	80052ac <prvReadBytesFromBuffer+0xb2>
        __asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	613b      	str	r3, [r7, #16]
    }
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <prvReadBytesFromBuffer+0xb0>
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	18d0      	adds	r0, r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6999      	ldr	r1, [r3, #24]
 80052b6:	6a3a      	ldr	r2, [r7, #32]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	f004 f94d 	bl	800955c <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
 80052c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	4413      	add	r3, r2
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24

        if( xNextTail >= pxStreamBuffer->xLength )
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d304      	bcc.n	80052de <prvReadBytesFromBuffer+0xe4>
        {
            xNextTail -= pxStreamBuffer->xLength;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        pxStreamBuffer->xTail = xNextTail;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e2:	601a      	str	r2, [r3, #0]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 80052e4:	6a3b      	ldr	r3, [r7, #32]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3728      	adds	r7, #40	; 0x28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	4413      	add	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
    xCount -= pxStreamBuffer->xTail;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	60fb      	str	r3, [r7, #12]

    if( xCount >= pxStreamBuffer->xLength )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	429a      	cmp	r2, r3
 8005314:	d304      	bcc.n	8005320 <prvBytesInBuffer+0x32>
    {
        xCount -= pxStreamBuffer->xLength;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	60fb      	str	r3, [r7, #12]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 8005320:	68fb      	ldr	r3, [r7, #12]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b086      	sub	sp, #24
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	603b      	str	r3, [r7, #0]
    #if ( configASSERT_DEFINED == 1 )
        {
            /* The value written just has to be identifiable when looking at the
             * memory.  Don't use 0xA5 as that is the stack fill value and could
             * result in confusion as to what is actually being observed. */
            const BaseType_t xWriteValue = 0x55;
 800533c:	2355      	movs	r3, #85	; 0x55
 800533e:	617b      	str	r3, [r7, #20]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6979      	ldr	r1, [r7, #20]
 8005344:	68b8      	ldr	r0, [r7, #8]
 8005346:	f004 f917 	bl	8009578 <memset>
 800534a:	4602      	mov	r2, r0
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4293      	cmp	r3, r2
 8005350:	d00a      	beq.n	8005368 <prvInitialiseNewStreamBuffer+0x3a>
        __asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	613b      	str	r3, [r7, #16]
    }
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <prvInitialiseNewStreamBuffer+0x38>
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8005368:	2224      	movs	r2, #36	; 0x24
 800536a:	2100      	movs	r1, #0
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f004 f903 	bl	8009578 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	619a      	str	r2, [r3, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	609a      	str	r2, [r3, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	60da      	str	r2, [r3, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f897 2020 	ldrb.w	r2, [r7, #32]
 800538a:	771a      	strb	r2, [r3, #28]
}
 800538c:	bf00      	nop
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	; 0x30
 8005398:	af04      	add	r7, sp, #16
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 ff57 	bl	800725c <pvPortMalloc>
 80053ae:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00e      	beq.n	80053d4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053b6:	2058      	movs	r0, #88	; 0x58
 80053b8:	f001 ff50 	bl	800725c <pvPortMalloc>
 80053bc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
 80053ca:	e005      	b.n	80053d8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80053cc:	6978      	ldr	r0, [r7, #20]
 80053ce:	f002 f825 	bl	800741c <vPortFree>
 80053d2:	e001      	b.n	80053d8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d013      	beq.n	8005406 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	2300      	movs	r3, #0
 80053e2:	9303      	str	r3, [sp, #12]
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	9302      	str	r3, [sp, #8]
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f80e 	bl	8005416 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80053fa:	69f8      	ldr	r0, [r7, #28]
 80053fc:	f000 f8a2 	bl	8005544 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005400:	2301      	movs	r3, #1
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	e002      	b.n	800540c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005406:	f04f 33ff 	mov.w	r3, #4294967295
 800540a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800540c:	69bb      	ldr	r3, [r7, #24]
    }
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b088      	sub	sp, #32
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
 8005422:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	461a      	mov	r2, r3
 800542e:	21a5      	movs	r1, #165	; 0xa5
 8005430:	f004 f8a2 	bl	8009578 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800543e:	3b01      	subs	r3, #1
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f023 0307 	bic.w	r3, r3, #7
 800544c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <prvInitialiseNewTask+0x58>
        __asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	617b      	str	r3, [r7, #20]
    }
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01f      	beq.n	80054b4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	e012      	b.n	80054a0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	4413      	add	r3, r2
 8005480:	7819      	ldrb	r1, [r3, #0]
 8005482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	3334      	adds	r3, #52	; 0x34
 800548a:	460a      	mov	r2, r1
 800548c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	4413      	add	r3, r2
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d006      	beq.n	80054a8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3301      	adds	r3, #1
 800549e:	61fb      	str	r3, [r7, #28]
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2b09      	cmp	r3, #9
 80054a4:	d9e9      	bls.n	800547a <prvInitialiseNewTask+0x64>
 80054a6:	e000      	b.n	80054aa <prvInitialiseNewTask+0x94>
            {
                break;
 80054a8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054b2:	e003      	b.n	80054bc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d901      	bls.n	80054c6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054c2:	2304      	movs	r3, #4
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	2200      	movs	r2, #0
 80054d6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	3304      	adds	r3, #4
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fe fdfb 	bl	80040d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	3318      	adds	r3, #24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fe fdf6 	bl	80040d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	f1c3 0205 	rsb	r2, r3, #5
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005500:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	3350      	adds	r3, #80	; 0x50
 8005506:	2204      	movs	r2, #4
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f004 f834 	bl	8009578 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	3354      	adds	r3, #84	; 0x54
 8005514:	2201      	movs	r2, #1
 8005516:	2100      	movs	r1, #0
 8005518:	4618      	mov	r0, r3
 800551a:	f004 f82d 	bl	8009578 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	69b8      	ldr	r0, [r7, #24]
 8005524:	f001 fc42 	bl	8006dac <pxPortInitialiseStack>
 8005528:	4602      	mov	r2, r0
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005538:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800553a:	bf00      	nop
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005544:	b5b0      	push	{r4, r5, r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af02      	add	r7, sp, #8
 800554a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800554c:	f001 fd5c 	bl	8007008 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005550:	4b3b      	ldr	r3, [pc, #236]	; (8005640 <prvAddNewTaskToReadyList+0xfc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a3a      	ldr	r2, [pc, #232]	; (8005640 <prvAddNewTaskToReadyList+0xfc>)
 8005558:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800555a:	4b3a      	ldr	r3, [pc, #232]	; (8005644 <prvAddNewTaskToReadyList+0x100>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005562:	4a38      	ldr	r2, [pc, #224]	; (8005644 <prvAddNewTaskToReadyList+0x100>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005568:	4b35      	ldr	r3, [pc, #212]	; (8005640 <prvAddNewTaskToReadyList+0xfc>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d110      	bne.n	8005592 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005570:	f000 fc24 	bl	8005dbc <prvInitialiseTaskLists>
 8005574:	e00d      	b.n	8005592 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005576:	4b34      	ldr	r3, [pc, #208]	; (8005648 <prvAddNewTaskToReadyList+0x104>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800557e:	4b31      	ldr	r3, [pc, #196]	; (8005644 <prvAddNewTaskToReadyList+0x100>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	429a      	cmp	r2, r3
 800558a:	d802      	bhi.n	8005592 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800558c:	4a2d      	ldr	r2, [pc, #180]	; (8005644 <prvAddNewTaskToReadyList+0x100>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005592:	4b2e      	ldr	r3, [pc, #184]	; (800564c <prvAddNewTaskToReadyList+0x108>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3301      	adds	r3, #1
 8005598:	4a2c      	ldr	r2, [pc, #176]	; (800564c <prvAddNewTaskToReadyList+0x108>)
 800559a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <prvAddNewTaskToReadyList+0x108>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d016      	beq.n	80055d8 <prvAddNewTaskToReadyList+0x94>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f003 fb89 	bl	8008cc4 <SEGGER_SYSVIEW_OnTaskCreate>
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	461d      	mov	r5, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461c      	mov	r4, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	1ae3      	subs	r3, r4, r3
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	462b      	mov	r3, r5
 80055d4:	f003 ff04 	bl	80093e0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	f003 fbf6 	bl	8008dcc <SEGGER_SYSVIEW_OnTaskStartReady>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	2201      	movs	r2, #1
 80055e6:	409a      	lsls	r2, r3
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <prvAddNewTaskToReadyList+0x10c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	4a18      	ldr	r2, [pc, #96]	; (8005650 <prvAddNewTaskToReadyList+0x10c>)
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4a15      	ldr	r2, [pc, #84]	; (8005654 <prvAddNewTaskToReadyList+0x110>)
 8005600:	441a      	add	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3304      	adds	r3, #4
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f7fe fd72 	bl	80040f2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800560e:	f001 fd2b 	bl	8007068 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005612:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <prvAddNewTaskToReadyList+0x104>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <prvAddNewTaskToReadyList+0x100>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	429a      	cmp	r2, r3
 8005626:	d207      	bcs.n	8005638 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <prvAddNewTaskToReadyList+0x114>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bdb0      	pop	{r4, r5, r7, pc}
 8005640:	20000278 	.word	0x20000278
 8005644:	200001a0 	.word	0x200001a0
 8005648:	20000284 	.word	0x20000284
 800564c:	20000294 	.word	0x20000294
 8005650:	20000280 	.word	0x20000280
 8005654:	200001a4 	.word	0x200001a4
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005662:	4b27      	ldr	r3, [pc, #156]	; (8005700 <vTaskStartScheduler+0xa4>)
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	2300      	movs	r3, #0
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	2300      	movs	r3, #0
 800566c:	2282      	movs	r2, #130	; 0x82
 800566e:	4925      	ldr	r1, [pc, #148]	; (8005704 <vTaskStartScheduler+0xa8>)
 8005670:	4825      	ldr	r0, [pc, #148]	; (8005708 <vTaskStartScheduler+0xac>)
 8005672:	f7ff fe8f 	bl	8005394 <xTaskCreate>
 8005676:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d102      	bne.n	8005684 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800567e:	f001 f827 	bl	80066d0 <xTimerCreateTimerTask>
 8005682:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d124      	bne.n	80056d4 <vTaskStartScheduler+0x78>
        __asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	60bb      	str	r3, [r7, #8]
    }
 800569c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800569e:	4b1b      	ldr	r3, [pc, #108]	; (800570c <vTaskStartScheduler+0xb0>)
 80056a0:	f04f 32ff 	mov.w	r2, #4294967295
 80056a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80056a6:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <vTaskStartScheduler+0xb4>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056ac:	4b19      	ldr	r3, [pc, #100]	; (8005714 <vTaskStartScheduler+0xb8>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80056b2:	4b19      	ldr	r3, [pc, #100]	; (8005718 <vTaskStartScheduler+0xbc>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4b12      	ldr	r3, [pc, #72]	; (8005700 <vTaskStartScheduler+0xa4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d102      	bne.n	80056c4 <vTaskStartScheduler+0x68>
 80056be:	f003 fae5 	bl	8008c8c <SEGGER_SYSVIEW_OnIdle>
 80056c2:	e004      	b.n	80056ce <vTaskStartScheduler+0x72>
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <vTaskStartScheduler+0xbc>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f003 fb3d 	bl	8008d48 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80056ce:	f001 fbf9 	bl	8006ec4 <xPortStartScheduler>
 80056d2:	e00e      	b.n	80056f2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056da:	d10a      	bne.n	80056f2 <vTaskStartScheduler+0x96>
        __asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	607b      	str	r3, [r7, #4]
    }
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80056f2:	4b0a      	ldr	r3, [pc, #40]	; (800571c <vTaskStartScheduler+0xc0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
}
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	2000029c 	.word	0x2000029c
 8005704:	080097d8 	.word	0x080097d8
 8005708:	08005d8d 	.word	0x08005d8d
 800570c:	20000298 	.word	0x20000298
 8005710:	20000284 	.word	0x20000284
 8005714:	2000027c 	.word	0x2000027c
 8005718:	200001a0 	.word	0x200001a0
 800571c:	20000008 	.word	0x20000008

08005720 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005724:	4b04      	ldr	r3, [pc, #16]	; (8005738 <vTaskSuspendAll+0x18>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	4a03      	ldr	r2, [pc, #12]	; (8005738 <vTaskSuspendAll+0x18>)
 800572c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800572e:	bf00      	nop
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	200002a0 	.word	0x200002a0

0800573c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800574a:	4b43      	ldr	r3, [pc, #268]	; (8005858 <xTaskResumeAll+0x11c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10a      	bne.n	8005768 <xTaskResumeAll+0x2c>
        __asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	603b      	str	r3, [r7, #0]
    }
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005768:	f001 fc4e 	bl	8007008 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800576c:	4b3a      	ldr	r3, [pc, #232]	; (8005858 <xTaskResumeAll+0x11c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3b01      	subs	r3, #1
 8005772:	4a39      	ldr	r2, [pc, #228]	; (8005858 <xTaskResumeAll+0x11c>)
 8005774:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005776:	4b38      	ldr	r3, [pc, #224]	; (8005858 <xTaskResumeAll+0x11c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d165      	bne.n	800584a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800577e:	4b37      	ldr	r3, [pc, #220]	; (800585c <xTaskResumeAll+0x120>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d061      	beq.n	800584a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005786:	e032      	b.n	80057ee <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005788:	4b35      	ldr	r3, [pc, #212]	; (8005860 <xTaskResumeAll+0x124>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3318      	adds	r3, #24
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe fd09 	bl	80041ac <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3304      	adds	r3, #4
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe fd04 	bl	80041ac <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 fb10 	bl	8008dcc <SEGGER_SYSVIEW_OnTaskStartReady>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	2201      	movs	r2, #1
 80057b2:	409a      	lsls	r2, r3
 80057b4:	4b2b      	ldr	r3, [pc, #172]	; (8005864 <xTaskResumeAll+0x128>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	4a2a      	ldr	r2, [pc, #168]	; (8005864 <xTaskResumeAll+0x128>)
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4a27      	ldr	r2, [pc, #156]	; (8005868 <xTaskResumeAll+0x12c>)
 80057cc:	441a      	add	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f7fe fc8c 	bl	80040f2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057de:	4b23      	ldr	r3, [pc, #140]	; (800586c <xTaskResumeAll+0x130>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d302      	bcc.n	80057ee <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80057e8:	4b21      	ldr	r3, [pc, #132]	; (8005870 <xTaskResumeAll+0x134>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057ee:	4b1c      	ldr	r3, [pc, #112]	; (8005860 <xTaskResumeAll+0x124>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1c8      	bne.n	8005788 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80057fc:	f000 fb5c 	bl	8005eb8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005800:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <xTaskResumeAll+0x138>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d010      	beq.n	800582e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800580c:	f000 f858 	bl	80058c0 <xTaskIncrementTick>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8005816:	4b16      	ldr	r3, [pc, #88]	; (8005870 <xTaskResumeAll+0x134>)
 8005818:	2201      	movs	r2, #1
 800581a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3b01      	subs	r3, #1
 8005820:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f1      	bne.n	800580c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8005828:	4b12      	ldr	r3, [pc, #72]	; (8005874 <xTaskResumeAll+0x138>)
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800582e:	4b10      	ldr	r3, [pc, #64]	; (8005870 <xTaskResumeAll+0x134>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005836:	2301      	movs	r3, #1
 8005838:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <xTaskResumeAll+0x13c>)
 800583c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800584a:	f001 fc0d 	bl	8007068 <vPortExitCritical>

    return xAlreadyYielded;
 800584e:	68bb      	ldr	r3, [r7, #8]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	200002a0 	.word	0x200002a0
 800585c:	20000278 	.word	0x20000278
 8005860:	20000238 	.word	0x20000238
 8005864:	20000280 	.word	0x20000280
 8005868:	200001a4 	.word	0x200001a4
 800586c:	200001a0 	.word	0x200001a0
 8005870:	2000028c 	.word	0x2000028c
 8005874:	20000288 	.word	0x20000288
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <xTaskGetTickCount+0x1c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005888:	687b      	ldr	r3, [r7, #4]
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	2000027c 	.word	0x2000027c

0800589c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058a2:	f001 fc9b 	bl	80071dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80058a6:	2300      	movs	r3, #0
 80058a8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80058aa:	4b04      	ldr	r3, [pc, #16]	; (80058bc <xTaskGetTickCountFromISR+0x20>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80058b0:	683b      	ldr	r3, [r7, #0]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	2000027c 	.word	0x2000027c

080058c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ca:	4b50      	ldr	r3, [pc, #320]	; (8005a0c <xTaskIncrementTick+0x14c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 8092 	bne.w	80059f8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058d4:	4b4e      	ldr	r3, [pc, #312]	; (8005a10 <xTaskIncrementTick+0x150>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80058dc:	4a4c      	ldr	r2, [pc, #304]	; (8005a10 <xTaskIncrementTick+0x150>)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d120      	bne.n	800592a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80058e8:	4b4a      	ldr	r3, [pc, #296]	; (8005a14 <xTaskIncrementTick+0x154>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <xTaskIncrementTick+0x48>
        __asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	603b      	str	r3, [r7, #0]
    }
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <xTaskIncrementTick+0x46>
 8005908:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <xTaskIncrementTick+0x154>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	4b42      	ldr	r3, [pc, #264]	; (8005a18 <xTaskIncrementTick+0x158>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a40      	ldr	r2, [pc, #256]	; (8005a14 <xTaskIncrementTick+0x154>)
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	4a40      	ldr	r2, [pc, #256]	; (8005a18 <xTaskIncrementTick+0x158>)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b3f      	ldr	r3, [pc, #252]	; (8005a1c <xTaskIncrementTick+0x15c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	4a3e      	ldr	r2, [pc, #248]	; (8005a1c <xTaskIncrementTick+0x15c>)
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	f000 fac7 	bl	8005eb8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800592a:	4b3d      	ldr	r3, [pc, #244]	; (8005a20 <xTaskIncrementTick+0x160>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	429a      	cmp	r2, r3
 8005932:	d34c      	bcc.n	80059ce <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005934:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <xTaskIncrementTick+0x154>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800593e:	4b38      	ldr	r3, [pc, #224]	; (8005a20 <xTaskIncrementTick+0x160>)
 8005940:	f04f 32ff 	mov.w	r2, #4294967295
 8005944:	601a      	str	r2, [r3, #0]
                    break;
 8005946:	e042      	b.n	80059ce <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005948:	4b32      	ldr	r3, [pc, #200]	; (8005a14 <xTaskIncrementTick+0x154>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d203      	bcs.n	8005968 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005960:	4a2f      	ldr	r2, [pc, #188]	; (8005a20 <xTaskIncrementTick+0x160>)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005966:	e032      	b.n	80059ce <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	3304      	adds	r3, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe fc1d 	bl	80041ac <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3318      	adds	r3, #24
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fc14 	bl	80041ac <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4618      	mov	r0, r3
 8005988:	f003 fa20 	bl	8008dcc <SEGGER_SYSVIEW_OnTaskStartReady>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	2201      	movs	r2, #1
 8005992:	409a      	lsls	r2, r3
 8005994:	4b23      	ldr	r3, [pc, #140]	; (8005a24 <xTaskIncrementTick+0x164>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4313      	orrs	r3, r2
 800599a:	4a22      	ldr	r2, [pc, #136]	; (8005a24 <xTaskIncrementTick+0x164>)
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <xTaskIncrementTick+0x168>)
 80059ac:	441a      	add	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fe fb9c 	bl	80040f2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059be:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <xTaskIncrementTick+0x16c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d3b5      	bcc.n	8005934 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80059c8:	2301      	movs	r3, #1
 80059ca:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059cc:	e7b2      	b.n	8005934 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059ce:	4b17      	ldr	r3, [pc, #92]	; (8005a2c <xTaskIncrementTick+0x16c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d4:	4914      	ldr	r1, [pc, #80]	; (8005a28 <xTaskIncrementTick+0x168>)
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d901      	bls.n	80059ea <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80059e6:	2301      	movs	r3, #1
 80059e8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80059ea:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <xTaskIncrementTick+0x170>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	e004      	b.n	8005a02 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80059f8:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <xTaskIncrementTick+0x174>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3301      	adds	r3, #1
 80059fe:	4a0d      	ldr	r2, [pc, #52]	; (8005a34 <xTaskIncrementTick+0x174>)
 8005a00:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005a02:	697b      	ldr	r3, [r7, #20]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200002a0 	.word	0x200002a0
 8005a10:	2000027c 	.word	0x2000027c
 8005a14:	20000230 	.word	0x20000230
 8005a18:	20000234 	.word	0x20000234
 8005a1c:	20000290 	.word	0x20000290
 8005a20:	20000298 	.word	0x20000298
 8005a24:	20000280 	.word	0x20000280
 8005a28:	200001a4 	.word	0x200001a4
 8005a2c:	200001a0 	.word	0x200001a0
 8005a30:	2000028c 	.word	0x2000028c
 8005a34:	20000288 	.word	0x20000288

08005a38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a3e:	4b2d      	ldr	r3, [pc, #180]	; (8005af4 <vTaskSwitchContext+0xbc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005a46:	4b2c      	ldr	r3, [pc, #176]	; (8005af8 <vTaskSwitchContext+0xc0>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005a4c:	e04d      	b.n	8005aea <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005a4e:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <vTaskSwitchContext+0xc0>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a54:	4b29      	ldr	r3, [pc, #164]	; (8005afc <vTaskSwitchContext+0xc4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	fab3 f383 	clz	r3, r3
 8005a60:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005a62:	7afb      	ldrb	r3, [r7, #11]
 8005a64:	f1c3 031f 	rsb	r3, r3, #31
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	4925      	ldr	r1, [pc, #148]	; (8005b00 <vTaskSwitchContext+0xc8>)
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
    }
 8005a90:	bf00      	nop
 8005a92:	e7fe      	b.n	8005a92 <vTaskSwitchContext+0x5a>
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <vTaskSwitchContext+0xc8>)
 8005aa0:	4413      	add	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	605a      	str	r2, [r3, #4]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d104      	bne.n	8005ac4 <vTaskSwitchContext+0x8c>
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	4a0e      	ldr	r2, [pc, #56]	; (8005b04 <vTaskSwitchContext+0xcc>)
 8005acc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <vTaskSwitchContext+0xcc>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <vTaskSwitchContext+0xd0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d102      	bne.n	8005ae0 <vTaskSwitchContext+0xa8>
 8005ada:	f003 f8d7 	bl	8008c8c <SEGGER_SYSVIEW_OnIdle>
}
 8005ade:	e004      	b.n	8005aea <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8005ae0:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <vTaskSwitchContext+0xcc>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f003 f92f 	bl	8008d48 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005aea:	bf00      	nop
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200002a0 	.word	0x200002a0
 8005af8:	2000028c 	.word	0x2000028c
 8005afc:	20000280 	.word	0x20000280
 8005b00:	200001a4 	.word	0x200001a4
 8005b04:	200001a0 	.word	0x200001a0
 8005b08:	2000029c 	.word	0x2000029c

08005b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	60fb      	str	r3, [r7, #12]
    }
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b32:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <vTaskPlaceOnEventList+0x44>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3318      	adds	r3, #24
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fe fafd 	bl	800413a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b40:	2101      	movs	r1, #1
 8005b42:	6838      	ldr	r0, [r7, #0]
 8005b44:	f000 fd4c 	bl	80065e0 <prvAddCurrentTaskToDelayedList>
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	200001a0 	.word	0x200001a0

08005b54 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	617b      	str	r3, [r7, #20]
    }
 8005b78:	bf00      	nop
 8005b7a:	e7fe      	b.n	8005b7a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <vTaskPlaceOnEventListRestricted+0x58>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3318      	adds	r3, #24
 8005b82:	4619      	mov	r1, r3
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7fe fab4 	bl	80040f2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295
 8005b94:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005b96:	2024      	movs	r0, #36	; 0x24
 8005b98:	f002 facc 	bl	8008134 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	68b8      	ldr	r0, [r7, #8]
 8005ba0:	f000 fd1e 	bl	80065e0 <prvAddCurrentTaskToDelayedList>
    }
 8005ba4:	bf00      	nop
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	200001a0 	.word	0x200001a0

08005bb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	60fb      	str	r3, [r7, #12]
    }
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	3318      	adds	r3, #24
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe fae3 	bl	80041ac <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005be6:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <xTaskRemoveFromEventList+0xb4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d120      	bne.n	8005c30 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fada 	bl	80041ac <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f003 f8e6 	bl	8008dcc <SEGGER_SYSVIEW_OnTaskStartReady>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	2201      	movs	r2, #1
 8005c06:	409a      	lsls	r2, r3
 8005c08:	4b17      	ldr	r3, [pc, #92]	; (8005c68 <xTaskRemoveFromEventList+0xb8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <xTaskRemoveFromEventList+0xb8>)
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <xTaskRemoveFromEventList+0xbc>)
 8005c20:	441a      	add	r2, r3
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f7fe fa62 	bl	80040f2 <vListInsertEnd>
 8005c2e:	e005      	b.n	8005c3c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	3318      	adds	r3, #24
 8005c34:	4619      	mov	r1, r3
 8005c36:	480e      	ldr	r0, [pc, #56]	; (8005c70 <xTaskRemoveFromEventList+0xc0>)
 8005c38:	f7fe fa5b 	bl	80040f2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <xTaskRemoveFromEventList+0xc4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d905      	bls.n	8005c56 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <xTaskRemoveFromEventList+0xc8>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e001      	b.n	8005c5a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005c5a:	697b      	ldr	r3, [r7, #20]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	200002a0 	.word	0x200002a0
 8005c68:	20000280 	.word	0x20000280
 8005c6c:	200001a4 	.word	0x200001a4
 8005c70:	20000238 	.word	0x20000238
 8005c74:	200001a0 	.word	0x200001a0
 8005c78:	2000028c 	.word	0x2000028c

08005c7c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c84:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <vTaskInternalSetTimeOutState+0x24>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <vTaskInternalSetTimeOutState+0x28>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	605a      	str	r2, [r3, #4]
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	20000290 	.word	0x20000290
 8005ca4:	2000027c 	.word	0x2000027c

08005ca8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	613b      	str	r3, [r7, #16]
    }
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	60fb      	str	r3, [r7, #12]
    }
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005cea:	f001 f98d 	bl	8007008 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005cee:	4b1f      	ldr	r3, [pc, #124]	; (8005d6c <xTaskCheckForTimeOut+0xc4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d06:	d102      	bne.n	8005d0e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e026      	b.n	8005d5c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <xTaskCheckForTimeOut+0xc8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d00a      	beq.n	8005d30 <xTaskCheckForTimeOut+0x88>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d305      	bcc.n	8005d30 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e015      	b.n	8005d5c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d20b      	bcs.n	8005d52 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff ff98 	bl	8005c7c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	e004      	b.n	8005d5c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005d5c:	f001 f984 	bl	8007068 <vPortExitCritical>

    return xReturn;
 8005d60:	69fb      	ldr	r3, [r7, #28]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	2000027c 	.word	0x2000027c
 8005d70:	20000290 	.word	0x20000290

08005d74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005d78:	4b03      	ldr	r3, [pc, #12]	; (8005d88 <vTaskMissedYield+0x14>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	2000028c 	.word	0x2000028c

08005d8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005d94:	f000 f852 	bl	8005e3c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <prvIdleTask+0x28>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d9f9      	bls.n	8005d94 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <prvIdleTask+0x2c>)
 8005da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005db0:	e7f0      	b.n	8005d94 <prvIdleTask+0x8>
 8005db2:	bf00      	nop
 8005db4:	200001a4 	.word	0x200001a4
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	e00c      	b.n	8005de2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <prvInitialiseTaskLists+0x60>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fe f95e 	bl	8004098 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3301      	adds	r3, #1
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d9ef      	bls.n	8005dc8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005de8:	480d      	ldr	r0, [pc, #52]	; (8005e20 <prvInitialiseTaskLists+0x64>)
 8005dea:	f7fe f955 	bl	8004098 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005dee:	480d      	ldr	r0, [pc, #52]	; (8005e24 <prvInitialiseTaskLists+0x68>)
 8005df0:	f7fe f952 	bl	8004098 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005df4:	480c      	ldr	r0, [pc, #48]	; (8005e28 <prvInitialiseTaskLists+0x6c>)
 8005df6:	f7fe f94f 	bl	8004098 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005dfa:	480c      	ldr	r0, [pc, #48]	; (8005e2c <prvInitialiseTaskLists+0x70>)
 8005dfc:	f7fe f94c 	bl	8004098 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005e00:	480b      	ldr	r0, [pc, #44]	; (8005e30 <prvInitialiseTaskLists+0x74>)
 8005e02:	f7fe f949 	bl	8004098 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <prvInitialiseTaskLists+0x78>)
 8005e08:	4a05      	ldr	r2, [pc, #20]	; (8005e20 <prvInitialiseTaskLists+0x64>)
 8005e0a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <prvInitialiseTaskLists+0x7c>)
 8005e0e:	4a05      	ldr	r2, [pc, #20]	; (8005e24 <prvInitialiseTaskLists+0x68>)
 8005e10:	601a      	str	r2, [r3, #0]
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	200001a4 	.word	0x200001a4
 8005e20:	20000208 	.word	0x20000208
 8005e24:	2000021c 	.word	0x2000021c
 8005e28:	20000238 	.word	0x20000238
 8005e2c:	2000024c 	.word	0x2000024c
 8005e30:	20000264 	.word	0x20000264
 8005e34:	20000230 	.word	0x20000230
 8005e38:	20000234 	.word	0x20000234

08005e3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e42:	e019      	b.n	8005e78 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005e44:	f001 f8e0 	bl	8007008 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e48:	4b10      	ldr	r3, [pc, #64]	; (8005e8c <prvCheckTasksWaitingTermination+0x50>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe f9a9 	bl	80041ac <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <prvCheckTasksWaitingTermination+0x54>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	4a0b      	ldr	r2, [pc, #44]	; (8005e90 <prvCheckTasksWaitingTermination+0x54>)
 8005e62:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <prvCheckTasksWaitingTermination+0x58>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	; (8005e94 <prvCheckTasksWaitingTermination+0x58>)
 8005e6c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005e6e:	f001 f8fb 	bl	8007068 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f810 	bl	8005e98 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <prvCheckTasksWaitingTermination+0x58>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e1      	bne.n	8005e44 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	2000024c 	.word	0x2000024c
 8005e90:	20000278 	.word	0x20000278
 8005e94:	20000260 	.word	0x20000260

08005e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fab9 	bl	800741c <vPortFree>
                vPortFree( pxTCB );
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 fab6 	bl	800741c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <prvResetNextTaskUnblockTime+0x30>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d104      	bne.n	8005ed0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005ec6:	4b09      	ldr	r3, [pc, #36]	; (8005eec <prvResetNextTaskUnblockTime+0x34>)
 8005ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ecc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005ece:	e005      	b.n	8005edc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <prvResetNextTaskUnblockTime+0x30>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a04      	ldr	r2, [pc, #16]	; (8005eec <prvResetNextTaskUnblockTime+0x34>)
 8005eda:	6013      	str	r3, [r2, #0]
}
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	20000230 	.word	0x20000230
 8005eec:	20000298 	.word	0x20000298

08005ef0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <xTaskGetCurrentTaskHandle+0x1c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	607b      	str	r3, [r7, #4]

        return xReturn;
 8005efc:	687b      	ldr	r3, [r7, #4]
    }
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	200001a0 	.word	0x200001a0

08005f10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <xTaskGetSchedulerState+0x34>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	e008      	b.n	8005f36 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f24:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <xTaskGetSchedulerState+0x38>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d102      	bne.n	8005f32 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	607b      	str	r3, [r7, #4]
 8005f30:	e001      	b.n	8005f36 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005f32:	2300      	movs	r3, #0
 8005f34:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005f36:	687b      	ldr	r3, [r7, #4]
    }
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	20000284 	.word	0x20000284
 8005f48:	200002a0 	.word	0x200002a0

08005f4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d068      	beq.n	8006034 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005f62:	4b37      	ldr	r3, [pc, #220]	; (8006040 <xTaskPriorityDisinherit+0xf4>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d00a      	beq.n	8005f82 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	60fb      	str	r3, [r7, #12]
    }
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	60bb      	str	r3, [r7, #8]
    }
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d03e      	beq.n	8006034 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d13a      	bne.n	8006034 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe f8f2 	bl	80041ac <uxListRemove>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	43da      	mvns	r2, r3
 8005fda:	4b1a      	ldr	r3, [pc, #104]	; (8006044 <xTaskPriorityDisinherit+0xf8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	4a18      	ldr	r2, [pc, #96]	; (8006044 <xTaskPriorityDisinherit+0xf8>)
 8005fe2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	204a      	movs	r0, #74	; 0x4a
 8005fea:	f002 f8c1 	bl	8008170 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	f1c3 0205 	rsb	r2, r3, #5
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	2201      	movs	r2, #1
 8006008:	409a      	lsls	r2, r3
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <xTaskPriorityDisinherit+0xf8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4313      	orrs	r3, r2
 8006010:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <xTaskPriorityDisinherit+0xf8>)
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4a09      	ldr	r2, [pc, #36]	; (8006048 <xTaskPriorityDisinherit+0xfc>)
 8006022:	441a      	add	r2, r3
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f7fe f861 	bl	80040f2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006034:	697b      	ldr	r3, [r7, #20]
    }
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200001a0 	.word	0x200001a0
 8006044:	20000280 	.word	0x20000280
 8006048:	200001a4 	.word	0x200001a4

0800604c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	613b      	str	r3, [r7, #16]
    }
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006076:	f000 ffc7 	bl	8007008 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800607a:	4b36      	ldr	r3, [pc, #216]	; (8006154 <xTaskGenericNotifyWait+0x108>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	3354      	adds	r3, #84	; 0x54
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d022      	beq.n	80060d2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800608c:	4b31      	ldr	r3, [pc, #196]	; (8006154 <xTaskGenericNotifyWait+0x108>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	3214      	adds	r2, #20
 8006094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	43d2      	mvns	r2, r2
 800609c:	4011      	ands	r1, r2
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	3214      	adds	r2, #20
 80060a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80060a6:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <xTaskGenericNotifyWait+0x108>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	3354      	adds	r3, #84	; 0x54
 80060b0:	2201      	movs	r2, #1
 80060b2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00b      	beq.n	80060d2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060ba:	2101      	movs	r1, #1
 80060bc:	6a38      	ldr	r0, [r7, #32]
 80060be:	f000 fa8f 	bl	80065e0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80060c2:	4b25      	ldr	r3, [pc, #148]	; (8006158 <xTaskGenericNotifyWait+0x10c>)
 80060c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80060d2:	f000 ffc9 	bl	8007068 <vPortExitCritical>

        taskENTER_CRITICAL();
 80060d6:	f000 ff97 	bl	8007008 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	2040      	movs	r0, #64	; 0x40
 80060e8:	f002 f94e 	bl	8008388 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80060f2:	4b18      	ldr	r3, [pc, #96]	; (8006154 <xTaskGenericNotifyWait+0x108>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	3214      	adds	r2, #20
 80060fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006102:	4b14      	ldr	r3, [pc, #80]	; (8006154 <xTaskGenericNotifyWait+0x108>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	3354      	adds	r3, #84	; 0x54
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d002      	beq.n	800611a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	e00e      	b.n	8006138 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800611a:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <xTaskGenericNotifyWait+0x108>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	3214      	adds	r2, #20
 8006122:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	43d2      	mvns	r2, r2
 800612a:	4011      	ands	r1, r2
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	3214      	adds	r2, #20
 8006130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006138:	4b06      	ldr	r3, [pc, #24]	; (8006154 <xTaskGenericNotifyWait+0x108>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	3354      	adds	r3, #84	; 0x54
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006146:	f000 ff8f 	bl	8007068 <vPortExitCritical>

        return xReturn;
 800614a:	697b      	ldr	r3, [r7, #20]
    }
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	200001a0 	.word	0x200001a0
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800615c:	b580      	push	{r7, lr}
 800615e:	b08e      	sub	sp, #56	; 0x38
 8006160:	af02      	add	r7, sp, #8
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800616a:	2301      	movs	r3, #1
 800616c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <xTaskGenericNotify+0x2e>
        __asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	623b      	str	r3, [r7, #32]
    }
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <xTaskGenericNotify+0x4a>
        __asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	61fb      	str	r3, [r7, #28]
    }
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80061aa:	f000 ff2d 	bl	8007008 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d006      	beq.n	80061c2 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	3214      	adds	r2, #20
 80061ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80061c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4413      	add	r3, r2
 80061c8:	3354      	adds	r3, #84	; 0x54
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80061d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4413      	add	r3, r2
 80061d6:	3354      	adds	r3, #84	; 0x54
 80061d8:	2202      	movs	r2, #2
 80061da:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d83b      	bhi.n	800625a <xTaskGenericNotify+0xfe>
 80061e2:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <xTaskGenericNotify+0x8c>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	08006279 	.word	0x08006279
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	08006219 	.word	0x08006219
 80061f4:	08006231 	.word	0x08006231
 80061f8:	0800623f 	.word	0x0800623f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	3214      	adds	r2, #20
 8006202:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	ea42 0103 	orr.w	r1, r2, r3
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	3214      	adds	r2, #20
 8006212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006216:	e032      	b.n	800627e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	3214      	adds	r2, #20
 800621e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006222:	1c59      	adds	r1, r3, #1
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	3214      	adds	r2, #20
 800622a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800622e:	e026      	b.n	800627e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	3214      	adds	r2, #20
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800623c:	e01f      	b.n	800627e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800623e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006242:	2b02      	cmp	r3, #2
 8006244:	d006      	beq.n	8006254 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	3214      	adds	r2, #20
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006252:	e014      	b.n	800627e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006254:	2300      	movs	r3, #0
 8006256:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006258:	e011      	b.n	800627e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800625a:	4b34      	ldr	r3, [pc, #208]	; (800632c <xTaskGenericNotify+0x1d0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00c      	beq.n	800627c <xTaskGenericNotify+0x120>
        __asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	61bb      	str	r3, [r7, #24]
    }
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <xTaskGenericNotify+0x11a>
                    break;
 8006278:	bf00      	nop
 800627a:	e000      	b.n	800627e <xTaskGenericNotify+0x122>

                    break;
 800627c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	4618      	mov	r0, r3
 8006282:	f002 fe45 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 8006286:	4601      	mov	r1, r0
 8006288:	78fa      	ldrb	r2, [r7, #3]
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	4613      	mov	r3, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	203e      	movs	r0, #62	; 0x3e
 8006294:	f002 f878 	bl	8008388 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800629c:	2b01      	cmp	r3, #1
 800629e:	d13d      	bne.n	800631c <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	3304      	adds	r3, #4
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fd ff81 	bl	80041ac <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	4618      	mov	r0, r3
 80062ae:	f002 fd8d 	bl	8008dcc <SEGGER_SYSVIEW_OnTaskStartReady>
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	2201      	movs	r2, #1
 80062b8:	409a      	lsls	r2, r3
 80062ba:	4b1d      	ldr	r3, [pc, #116]	; (8006330 <xTaskGenericNotify+0x1d4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4313      	orrs	r3, r2
 80062c0:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <xTaskGenericNotify+0x1d4>)
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4a18      	ldr	r2, [pc, #96]	; (8006334 <xTaskGenericNotify+0x1d8>)
 80062d2:	441a      	add	r2, r3
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	3304      	adds	r3, #4
 80062d8:	4619      	mov	r1, r3
 80062da:	4610      	mov	r0, r2
 80062dc:	f7fd ff09 	bl	80040f2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <xTaskGenericNotify+0x1a2>
        __asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	617b      	str	r3, [r7, #20]
    }
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <xTaskGenericNotify+0x1dc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	429a      	cmp	r2, r3
 800630a:	d907      	bls.n	800631c <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <xTaskGenericNotify+0x1e0>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800631c:	f000 fea4 	bl	8007068 <vPortExitCritical>

        return xReturn;
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006322:	4618      	mov	r0, r3
 8006324:	3730      	adds	r7, #48	; 0x30
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	2000027c 	.word	0x2000027c
 8006330:	20000280 	.word	0x20000280
 8006334:	200001a4 	.word	0x200001a4
 8006338:	200001a0 	.word	0x200001a0
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006340:	b580      	push	{r7, lr}
 8006342:	b092      	sub	sp, #72	; 0x48
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800634e:	2301      	movs	r3, #1
 8006350:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800636a:	bf00      	nop
 800636c:	e7fe      	b.n	800636c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800638a:	f000 ff27 	bl	80071dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8006392:	f3ef 8211 	mrs	r2, BASEPRI
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	627a      	str	r2, [r7, #36]	; 0x24
 80063a8:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80063ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d006      	beq.n	80063c2 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	3214      	adds	r2, #20
 80063ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80063c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4413      	add	r3, r2
 80063c8:	3354      	adds	r3, #84	; 0x54
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80063d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4413      	add	r3, r2
 80063d6:	3354      	adds	r3, #84	; 0x54
 80063d8:	2202      	movs	r2, #2
 80063da:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d83b      	bhi.n	800645a <xTaskGenericNotifyFromISR+0x11a>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <xTaskGenericNotifyFromISR+0xa8>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	08006479 	.word	0x08006479
 80063ec:	080063fd 	.word	0x080063fd
 80063f0:	08006419 	.word	0x08006419
 80063f4:	08006431 	.word	0x08006431
 80063f8:	0800643f 	.word	0x0800643f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	3214      	adds	r2, #20
 8006402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	ea42 0103 	orr.w	r1, r2, r3
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	3214      	adds	r2, #20
 8006412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006416:	e032      	b.n	800647e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	3214      	adds	r2, #20
 800641e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006422:	1c59      	adds	r1, r3, #1
 8006424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	3214      	adds	r2, #20
 800642a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800642e:	e026      	b.n	800647e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	3214      	adds	r2, #20
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800643c:	e01f      	b.n	800647e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800643e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006442:	2b02      	cmp	r3, #2
 8006444:	d006      	beq.n	8006454 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	3214      	adds	r2, #20
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006452:	e014      	b.n	800647e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006454:	2300      	movs	r3, #0
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006458:	e011      	b.n	800647e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800645a:	4b3d      	ldr	r3, [pc, #244]	; (8006550 <xTaskGenericNotifyFromISR+0x210>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00c      	beq.n	800647c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	61fb      	str	r3, [r7, #28]
    }
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800647c:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	4618      	mov	r0, r3
 8006482:	f002 fd45 	bl	8008f10 <SEGGER_SYSVIEW_ShrinkId>
 8006486:	78f9      	ldrb	r1, [r7, #3]
 8006488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800648a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800648c:	9201      	str	r2, [sp, #4]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	460b      	mov	r3, r1
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	4601      	mov	r1, r0
 8006496:	203f      	movs	r0, #63	; 0x3f
 8006498:	f002 f808 	bl	80084ac <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800649c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d149      	bne.n	8006538 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	61bb      	str	r3, [r7, #24]
    }
 80064be:	bf00      	nop
 80064c0:	e7fe      	b.n	80064c0 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c2:	4b24      	ldr	r3, [pc, #144]	; (8006554 <xTaskGenericNotifyFromISR+0x214>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d120      	bne.n	800650c <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	3304      	adds	r3, #4
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fd fe6c 	bl	80041ac <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	4618      	mov	r0, r3
 80064d8:	f002 fc78 	bl	8008dcc <SEGGER_SYSVIEW_OnTaskStartReady>
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	2201      	movs	r2, #1
 80064e2:	409a      	lsls	r2, r3
 80064e4:	4b1c      	ldr	r3, [pc, #112]	; (8006558 <xTaskGenericNotifyFromISR+0x218>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <xTaskGenericNotifyFromISR+0x218>)
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4a18      	ldr	r2, [pc, #96]	; (800655c <xTaskGenericNotifyFromISR+0x21c>)
 80064fc:	441a      	add	r2, r3
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	3304      	adds	r3, #4
 8006502:	4619      	mov	r1, r3
 8006504:	4610      	mov	r0, r2
 8006506:	f7fd fdf4 	bl	80040f2 <vListInsertEnd>
 800650a:	e005      	b.n	8006518 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	3318      	adds	r3, #24
 8006510:	4619      	mov	r1, r3
 8006512:	4813      	ldr	r0, [pc, #76]	; (8006560 <xTaskGenericNotifyFromISR+0x220>)
 8006514:	f7fd fded 	bl	80040f2 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651c:	4b11      	ldr	r3, [pc, #68]	; (8006564 <xTaskGenericNotifyFromISR+0x224>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	429a      	cmp	r2, r3
 8006524:	d908      	bls.n	8006538 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800652c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652e:	2201      	movs	r2, #1
 8006530:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006532:	4b0d      	ldr	r3, [pc, #52]	; (8006568 <xTaskGenericNotifyFromISR+0x228>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f383 8811 	msr	BASEPRI, r3
    }
 8006542:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006546:	4618      	mov	r0, r3
 8006548:	3740      	adds	r7, #64	; 0x40
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	2000027c 	.word	0x2000027c
 8006554:	200002a0 	.word	0x200002a0
 8006558:	20000280 	.word	0x20000280
 800655c:	200001a4 	.word	0x200001a4
 8006560:	20000238 	.word	0x20000238
 8006564:	200001a0 	.word	0x200001a0
 8006568:	2000028c 	.word	0x2000028c

0800656c <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn;

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <xTaskGenericNotifyStateClear+0x26>
        __asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	60fb      	str	r3, [r7, #12]
    }
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <xTaskGenericNotifyStateClear+0x24>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <xTaskGenericNotifyStateClear+0x32>
 8006598:	4b10      	ldr	r3, [pc, #64]	; (80065dc <xTaskGenericNotifyStateClear+0x70>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	e000      	b.n	80065a0 <xTaskGenericNotifyStateClear+0x34>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	613b      	str	r3, [r7, #16]

        taskENTER_CRITICAL();
 80065a2:	f000 fd31 	bl	8007008 <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	4413      	add	r3, r2
 80065ac:	3354      	adds	r3, #84	; 0x54
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d108      	bne.n	80065c8 <xTaskGenericNotifyStateClear+0x5c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	4413      	add	r3, r2
 80065bc:	3354      	adds	r3, #84	; 0x54
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 80065c2:	2301      	movs	r3, #1
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	e001      	b.n	80065cc <xTaskGenericNotifyStateClear+0x60>
            }
            else
            {
                xReturn = pdFAIL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80065cc:	f000 fd4c 	bl	8007068 <vPortExitCritical>

        return xReturn;
 80065d0:	697b      	ldr	r3, [r7, #20]
    }
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	200001a0 	.word	0x200001a0

080065e0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80065ea:	4b32      	ldr	r3, [pc, #200]	; (80066b4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065f0:	4b31      	ldr	r3, [pc, #196]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3304      	adds	r3, #4
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fd fdd8 	bl	80041ac <uxListRemove>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006602:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	2201      	movs	r2, #1
 800660a:	fa02 f303 	lsl.w	r3, r2, r3
 800660e:	43da      	mvns	r2, r3
 8006610:	4b2a      	ldr	r3, [pc, #168]	; (80066bc <prvAddCurrentTaskToDelayedList+0xdc>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4013      	ands	r3, r2
 8006616:	4a29      	ldr	r2, [pc, #164]	; (80066bc <prvAddCurrentTaskToDelayedList+0xdc>)
 8006618:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d110      	bne.n	8006644 <prvAddCurrentTaskToDelayedList+0x64>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00d      	beq.n	8006644 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8006628:	4b23      	ldr	r3, [pc, #140]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	211b      	movs	r1, #27
 800662e:	4618      	mov	r0, r3
 8006630:	f002 fc0e 	bl	8008e50 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006634:	4b20      	ldr	r3, [pc, #128]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3304      	adds	r3, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4820      	ldr	r0, [pc, #128]	; (80066c0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800663e:	f7fd fd58 	bl	80040f2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006642:	e032      	b.n	80066aa <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4413      	add	r3, r2
 800664a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800664c:	4b1a      	ldr	r3, [pc, #104]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	429a      	cmp	r2, r3
 800665a:	d20f      	bcs.n	800667c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800665c:	4b16      	ldr	r3, [pc, #88]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2104      	movs	r1, #4
 8006662:	4618      	mov	r0, r3
 8006664:	f002 fbf4 	bl	8008e50 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006668:	4b16      	ldr	r3, [pc, #88]	; (80066c4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3304      	adds	r3, #4
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f7fd fd60 	bl	800413a <vListInsert>
}
 800667a:	e016      	b.n	80066aa <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800667c:	4b0e      	ldr	r3, [pc, #56]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2104      	movs	r1, #4
 8006682:	4618      	mov	r0, r3
 8006684:	f002 fbe4 	bl	8008e50 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006688:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fd fd50 	bl	800413a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800669a:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <prvAddCurrentTaskToDelayedList+0xec>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d202      	bcs.n	80066aa <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80066a4:	4a09      	ldr	r2, [pc, #36]	; (80066cc <prvAddCurrentTaskToDelayedList+0xec>)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6013      	str	r3, [r2, #0]
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	2000027c 	.word	0x2000027c
 80066b8:	200001a0 	.word	0x200001a0
 80066bc:	20000280 	.word	0x20000280
 80066c0:	20000264 	.word	0x20000264
 80066c4:	20000234 	.word	0x20000234
 80066c8:	20000230 	.word	0x20000230
 80066cc:	20000298 	.word	0x20000298

080066d0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80066da:	f000 fb31 	bl	8006d40 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80066de:	4b11      	ldr	r3, [pc, #68]	; (8006724 <xTimerCreateTimerTask+0x54>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80066e6:	4b10      	ldr	r3, [pc, #64]	; (8006728 <xTimerCreateTimerTask+0x58>)
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	2302      	movs	r3, #2
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	2300      	movs	r3, #0
 80066f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80066f4:	490d      	ldr	r1, [pc, #52]	; (800672c <xTimerCreateTimerTask+0x5c>)
 80066f6:	480e      	ldr	r0, [pc, #56]	; (8006730 <xTimerCreateTimerTask+0x60>)
 80066f8:	f7fe fe4c 	bl	8005394 <xTaskCreate>
 80066fc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	603b      	str	r3, [r7, #0]
    }
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800671a:	687b      	ldr	r3, [r7, #4]
    }
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	200002d4 	.word	0x200002d4
 8006728:	200002d8 	.word	0x200002d8
 800672c:	080097e0 	.word	0x080097e0
 8006730:	08006921 	.word	0x08006921

08006734 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006742:	202c      	movs	r0, #44	; 0x2c
 8006744:	f000 fd8a 	bl	800725c <pvPortMalloc>
 8006748:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00d      	beq.n	800676c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f805 	bl	8006776 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800676c:	697b      	ldr	r3, [r7, #20]
        }
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	617b      	str	r3, [r7, #20]
    }
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01e      	beq.n	80067e4 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80067a6:	f000 facb 	bl	8006d40 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	6a3a      	ldr	r2, [r7, #32]
 80067c0:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	3304      	adds	r3, #4
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fd fc86 	bl	80040d8 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067d8:	f043 0304 	orr.w	r3, r3, #4
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80067e4:	bf00      	nop
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	; 0x28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <xTimerGenericCommand+0x2e>
        __asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	623b      	str	r3, [r7, #32]
    }
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800681a:	4b1a      	ldr	r3, [pc, #104]	; (8006884 <xTimerGenericCommand+0x98>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d02a      	beq.n	8006878 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b05      	cmp	r3, #5
 8006832:	dc18      	bgt.n	8006866 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006834:	f7ff fb6c 	bl	8005f10 <xTaskGetSchedulerState>
 8006838:	4603      	mov	r3, r0
 800683a:	2b02      	cmp	r3, #2
 800683c:	d109      	bne.n	8006852 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800683e:	4b11      	ldr	r3, [pc, #68]	; (8006884 <xTimerGenericCommand+0x98>)
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	f107 0114 	add.w	r1, r7, #20
 8006846:	2300      	movs	r3, #0
 8006848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684a:	f7fd fdc9 	bl	80043e0 <xQueueGenericSend>
 800684e:	6278      	str	r0, [r7, #36]	; 0x24
 8006850:	e012      	b.n	8006878 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006852:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <xTimerGenericCommand+0x98>)
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	f107 0114 	add.w	r1, r7, #20
 800685a:	2300      	movs	r3, #0
 800685c:	2200      	movs	r2, #0
 800685e:	f7fd fdbf 	bl	80043e0 <xQueueGenericSend>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24
 8006864:	e008      	b.n	8006878 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006866:	4b07      	ldr	r3, [pc, #28]	; (8006884 <xTimerGenericCommand+0x98>)
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	f107 0114 	add.w	r1, r7, #20
 800686e:	2300      	movs	r3, #0
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	f7fd fedb 	bl	800462c <xQueueGenericSendFromISR>
 8006876:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800687a:	4618      	mov	r0, r3
 800687c:	3728      	adds	r7, #40	; 0x28
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	200002d4 	.word	0x200002d4

08006888 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af02      	add	r7, sp, #8
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006892:	4b22      	ldr	r3, [pc, #136]	; (800691c <prvProcessExpiredTimer+0x94>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	3304      	adds	r3, #4
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fd fc83 	bl	80041ac <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d022      	beq.n	80068fa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	699a      	ldr	r2, [r3, #24]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	18d1      	adds	r1, r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	6978      	ldr	r0, [r7, #20]
 80068c2:	f000 f8d1 	bl	8006a68 <prvInsertTimerInActiveList>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01f      	beq.n	800690c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068cc:	2300      	movs	r3, #0
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	2300      	movs	r3, #0
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	2100      	movs	r1, #0
 80068d6:	6978      	ldr	r0, [r7, #20]
 80068d8:	f7ff ff88 	bl	80067ec <xTimerGenericCommand>
 80068dc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d113      	bne.n	800690c <prvProcessExpiredTimer+0x84>
        __asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	60fb      	str	r3, [r7, #12]
    }
 80068f6:	bf00      	nop
 80068f8:	e7fe      	b.n	80068f8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006900:	f023 0301 	bic.w	r3, r3, #1
 8006904:	b2da      	uxtb	r2, r3
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	6978      	ldr	r0, [r7, #20]
 8006912:	4798      	blx	r3
    }
 8006914:	bf00      	nop
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	200002cc 	.word	0x200002cc

08006920 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006928:	f107 0308 	add.w	r3, r7, #8
 800692c:	4618      	mov	r0, r3
 800692e:	f000 f857 	bl	80069e0 <prvGetNextExpireTime>
 8006932:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4619      	mov	r1, r3
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f803 	bl	8006944 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800693e:	f000 f8d5 	bl	8006aec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006942:	e7f1      	b.n	8006928 <prvTimerTask+0x8>

08006944 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800694e:	f7fe fee7 	bl	8005720 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006952:	f107 0308 	add.w	r3, r7, #8
 8006956:	4618      	mov	r0, r3
 8006958:	f000 f866 	bl	8006a28 <prvSampleTimeNow>
 800695c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d130      	bne.n	80069c6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <prvProcessTimerOrBlockTask+0x3c>
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	429a      	cmp	r2, r3
 8006970:	d806      	bhi.n	8006980 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006972:	f7fe fee3 	bl	800573c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006976:	68f9      	ldr	r1, [r7, #12]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff ff85 	bl	8006888 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800697e:	e024      	b.n	80069ca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006986:	4b13      	ldr	r3, [pc, #76]	; (80069d4 <prvProcessTimerOrBlockTask+0x90>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <prvProcessTimerOrBlockTask+0x50>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <prvProcessTimerOrBlockTask+0x52>
 8006994:	2300      	movs	r3, #0
 8006996:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <prvProcessTimerOrBlockTask+0x94>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	4619      	mov	r1, r3
 80069a6:	f7fe f951 	bl	8004c4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80069aa:	f7fe fec7 	bl	800573c <xTaskResumeAll>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80069b4:	4b09      	ldr	r3, [pc, #36]	; (80069dc <prvProcessTimerOrBlockTask+0x98>)
 80069b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	f3bf 8f6f 	isb	sy
    }
 80069c4:	e001      	b.n	80069ca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80069c6:	f7fe feb9 	bl	800573c <xTaskResumeAll>
    }
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200002d0 	.word	0x200002d0
 80069d8:	200002d4 	.word	0x200002d4
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069e8:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <prvGetNextExpireTime+0x44>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <prvGetNextExpireTime+0x16>
 80069f2:	2201      	movs	r2, #1
 80069f4:	e000      	b.n	80069f8 <prvGetNextExpireTime+0x18>
 80069f6:	2200      	movs	r2, #0
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d105      	bne.n	8006a10 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a04:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <prvGetNextExpireTime+0x44>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	e001      	b.n	8006a14 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006a14:	68fb      	ldr	r3, [r7, #12]
    }
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	200002cc 	.word	0x200002cc

08006a28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006a30:	f7fe ff24 	bl	800587c <xTaskGetTickCount>
 8006a34:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <prvSampleTimeNow+0x3c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d205      	bcs.n	8006a4c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006a40:	f000 f91a 	bl	8006c78 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	e002      	b.n	8006a52 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006a52:	4a04      	ldr	r2, [pc, #16]	; (8006a64 <prvSampleTimeNow+0x3c>)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006a58:	68fb      	ldr	r3, [r7, #12]
    }
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200002dc 	.word	0x200002dc

08006a68 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d812      	bhi.n	8006ab4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	1ad2      	subs	r2, r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d302      	bcc.n	8006aa2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e01b      	b.n	8006ada <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006aa2:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <prvInsertTimerInActiveList+0x7c>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4610      	mov	r0, r2
 8006aae:	f7fd fb44 	bl	800413a <vListInsert>
 8006ab2:	e012      	b.n	8006ada <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d206      	bcs.n	8006aca <prvInsertTimerInActiveList+0x62>
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d302      	bcc.n	8006aca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e007      	b.n	8006ada <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006aca:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <prvInsertTimerInActiveList+0x80>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f7fd fb30 	bl	800413a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006ada:	697b      	ldr	r3, [r7, #20]
    }
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	200002d0 	.word	0x200002d0
 8006ae8:	200002cc 	.word	0x200002cc

08006aec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	; 0x30
 8006af0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006af2:	e0ae      	b.n	8006c52 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f2c0 80aa 	blt.w	8006c50 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fd fb4d 	bl	80041ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b12:	1d3b      	adds	r3, r7, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff87 	bl	8006a28 <prvSampleTimeNow>
 8006b1a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b09      	cmp	r3, #9
 8006b20:	f200 8097 	bhi.w	8006c52 <prvProcessReceivedCommands+0x166>
 8006b24:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <prvProcessReceivedCommands+0x40>)
 8006b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2a:	bf00      	nop
 8006b2c:	08006b55 	.word	0x08006b55
 8006b30:	08006b55 	.word	0x08006b55
 8006b34:	08006b55 	.word	0x08006b55
 8006b38:	08006bc9 	.word	0x08006bc9
 8006b3c:	08006bdd 	.word	0x08006bdd
 8006b40:	08006c27 	.word	0x08006c27
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006b55 	.word	0x08006b55
 8006b4c:	08006bc9 	.word	0x08006bc9
 8006b50:	08006bdd 	.word	0x08006bdd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b5a:	f043 0301 	orr.w	r3, r3, #1
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	18d1      	adds	r1, r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a3a      	ldr	r2, [r7, #32]
 8006b72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b74:	f7ff ff78 	bl	8006a68 <prvInsertTimerInActiveList>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d069      	beq.n	8006c52 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b84:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d05e      	beq.n	8006c52 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	441a      	add	r2, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ba6:	f7ff fe21 	bl	80067ec <xTimerGenericCommand>
 8006baa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d14f      	bne.n	8006c52 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	61bb      	str	r3, [r7, #24]
    }
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bce:	f023 0301 	bic.w	r3, r3, #1
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006bda:	e03a      	b.n	8006c52 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	617b      	str	r3, [r7, #20]
    }
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	18d1      	adds	r1, r2, r3
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	6a3a      	ldr	r2, [r7, #32]
 8006c1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c20:	f7ff ff22 	bl	8006a68 <prvInsertTimerInActiveList>
                        break;
 8006c24:	e015      	b.n	8006c52 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d103      	bne.n	8006c3c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c36:	f000 fbf1 	bl	800741c <vPortFree>
 8006c3a:	e00a      	b.n	8006c52 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006c4e:	e000      	b.n	8006c52 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006c50:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <prvProcessReceivedCommands+0x188>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f107 0108 	add.w	r1, r7, #8
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fd fda3 	bl	80047a8 <xQueueReceive>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f47f af45 	bne.w	8006af4 <prvProcessReceivedCommands+0x8>
        }
    }
 8006c6a:	bf00      	nop
 8006c6c:	bf00      	nop
 8006c6e:	3728      	adds	r7, #40	; 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	200002d4 	.word	0x200002d4

08006c78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c7e:	e048      	b.n	8006d12 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c80:	4b2d      	ldr	r3, [pc, #180]	; (8006d38 <prvSwitchTimerLists+0xc0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c8a:	4b2b      	ldr	r3, [pc, #172]	; (8006d38 <prvSwitchTimerLists+0xc0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fd fa87 	bl	80041ac <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d02e      	beq.n	8006d12 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4413      	add	r3, r2
 8006cbc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d90e      	bls.n	8006ce4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cd2:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <prvSwitchTimerLists+0xc0>)
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4610      	mov	r0, r2
 8006cde:	f7fd fa2c 	bl	800413a <vListInsert>
 8006ce2:	e016      	b.n	8006d12 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	2100      	movs	r1, #0
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff fd7c 	bl	80067ec <xTimerGenericCommand>
 8006cf4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	603b      	str	r3, [r7, #0]
    }
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d12:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <prvSwitchTimerLists+0xc0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1b1      	bne.n	8006c80 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <prvSwitchTimerLists+0xc0>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006d22:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <prvSwitchTimerLists+0xc4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a04      	ldr	r2, [pc, #16]	; (8006d38 <prvSwitchTimerLists+0xc0>)
 8006d28:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006d2a:	4a04      	ldr	r2, [pc, #16]	; (8006d3c <prvSwitchTimerLists+0xc4>)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	6013      	str	r3, [r2, #0]
    }
 8006d30:	bf00      	nop
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	200002cc 	.word	0x200002cc
 8006d3c:	200002d0 	.word	0x200002d0

08006d40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006d44:	f000 f960 	bl	8007008 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006d48:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <prvCheckForValidListAndQueue+0x54>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11d      	bne.n	8006d8c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006d50:	4811      	ldr	r0, [pc, #68]	; (8006d98 <prvCheckForValidListAndQueue+0x58>)
 8006d52:	f7fd f9a1 	bl	8004098 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006d56:	4811      	ldr	r0, [pc, #68]	; (8006d9c <prvCheckForValidListAndQueue+0x5c>)
 8006d58:	f7fd f99e 	bl	8004098 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006d5c:	4b10      	ldr	r3, [pc, #64]	; (8006da0 <prvCheckForValidListAndQueue+0x60>)
 8006d5e:	4a0e      	ldr	r2, [pc, #56]	; (8006d98 <prvCheckForValidListAndQueue+0x58>)
 8006d60:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006d62:	4b10      	ldr	r3, [pc, #64]	; (8006da4 <prvCheckForValidListAndQueue+0x64>)
 8006d64:	4a0d      	ldr	r2, [pc, #52]	; (8006d9c <prvCheckForValidListAndQueue+0x5c>)
 8006d66:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006d68:	2200      	movs	r2, #0
 8006d6a:	210c      	movs	r1, #12
 8006d6c:	200a      	movs	r0, #10
 8006d6e:	f7fd faaf 	bl	80042d0 <xQueueGenericCreate>
 8006d72:	4603      	mov	r3, r0
 8006d74:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <prvCheckForValidListAndQueue+0x54>)
 8006d76:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <prvCheckForValidListAndQueue+0x54>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d80:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <prvCheckForValidListAndQueue+0x54>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4908      	ldr	r1, [pc, #32]	; (8006da8 <prvCheckForValidListAndQueue+0x68>)
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fd ff2e 	bl	8004be8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006d8c:	f000 f96c 	bl	8007068 <vPortExitCritical>
    }
 8006d90:	bf00      	nop
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200002d4 	.word	0x200002d4
 8006d98:	200002a4 	.word	0x200002a4
 8006d9c:	200002b8 	.word	0x200002b8
 8006da0:	200002cc 	.word	0x200002cc
 8006da4:	200002d0 	.word	0x200002d0
 8006da8:	080097e8 	.word	0x080097e8

08006dac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3b04      	subs	r3, #4
 8006dbc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006dc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3b04      	subs	r3, #4
 8006dca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f023 0201 	bic.w	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3b04      	subs	r3, #4
 8006dda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006ddc:	4a0c      	ldr	r2, [pc, #48]	; (8006e10 <pxPortInitialiseStack+0x64>)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3b14      	subs	r3, #20
 8006de6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3b04      	subs	r3, #4
 8006df2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f06f 0202 	mvn.w	r2, #2
 8006dfa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3b20      	subs	r3, #32
 8006e00:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006e02:	68fb      	ldr	r3, [r7, #12]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	08006e15 	.word	0x08006e15

08006e14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006e1e:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <prvTaskExitError+0x54>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d00a      	beq.n	8006e3e <prvTaskExitError+0x2a>
        __asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	60fb      	str	r3, [r7, #12]
    }
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <prvTaskExitError+0x28>
        __asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	60bb      	str	r3, [r7, #8]
    }
 8006e50:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006e52:	bf00      	nop
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0fc      	beq.n	8006e54 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006e5a:	bf00      	nop
 8006e5c:	bf00      	nop
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	2000000c 	.word	0x2000000c
 8006e6c:	00000000 	.word	0x00000000

08006e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006e70:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <pxCurrentTCBConst2>)
 8006e72:	6819      	ldr	r1, [r3, #0]
 8006e74:	6808      	ldr	r0, [r1, #0]
 8006e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7a:	f380 8809 	msr	PSP, r0
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f380 8811 	msr	BASEPRI, r0
 8006e8a:	4770      	bx	lr
 8006e8c:	f3af 8000 	nop.w

08006e90 <pxCurrentTCBConst2>:
 8006e90:	200001a0 	.word	0x200001a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop

08006e98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006e98:	4808      	ldr	r0, [pc, #32]	; (8006ebc <prvPortStartFirstTask+0x24>)
 8006e9a:	6800      	ldr	r0, [r0, #0]
 8006e9c:	6800      	ldr	r0, [r0, #0]
 8006e9e:	f380 8808 	msr	MSP, r0
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8814 	msr	CONTROL, r0
 8006eaa:	b662      	cpsie	i
 8006eac:	b661      	cpsie	f
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	df00      	svc	0
 8006eb8:	bf00      	nop
 8006eba:	0000      	.short	0x0000
 8006ebc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop

08006ec4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006eca:	4b46      	ldr	r3, [pc, #280]	; (8006fe4 <xPortStartScheduler+0x120>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a46      	ldr	r2, [pc, #280]	; (8006fe8 <xPortStartScheduler+0x124>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d10a      	bne.n	8006eea <xPortStartScheduler+0x26>
        __asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	613b      	str	r3, [r7, #16]
    }
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006eea:	4b3e      	ldr	r3, [pc, #248]	; (8006fe4 <xPortStartScheduler+0x120>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a3f      	ldr	r2, [pc, #252]	; (8006fec <xPortStartScheduler+0x128>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d10a      	bne.n	8006f0a <xPortStartScheduler+0x46>
        __asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	60fb      	str	r3, [r7, #12]
    }
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f0a:	4b39      	ldr	r3, [pc, #228]	; (8006ff0 <xPortStartScheduler+0x12c>)
 8006f0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	22ff      	movs	r2, #255	; 0xff
 8006f1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	4b31      	ldr	r3, [pc, #196]	; (8006ff4 <xPortStartScheduler+0x130>)
 8006f30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f32:	4b31      	ldr	r3, [pc, #196]	; (8006ff8 <xPortStartScheduler+0x134>)
 8006f34:	2207      	movs	r2, #7
 8006f36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f38:	e009      	b.n	8006f4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006f3a:	4b2f      	ldr	r3, [pc, #188]	; (8006ff8 <xPortStartScheduler+0x134>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	4a2d      	ldr	r2, [pc, #180]	; (8006ff8 <xPortStartScheduler+0x134>)
 8006f42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f56:	2b80      	cmp	r3, #128	; 0x80
 8006f58:	d0ef      	beq.n	8006f3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f5a:	4b27      	ldr	r3, [pc, #156]	; (8006ff8 <xPortStartScheduler+0x134>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f1c3 0307 	rsb	r3, r3, #7
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d00a      	beq.n	8006f7c <xPortStartScheduler+0xb8>
        __asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	60bb      	str	r3, [r7, #8]
    }
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f7c:	4b1e      	ldr	r3, [pc, #120]	; (8006ff8 <xPortStartScheduler+0x134>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	4a1d      	ldr	r2, [pc, #116]	; (8006ff8 <xPortStartScheduler+0x134>)
 8006f84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f86:	4b1c      	ldr	r3, [pc, #112]	; (8006ff8 <xPortStartScheduler+0x134>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f8e:	4a1a      	ldr	r2, [pc, #104]	; (8006ff8 <xPortStartScheduler+0x134>)
 8006f90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006f9a:	4b18      	ldr	r3, [pc, #96]	; (8006ffc <xPortStartScheduler+0x138>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <xPortStartScheduler+0x138>)
 8006fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fa4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006fa6:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <xPortStartScheduler+0x138>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a14      	ldr	r2, [pc, #80]	; (8006ffc <xPortStartScheduler+0x138>)
 8006fac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006fb2:	f000 f8e3 	bl	800717c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006fb6:	4b12      	ldr	r3, [pc, #72]	; (8007000 <xPortStartScheduler+0x13c>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006fbc:	f000 f902 	bl	80071c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fc0:	4b10      	ldr	r3, [pc, #64]	; (8007004 <xPortStartScheduler+0x140>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a0f      	ldr	r2, [pc, #60]	; (8007004 <xPortStartScheduler+0x140>)
 8006fc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006fcc:	f7ff ff64 	bl	8006e98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006fd0:	f7fe fd32 	bl	8005a38 <vTaskSwitchContext>
    prvTaskExitError();
 8006fd4:	f7ff ff1e 	bl	8006e14 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	e000ed00 	.word	0xe000ed00
 8006fe8:	410fc271 	.word	0x410fc271
 8006fec:	410fc270 	.word	0x410fc270
 8006ff0:	e000e400 	.word	0xe000e400
 8006ff4:	200002e0 	.word	0x200002e0
 8006ff8:	200002e4 	.word	0x200002e4
 8006ffc:	e000ed20 	.word	0xe000ed20
 8007000:	2000000c 	.word	0x2000000c
 8007004:	e000ef34 	.word	0xe000ef34

08007008 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
        __asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	607b      	str	r3, [r7, #4]
    }
 8007020:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <vPortEnterCritical+0x58>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3301      	adds	r3, #1
 8007028:	4a0d      	ldr	r2, [pc, #52]	; (8007060 <vPortEnterCritical+0x58>)
 800702a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800702c:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <vPortEnterCritical+0x58>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d10f      	bne.n	8007054 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007034:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <vPortEnterCritical+0x5c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <vPortEnterCritical+0x4c>
        __asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	603b      	str	r3, [r7, #0]
    }
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <vPortEnterCritical+0x4a>
    }
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	2000000c 	.word	0x2000000c
 8007064:	e000ed04 	.word	0xe000ed04

08007068 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800706e:	4b12      	ldr	r3, [pc, #72]	; (80070b8 <vPortExitCritical+0x50>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <vPortExitCritical+0x24>
        __asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	607b      	str	r3, [r7, #4]
    }
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <vPortExitCritical+0x50>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3b01      	subs	r3, #1
 8007092:	4a09      	ldr	r2, [pc, #36]	; (80070b8 <vPortExitCritical+0x50>)
 8007094:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007096:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <vPortExitCritical+0x50>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d105      	bne.n	80070aa <vPortExitCritical+0x42>
 800709e:	2300      	movs	r3, #0
 80070a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	f383 8811 	msr	BASEPRI, r3
    }
 80070a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	2000000c 	.word	0x2000000c
 80070bc:	00000000 	.word	0x00000000

080070c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80070c0:	f3ef 8009 	mrs	r0, PSP
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	4b15      	ldr	r3, [pc, #84]	; (8007120 <pxCurrentTCBConst>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	f01e 0f10 	tst.w	lr, #16
 80070d0:	bf08      	it	eq
 80070d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070da:	6010      	str	r0, [r2, #0]
 80070dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070e4:	f380 8811 	msr	BASEPRI, r0
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f7fe fca2 	bl	8005a38 <vTaskSwitchContext>
 80070f4:	f04f 0000 	mov.w	r0, #0
 80070f8:	f380 8811 	msr	BASEPRI, r0
 80070fc:	bc09      	pop	{r0, r3}
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	6808      	ldr	r0, [r1, #0]
 8007102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007106:	f01e 0f10 	tst.w	lr, #16
 800710a:	bf08      	it	eq
 800710c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007110:	f380 8809 	msr	PSP, r0
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	f3af 8000 	nop.w

08007120 <pxCurrentTCBConst>:
 8007120:	200001a0 	.word	0x200001a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop

08007128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
        __asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	607b      	str	r3, [r7, #4]
    }
 8007140:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8007142:	f001 fd29 	bl	8008b98 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007146:	f7fe fbbb 	bl	80058c0 <xTaskIncrementTick>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d006      	beq.n	800715e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8007150:	f001 fd80 	bl	8008c54 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007154:	4b08      	ldr	r3, [pc, #32]	; (8007178 <SysTick_Handler+0x50>)
 8007156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	e001      	b.n	8007162 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800715e:	f001 fd5d 	bl	8008c1c <SEGGER_SYSVIEW_RecordExitISR>
 8007162:	2300      	movs	r3, #0
 8007164:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	f383 8811 	msr	BASEPRI, r3
    }
 800716c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007180:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <vPortSetupTimerInterrupt+0x34>)
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007186:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <vPortSetupTimerInterrupt+0x38>)
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800718c:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <vPortSetupTimerInterrupt+0x3c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a0a      	ldr	r2, [pc, #40]	; (80071bc <vPortSetupTimerInterrupt+0x40>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	099b      	lsrs	r3, r3, #6
 8007198:	4a09      	ldr	r2, [pc, #36]	; (80071c0 <vPortSetupTimerInterrupt+0x44>)
 800719a:	3b01      	subs	r3, #1
 800719c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800719e:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <vPortSetupTimerInterrupt+0x34>)
 80071a0:	2207      	movs	r2, #7
 80071a2:	601a      	str	r2, [r3, #0]
}
 80071a4:	bf00      	nop
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	e000e010 	.word	0xe000e010
 80071b4:	e000e018 	.word	0xe000e018
 80071b8:	20000000 	.word	0x20000000
 80071bc:	10624dd3 	.word	0x10624dd3
 80071c0:	e000e014 	.word	0xe000e014

080071c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80071c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071d4 <vPortEnableVFP+0x10>
 80071c8:	6801      	ldr	r1, [r0, #0]
 80071ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071ce:	6001      	str	r1, [r0, #0]
 80071d0:	4770      	bx	lr
 80071d2:	0000      	.short	0x0000
 80071d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop

080071dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80071e2:	f3ef 8305 	mrs	r3, IPSR
 80071e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b0f      	cmp	r3, #15
 80071ec:	d914      	bls.n	8007218 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071ee:	4a17      	ldr	r2, [pc, #92]	; (800724c <vPortValidateInterruptPriority+0x70>)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071f8:	4b15      	ldr	r3, [pc, #84]	; (8007250 <vPortValidateInterruptPriority+0x74>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	7afa      	ldrb	r2, [r7, #11]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d20a      	bcs.n	8007218 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	607b      	str	r3, [r7, #4]
    }
 8007214:	bf00      	nop
 8007216:	e7fe      	b.n	8007216 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007218:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <vPortValidateInterruptPriority+0x78>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007220:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <vPortValidateInterruptPriority+0x7c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d90a      	bls.n	800723e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	603b      	str	r3, [r7, #0]
    }
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <vPortValidateInterruptPriority+0x60>
    }
 800723e:	bf00      	nop
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	e000e3f0 	.word	0xe000e3f0
 8007250:	200002e0 	.word	0x200002e0
 8007254:	e000ed0c 	.word	0xe000ed0c
 8007258:	200002e4 	.word	0x200002e4

0800725c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007268:	f7fe fa5a 	bl	8005720 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800726c:	4b65      	ldr	r3, [pc, #404]	; (8007404 <pvPortMalloc+0x1a8>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007274:	f000 f934 	bl	80074e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007278:	4b63      	ldr	r3, [pc, #396]	; (8007408 <pvPortMalloc+0x1ac>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	f040 80a7 	bne.w	80073d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d02d      	beq.n	80072e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800728c:	2208      	movs	r2, #8
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d227      	bcs.n	80072e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007298:	2208      	movs	r2, #8
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d021      	beq.n	80072ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f023 0307 	bic.w	r3, r3, #7
 80072b0:	3308      	adds	r3, #8
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d214      	bcs.n	80072e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	3308      	adds	r3, #8
 80072c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d010      	beq.n	80072ee <pvPortMalloc+0x92>
        __asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	617b      	str	r3, [r7, #20]
    }
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072e6:	e002      	b.n	80072ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	607b      	str	r3, [r7, #4]
 80072ec:	e000      	b.n	80072f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d06e      	beq.n	80073d4 <pvPortMalloc+0x178>
 80072f6:	4b45      	ldr	r3, [pc, #276]	; (800740c <pvPortMalloc+0x1b0>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d869      	bhi.n	80073d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007300:	4b43      	ldr	r3, [pc, #268]	; (8007410 <pvPortMalloc+0x1b4>)
 8007302:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007304:	4b42      	ldr	r3, [pc, #264]	; (8007410 <pvPortMalloc+0x1b4>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800730a:	e004      	b.n	8007316 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d903      	bls.n	8007328 <pvPortMalloc+0xcc>
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1f1      	bne.n	800730c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007328:	4b36      	ldr	r3, [pc, #216]	; (8007404 <pvPortMalloc+0x1a8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732e:	429a      	cmp	r2, r3
 8007330:	d050      	beq.n	80073d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2208      	movs	r2, #8
 8007338:	4413      	add	r3, r2
 800733a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	2308      	movs	r3, #8
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	429a      	cmp	r2, r3
 8007352:	d91f      	bls.n	8007394 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4413      	add	r3, r2
 800735a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <pvPortMalloc+0x120>
        __asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	613b      	str	r3, [r7, #16]
    }
 8007378:	bf00      	nop
 800737a:	e7fe      	b.n	800737a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800738e:	69b8      	ldr	r0, [r7, #24]
 8007390:	f000 f908 	bl	80075a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007394:	4b1d      	ldr	r3, [pc, #116]	; (800740c <pvPortMalloc+0x1b0>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	4a1b      	ldr	r2, [pc, #108]	; (800740c <pvPortMalloc+0x1b0>)
 80073a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073a2:	4b1a      	ldr	r3, [pc, #104]	; (800740c <pvPortMalloc+0x1b0>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4b1b      	ldr	r3, [pc, #108]	; (8007414 <pvPortMalloc+0x1b8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d203      	bcs.n	80073b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073ae:	4b17      	ldr	r3, [pc, #92]	; (800740c <pvPortMalloc+0x1b0>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a18      	ldr	r2, [pc, #96]	; (8007414 <pvPortMalloc+0x1b8>)
 80073b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	4b13      	ldr	r3, [pc, #76]	; (8007408 <pvPortMalloc+0x1ac>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	431a      	orrs	r2, r3
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80073ca:	4b13      	ldr	r3, [pc, #76]	; (8007418 <pvPortMalloc+0x1bc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3301      	adds	r3, #1
 80073d0:	4a11      	ldr	r2, [pc, #68]	; (8007418 <pvPortMalloc+0x1bc>)
 80073d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80073d4:	f7fe f9b2 	bl	800573c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <pvPortMalloc+0x19c>
        __asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60fb      	str	r3, [r7, #12]
    }
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80073f8:	69fb      	ldr	r3, [r7, #28]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3728      	adds	r7, #40	; 0x28
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20012ef0 	.word	0x20012ef0
 8007408:	20012f04 	.word	0x20012f04
 800740c:	20012ef4 	.word	0x20012ef4
 8007410:	20012ee8 	.word	0x20012ee8
 8007414:	20012ef8 	.word	0x20012ef8
 8007418:	20012efc 	.word	0x20012efc

0800741c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d04d      	beq.n	80074ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800742e:	2308      	movs	r3, #8
 8007430:	425b      	negs	r3, r3
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4413      	add	r3, r2
 8007436:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <vPortFree+0xb8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4013      	ands	r3, r2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10a      	bne.n	8007460 <vPortFree+0x44>
        __asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	60fb      	str	r3, [r7, #12]
    }
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <vPortFree+0x62>
        __asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	60bb      	str	r3, [r7, #8]
    }
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	4b14      	ldr	r3, [pc, #80]	; (80074d4 <vPortFree+0xb8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4013      	ands	r3, r2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01e      	beq.n	80074ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d11a      	bne.n	80074ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	4b0e      	ldr	r3, [pc, #56]	; (80074d4 <vPortFree+0xb8>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	43db      	mvns	r3, r3
 800749e:	401a      	ands	r2, r3
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80074a4:	f7fe f93c 	bl	8005720 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <vPortFree+0xbc>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4413      	add	r3, r2
 80074b2:	4a09      	ldr	r2, [pc, #36]	; (80074d8 <vPortFree+0xbc>)
 80074b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074b6:	6938      	ldr	r0, [r7, #16]
 80074b8:	f000 f874 	bl	80075a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80074bc:	4b07      	ldr	r3, [pc, #28]	; (80074dc <vPortFree+0xc0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3301      	adds	r3, #1
 80074c2:	4a06      	ldr	r2, [pc, #24]	; (80074dc <vPortFree+0xc0>)
 80074c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80074c6:	f7fe f939 	bl	800573c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80074ca:	bf00      	nop
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20012f04 	.word	0x20012f04
 80074d8:	20012ef4 	.word	0x20012ef4
 80074dc:	20012f00 	.word	0x20012f00

080074e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80074ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80074ec:	4b27      	ldr	r3, [pc, #156]	; (800758c <prvHeapInit+0xac>)
 80074ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00c      	beq.n	8007514 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3307      	adds	r3, #7
 80074fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0307 	bic.w	r3, r3, #7
 8007506:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	4a1f      	ldr	r2, [pc, #124]	; (800758c <prvHeapInit+0xac>)
 8007510:	4413      	add	r3, r2
 8007512:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007518:	4a1d      	ldr	r2, [pc, #116]	; (8007590 <prvHeapInit+0xb0>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800751e:	4b1c      	ldr	r3, [pc, #112]	; (8007590 <prvHeapInit+0xb0>)
 8007520:	2200      	movs	r2, #0
 8007522:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	4413      	add	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800752c:	2208      	movs	r2, #8
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 0307 	bic.w	r3, r3, #7
 800753a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4a15      	ldr	r2, [pc, #84]	; (8007594 <prvHeapInit+0xb4>)
 8007540:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007542:	4b14      	ldr	r3, [pc, #80]	; (8007594 <prvHeapInit+0xb4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2200      	movs	r2, #0
 8007548:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800754a:	4b12      	ldr	r3, [pc, #72]	; (8007594 <prvHeapInit+0xb4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	1ad2      	subs	r2, r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007560:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <prvHeapInit+0xb4>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	4a0a      	ldr	r2, [pc, #40]	; (8007598 <prvHeapInit+0xb8>)
 800756e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4a09      	ldr	r2, [pc, #36]	; (800759c <prvHeapInit+0xbc>)
 8007576:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <prvHeapInit+0xc0>)
 800757a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800757e:	601a      	str	r2, [r3, #0]
}
 8007580:	bf00      	nop
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	200002e8 	.word	0x200002e8
 8007590:	20012ee8 	.word	0x20012ee8
 8007594:	20012ef0 	.word	0x20012ef0
 8007598:	20012ef8 	.word	0x20012ef8
 800759c:	20012ef4 	.word	0x20012ef4
 80075a0:	20012f04 	.word	0x20012f04

080075a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075ac:	4b28      	ldr	r3, [pc, #160]	; (8007650 <prvInsertBlockIntoFreeList+0xac>)
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	e002      	b.n	80075b8 <prvInsertBlockIntoFreeList+0x14>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d8f7      	bhi.n	80075b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	4413      	add	r3, r2
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d108      	bne.n	80075e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	441a      	add	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	441a      	add	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d118      	bne.n	800762c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b15      	ldr	r3, [pc, #84]	; (8007654 <prvInsertBlockIntoFreeList+0xb0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d00d      	beq.n	8007622 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	441a      	add	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	e008      	b.n	8007634 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007622:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <prvInsertBlockIntoFreeList+0xb0>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	e003      	b.n	8007634 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	429a      	cmp	r2, r3
 800763a:	d002      	beq.n	8007642 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007642:	bf00      	nop
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	20012ee8 	.word	0x20012ee8
 8007654:	20012ef0 	.word	0x20012ef0

08007658 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800765e:	4b26      	ldr	r3, [pc, #152]	; (80076f8 <_DoInit+0xa0>)
 8007660:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8007662:	22a8      	movs	r2, #168	; 0xa8
 8007664:	2100      	movs	r1, #0
 8007666:	6838      	ldr	r0, [r7, #0]
 8007668:	f001 ff86 	bl	8009578 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2203      	movs	r2, #3
 8007670:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2203      	movs	r2, #3
 8007676:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	4a20      	ldr	r2, [pc, #128]	; (80076fc <_DoInit+0xa4>)
 800767c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	4a1f      	ldr	r2, [pc, #124]	; (8007700 <_DoInit+0xa8>)
 8007682:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800768a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2200      	movs	r2, #0
 8007696:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2200      	movs	r2, #0
 800769c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	4a16      	ldr	r2, [pc, #88]	; (80076fc <_DoInit+0xa4>)
 80076a2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	4a17      	ldr	r2, [pc, #92]	; (8007704 <_DoInit+0xac>)
 80076a8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2210      	movs	r2, #16
 80076ae:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2200      	movs	r2, #0
 80076ba:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2200      	movs	r2, #0
 80076c0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80076c2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80076c6:	2300      	movs	r3, #0
 80076c8:	607b      	str	r3, [r7, #4]
 80076ca:	e00c      	b.n	80076e6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f1c3 030f 	rsb	r3, r3, #15
 80076d2:	4a0d      	ldr	r2, [pc, #52]	; (8007708 <_DoInit+0xb0>)
 80076d4:	5cd1      	ldrb	r1, [r2, r3]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	460a      	mov	r2, r1
 80076de:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3301      	adds	r3, #1
 80076e4:	607b      	str	r3, [r7, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b0f      	cmp	r3, #15
 80076ea:	d9ef      	bls.n	80076cc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80076ec:	f3bf 8f5f 	dmb	sy
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20012f08 	.word	0x20012f08
 80076fc:	080097f0 	.word	0x080097f0
 8007700:	20012fb0 	.word	0x20012fb0
 8007704:	200133b0 	.word	0x200133b0
 8007708:	080098e4 	.word	0x080098e4

0800770c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800770c:	b580      	push	{r7, lr}
 800770e:	b08c      	sub	sp, #48	; 0x30
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007718:	4b3e      	ldr	r3, [pc, #248]	; (8007814 <SEGGER_RTT_ReadNoLock+0x108>)
 800771a:	623b      	str	r3, [r7, #32]
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <SEGGER_RTT_ReadNoLock+0x1e>
 8007726:	f7ff ff97 	bl	8007658 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4613      	mov	r3, r2
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	4413      	add	r3, r2
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	3360      	adds	r3, #96	; 0x60
 8007736:	4a37      	ldr	r2, [pc, #220]	; (8007814 <SEGGER_RTT_ReadNoLock+0x108>)
 8007738:	4413      	add	r3, r2
 800773a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800774c:	2300      	movs	r3, #0
 800774e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	429a      	cmp	r2, r3
 8007756:	d92b      	bls.n	80077b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4293      	cmp	r3, r2
 8007768:	bf28      	it	cs
 800776a:	4613      	movcs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	4413      	add	r3, r2
 8007776:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	6939      	ldr	r1, [r7, #16]
 800777c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800777e:	f001 feed 	bl	800955c <memcpy>
    NumBytesRead += NumBytesRem;
 8007782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	4413      	add	r3, r2
 8007788:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800778a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	4413      	add	r3, r2
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800779a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	4413      	add	r3, r2
 80077a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d101      	bne.n	80077b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80077ac:	2300      	movs	r3, #0
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4293      	cmp	r3, r2
 80077be:	bf28      	it	cs
 80077c0:	4613      	movcs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d019      	beq.n	80077fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	4413      	add	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	6939      	ldr	r1, [r7, #16]
 80077d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077da:	f001 febf 	bl	800955c <memcpy>
    NumBytesRead += NumBytesRem;
 80077de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	4413      	add	r3, r2
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80077e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	4413      	add	r3, r2
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80077f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	4413      	add	r3, r2
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007808:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800780c:	4618      	mov	r0, r3
 800780e:	3730      	adds	r7, #48	; 0x30
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20012f08 	.word	0x20012f08

08007818 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007826:	4b3d      	ldr	r3, [pc, #244]	; (800791c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007828:	61bb      	str	r3, [r7, #24]
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007834:	f7ff ff10 	bl	8007658 <_DoInit>
  SEGGER_RTT_LOCK();
 8007838:	f3ef 8311 	mrs	r3, BASEPRI
 800783c:	f04f 0120 	mov.w	r1, #32
 8007840:	f381 8811 	msr	BASEPRI, r1
 8007844:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007846:	4b35      	ldr	r3, [pc, #212]	; (800791c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007848:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800784e:	6939      	ldr	r1, [r7, #16]
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	4613      	mov	r3, r2
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	4413      	add	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	440b      	add	r3, r1
 800785e:	3304      	adds	r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d008      	beq.n	8007878 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	3301      	adds	r3, #1
 800786a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	69fa      	ldr	r2, [r7, #28]
 8007872:	429a      	cmp	r2, r3
 8007874:	dbeb      	blt.n	800784e <SEGGER_RTT_AllocUpBuffer+0x36>
 8007876:	e000      	b.n	800787a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007878:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	429a      	cmp	r2, r3
 8007882:	da3f      	bge.n	8007904 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007884:	6939      	ldr	r1, [r7, #16]
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	4613      	mov	r3, r2
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	4413      	add	r3, r2
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	440b      	add	r3, r1
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007898:	6939      	ldr	r1, [r7, #16]
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	4613      	mov	r3, r2
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	4413      	add	r3, r2
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	440b      	add	r3, r1
 80078a8:	3304      	adds	r3, #4
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80078ae:	6939      	ldr	r1, [r7, #16]
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	4613      	mov	r3, r2
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	4413      	add	r3, r2
 80078b8:	00db      	lsls	r3, r3, #3
 80078ba:	440b      	add	r3, r1
 80078bc:	3320      	adds	r3, #32
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80078c2:	6939      	ldr	r1, [r7, #16]
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	4613      	mov	r3, r2
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	4413      	add	r3, r2
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	440b      	add	r3, r1
 80078d0:	3328      	adds	r3, #40	; 0x28
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80078d6:	6939      	ldr	r1, [r7, #16]
 80078d8:	69fa      	ldr	r2, [r7, #28]
 80078da:	4613      	mov	r3, r2
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	4413      	add	r3, r2
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	440b      	add	r3, r1
 80078e4:	3324      	adds	r3, #36	; 0x24
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80078ea:	6939      	ldr	r1, [r7, #16]
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	4613      	mov	r3, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4413      	add	r3, r2
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	440b      	add	r3, r1
 80078f8:	332c      	adds	r3, #44	; 0x2c
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80078fe:	f3bf 8f5f 	dmb	sy
 8007902:	e002      	b.n	800790a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007904:	f04f 33ff 	mov.w	r3, #4294967295
 8007908:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007910:	69fb      	ldr	r3, [r7, #28]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3720      	adds	r7, #32
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20012f08 	.word	0x20012f08

08007920 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800792e:	4b21      	ldr	r3, [pc, #132]	; (80079b4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007930:	623b      	str	r3, [r7, #32]
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800793c:	f7ff fe8c 	bl	8007658 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007940:	4b1c      	ldr	r3, [pc, #112]	; (80079b4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007942:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b02      	cmp	r3, #2
 8007948:	d82c      	bhi.n	80079a4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800794a:	f3ef 8311 	mrs	r3, BASEPRI
 800794e:	f04f 0120 	mov.w	r1, #32
 8007952:	f381 8811 	msr	BASEPRI, r1
 8007956:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4613      	mov	r3, r2
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	4413      	add	r3, r2
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	3360      	adds	r3, #96	; 0x60
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	4413      	add	r3, r2
 8007968:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00e      	beq.n	800798e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2200      	movs	r2, #0
 8007986:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2200      	movs	r2, #0
 800798c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007992:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007994:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800799e:	2300      	movs	r3, #0
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
 80079a2:	e002      	b.n	80079aa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3728      	adds	r7, #40	; 0x28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20012f08 	.word	0x20012f08

080079b8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00f      	beq.n	80079ee <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80079ce:	e002      	b.n	80079d6 <_EncodeStr+0x1e>
      Len++;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	3301      	adds	r3, #1
 80079d4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	4413      	add	r3, r2
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f6      	bne.n	80079d0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d901      	bls.n	80079ee <_EncodeStr+0x36>
      Len = Limit;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2bfe      	cmp	r3, #254	; 0xfe
 80079f2:	d806      	bhi.n	8007a02 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	60fa      	str	r2, [r7, #12]
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	b2d2      	uxtb	r2, r2
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e011      	b.n	8007a26 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	60fa      	str	r2, [r7, #12]
 8007a08:	22ff      	movs	r2, #255	; 0xff
 8007a0a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	60fa      	str	r2, [r7, #12]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	b2d2      	uxtb	r2, r2
 8007a16:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	0a19      	lsrs	r1, r3, #8
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	60fa      	str	r2, [r7, #12]
 8007a22:	b2ca      	uxtb	r2, r1
 8007a24:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007a2a:	e00a      	b.n	8007a42 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	1c53      	adds	r3, r2, #1
 8007a30:	60bb      	str	r3, [r7, #8]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	1c59      	adds	r1, r3, #1
 8007a36:	60f9      	str	r1, [r7, #12]
 8007a38:	7812      	ldrb	r2, [r2, #0]
 8007a3a:	701a      	strb	r2, [r3, #0]
    n++;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d3f0      	bcc.n	8007a2c <_EncodeStr+0x74>
  }
  return pPayload;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3307      	adds	r3, #7
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007a76:	4b35      	ldr	r3, [pc, #212]	; (8007b4c <_HandleIncomingPacket+0xdc>)
 8007a78:	7e1b      	ldrb	r3, [r3, #24]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	1cfb      	adds	r3, r7, #3
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4619      	mov	r1, r3
 8007a82:	f7ff fe43 	bl	800770c <SEGGER_RTT_ReadNoLock>
 8007a86:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d052      	beq.n	8007b34 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	2b80      	cmp	r3, #128	; 0x80
 8007a92:	d031      	beq.n	8007af8 <_HandleIncomingPacket+0x88>
 8007a94:	2b80      	cmp	r3, #128	; 0x80
 8007a96:	dc40      	bgt.n	8007b1a <_HandleIncomingPacket+0xaa>
 8007a98:	2b07      	cmp	r3, #7
 8007a9a:	dc15      	bgt.n	8007ac8 <_HandleIncomingPacket+0x58>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dd3c      	ble.n	8007b1a <_HandleIncomingPacket+0xaa>
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	2b06      	cmp	r3, #6
 8007aa4:	d839      	bhi.n	8007b1a <_HandleIncomingPacket+0xaa>
 8007aa6:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <_HandleIncomingPacket+0x3c>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007acf 	.word	0x08007acf
 8007ab0:	08007ad5 	.word	0x08007ad5
 8007ab4:	08007adb 	.word	0x08007adb
 8007ab8:	08007ae1 	.word	0x08007ae1
 8007abc:	08007ae7 	.word	0x08007ae7
 8007ac0:	08007aed 	.word	0x08007aed
 8007ac4:	08007af3 	.word	0x08007af3
 8007ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8007aca:	d035      	beq.n	8007b38 <_HandleIncomingPacket+0xc8>
 8007acc:	e025      	b.n	8007b1a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007ace:	f000 fd9b 	bl	8008608 <SEGGER_SYSVIEW_Start>
      break;
 8007ad2:	e036      	b.n	8007b42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007ad4:	f000 fe52 	bl	800877c <SEGGER_SYSVIEW_Stop>
      break;
 8007ad8:	e033      	b.n	8007b42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007ada:	f001 f82b 	bl	8008b34 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007ade:	e030      	b.n	8007b42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007ae0:	f000 fff0 	bl	8008ac4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007ae4:	e02d      	b.n	8007b42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007ae6:	f000 fe6f 	bl	80087c8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007aea:	e02a      	b.n	8007b42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007aec:	f001 fabe 	bl	800906c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007af0:	e027      	b.n	8007b42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007af2:	f001 fa9d 	bl	8009030 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007af6:	e024      	b.n	8007b42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007af8:	4b14      	ldr	r3, [pc, #80]	; (8007b4c <_HandleIncomingPacket+0xdc>)
 8007afa:	7e1b      	ldrb	r3, [r3, #24]
 8007afc:	4618      	mov	r0, r3
 8007afe:	1cfb      	adds	r3, r7, #3
 8007b00:	2201      	movs	r2, #1
 8007b02:	4619      	mov	r1, r3
 8007b04:	f7ff fe02 	bl	800770c <SEGGER_RTT_ReadNoLock>
 8007b08:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d015      	beq.n	8007b3c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f001 fa0c 	bl	8008f30 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007b18:	e010      	b.n	8007b3c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	b25b      	sxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	da0e      	bge.n	8007b40 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007b22:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <_HandleIncomingPacket+0xdc>)
 8007b24:	7e1b      	ldrb	r3, [r3, #24]
 8007b26:	4618      	mov	r0, r3
 8007b28:	1cfb      	adds	r3, r7, #3
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f7ff fded 	bl	800770c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007b32:	e005      	b.n	8007b40 <_HandleIncomingPacket+0xd0>
    }
  }
 8007b34:	bf00      	nop
 8007b36:	e004      	b.n	8007b42 <_HandleIncomingPacket+0xd2>
      break;
 8007b38:	bf00      	nop
 8007b3a:	e002      	b.n	8007b42 <_HandleIncomingPacket+0xd2>
      break;
 8007b3c:	bf00      	nop
 8007b3e:	e000      	b.n	8007b42 <_HandleIncomingPacket+0xd2>
      break;
 8007b40:	bf00      	nop
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	200143c8 	.word	0x200143c8

08007b50 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08c      	sub	sp, #48	; 0x30
 8007b54:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007b56:	2301      	movs	r3, #1
 8007b58:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007b5a:	1d3b      	adds	r3, r7, #4
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b64:	4b31      	ldr	r3, [pc, #196]	; (8007c2c <_TrySendOverflowPacket+0xdc>)
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b6a:	e00b      	b.n	8007b84 <_TrySendOverflowPacket+0x34>
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b72:	1c59      	adds	r1, r3, #1
 8007b74:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007b76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	09db      	lsrs	r3, r3, #7
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	2b7f      	cmp	r3, #127	; 0x7f
 8007b88:	d8f0      	bhi.n	8007b6c <_TrySendOverflowPacket+0x1c>
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	701a      	strb	r2, [r3, #0]
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007b9a:	4b25      	ldr	r3, [pc, #148]	; (8007c30 <_TrySendOverflowPacket+0xe0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007ba0:	4b22      	ldr	r3, [pc, #136]	; (8007c2c <_TrySendOverflowPacket+0xdc>)
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	623b      	str	r3, [r7, #32]
 8007bb2:	e00b      	b.n	8007bcc <_TrySendOverflowPacket+0x7c>
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	1c59      	adds	r1, r3, #1
 8007bbc:	6279      	str	r1, [r7, #36]	; 0x24
 8007bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	09db      	lsrs	r3, r3, #7
 8007bca:	623b      	str	r3, [r7, #32]
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	2b7f      	cmp	r3, #127	; 0x7f
 8007bd0:	d8f0      	bhi.n	8007bb4 <_TrySendOverflowPacket+0x64>
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	627a      	str	r2, [r7, #36]	; 0x24
 8007bd8:	6a3a      	ldr	r2, [r7, #32]
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8007be2:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <_TrySendOverflowPacket+0xdc>)
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	4618      	mov	r0, r3
 8007be8:	1d3b      	adds	r3, r7, #4
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	461a      	mov	r2, r3
 8007bf0:	1d3b      	adds	r3, r7, #4
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	f7f8 fafc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007c02:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <_TrySendOverflowPacket+0xdc>)
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007c08:	4b08      	ldr	r3, [pc, #32]	; (8007c2c <_TrySendOverflowPacket+0xdc>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <_TrySendOverflowPacket+0xdc>)
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e004      	b.n	8007c20 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007c16:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <_TrySendOverflowPacket+0xdc>)
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	4a03      	ldr	r2, [pc, #12]	; (8007c2c <_TrySendOverflowPacket+0xdc>)
 8007c1e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007c20:	693b      	ldr	r3, [r7, #16]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3730      	adds	r7, #48	; 0x30
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	200143c8 	.word	0x200143c8
 8007c30:	e0001004 	.word	0xe0001004

08007c34 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08a      	sub	sp, #40	; 0x28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007c40:	4b98      	ldr	r3, [pc, #608]	; (8007ea4 <_SendPacket+0x270>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d010      	beq.n	8007c6a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007c48:	4b96      	ldr	r3, [pc, #600]	; (8007ea4 <_SendPacket+0x270>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 812d 	beq.w	8007eac <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007c52:	4b94      	ldr	r3, [pc, #592]	; (8007ea4 <_SendPacket+0x270>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d109      	bne.n	8007c6e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007c5a:	f7ff ff79 	bl	8007b50 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007c5e:	4b91      	ldr	r3, [pc, #580]	; (8007ea4 <_SendPacket+0x270>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	f040 8124 	bne.w	8007eb0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8007c68:	e001      	b.n	8007c6e <_SendPacket+0x3a>
    goto Send;
 8007c6a:	bf00      	nop
 8007c6c:	e000      	b.n	8007c70 <_SendPacket+0x3c>
Send:
 8007c6e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b1f      	cmp	r3, #31
 8007c74:	d809      	bhi.n	8007c8a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007c76:	4b8b      	ldr	r3, [pc, #556]	; (8007ea4 <_SendPacket+0x270>)
 8007c78:	69da      	ldr	r2, [r3, #28]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f040 8115 	bne.w	8007eb4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b17      	cmp	r3, #23
 8007c8e:	d807      	bhi.n	8007ca0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e0c4      	b.n	8007e2a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	2b7f      	cmp	r3, #127	; 0x7f
 8007cac:	d912      	bls.n	8007cd4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	09da      	lsrs	r2, r3, #7
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	b2d2      	uxtb	r2, r2
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	3a01      	subs	r2, #1
 8007cc6:	60fa      	str	r2, [r7, #12]
 8007cc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e006      	b.n	8007ce2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b7e      	cmp	r3, #126	; 0x7e
 8007ce6:	d807      	bhi.n	8007cf8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e098      	b.n	8007e2a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cfe:	d212      	bcs.n	8007d26 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	09da      	lsrs	r2, r3, #7
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	3a01      	subs	r2, #1
 8007d18:	60fa      	str	r2, [r7, #12]
 8007d1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	e081      	b.n	8007e2a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d2c:	d21d      	bcs.n	8007d6a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	0b9a      	lsrs	r2, r3, #14
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	b2d2      	uxtb	r2, r2
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	09db      	lsrs	r3, r3, #7
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	3a01      	subs	r2, #1
 8007d48:	60fa      	str	r2, [r7, #12]
 8007d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	3a01      	subs	r2, #1
 8007d5c:	60fa      	str	r2, [r7, #12]
 8007d5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	701a      	strb	r2, [r3, #0]
 8007d68:	e05f      	b.n	8007e2a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d70:	d228      	bcs.n	8007dc4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	0d5a      	lsrs	r2, r3, #21
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	b2d2      	uxtb	r2, r2
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	0b9b      	lsrs	r3, r3, #14
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	3a01      	subs	r2, #1
 8007d8c:	60fa      	str	r2, [r7, #12]
 8007d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	09db      	lsrs	r3, r3, #7
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	3a01      	subs	r2, #1
 8007da2:	60fa      	str	r2, [r7, #12]
 8007da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	3a01      	subs	r2, #1
 8007db6:	60fa      	str	r2, [r7, #12]
 8007db8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	e032      	b.n	8007e2a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	0f1a      	lsrs	r2, r3, #28
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	0d5b      	lsrs	r3, r3, #21
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	3a01      	subs	r2, #1
 8007dde:	60fa      	str	r2, [r7, #12]
 8007de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	0b9b      	lsrs	r3, r3, #14
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	3a01      	subs	r2, #1
 8007df4:	60fa      	str	r2, [r7, #12]
 8007df6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	09db      	lsrs	r3, r3, #7
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	3a01      	subs	r2, #1
 8007e0a:	60fa      	str	r2, [r7, #12]
 8007e0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	3a01      	subs	r2, #1
 8007e1e:	60fa      	str	r2, [r7, #12]
 8007e20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007e2a:	4b1f      	ldr	r3, [pc, #124]	; (8007ea8 <_SendPacket+0x274>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007e30:	4b1c      	ldr	r3, [pc, #112]	; (8007ea4 <_SendPacket+0x270>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	623b      	str	r3, [r7, #32]
 8007e42:	e00b      	b.n	8007e5c <_SendPacket+0x228>
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	1c59      	adds	r1, r3, #1
 8007e4c:	6279      	str	r1, [r7, #36]	; 0x24
 8007e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e52:	b2d2      	uxtb	r2, r2
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	09db      	lsrs	r3, r3, #7
 8007e5a:	623b      	str	r3, [r7, #32]
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e60:	d8f0      	bhi.n	8007e44 <_SendPacket+0x210>
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	627a      	str	r2, [r7, #36]	; 0x24
 8007e68:	6a3a      	ldr	r2, [r7, #32]
 8007e6a:	b2d2      	uxtb	r2, r2
 8007e6c:	701a      	strb	r2, [r3, #0]
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8007e72:	4b0c      	ldr	r3, [pc, #48]	; (8007ea4 <_SendPacket+0x270>)
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	4618      	mov	r0, r3
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68f9      	ldr	r1, [r7, #12]
 8007e82:	f7f8 f9b5 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007e86:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007e8e:	4a05      	ldr	r2, [pc, #20]	; (8007ea4 <_SendPacket+0x270>)
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	60d3      	str	r3, [r2, #12]
 8007e94:	e00f      	b.n	8007eb6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007e96:	4b03      	ldr	r3, [pc, #12]	; (8007ea4 <_SendPacket+0x270>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	4b01      	ldr	r3, [pc, #4]	; (8007ea4 <_SendPacket+0x270>)
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	e008      	b.n	8007eb6 <_SendPacket+0x282>
 8007ea4:	200143c8 	.word	0x200143c8
 8007ea8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8007eac:	bf00      	nop
 8007eae:	e002      	b.n	8007eb6 <_SendPacket+0x282>
      goto SendDone;
 8007eb0:	bf00      	nop
 8007eb2:	e000      	b.n	8007eb6 <_SendPacket+0x282>
      goto SendDone;
 8007eb4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <_SendPacket+0x2d4>)
 8007eb8:	7e1b      	ldrb	r3, [r3, #24]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4a13      	ldr	r2, [pc, #76]	; (8007f0c <_SendPacket+0x2d8>)
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	440b      	add	r3, r1
 8007ec4:	00db      	lsls	r3, r3, #3
 8007ec6:	4413      	add	r3, r2
 8007ec8:	336c      	adds	r3, #108	; 0x6c
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <_SendPacket+0x2d4>)
 8007ece:	7e1b      	ldrb	r3, [r3, #24]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	490e      	ldr	r1, [pc, #56]	; (8007f0c <_SendPacket+0x2d8>)
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	4403      	add	r3, r0
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	440b      	add	r3, r1
 8007ede:	3370      	adds	r3, #112	; 0x70
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d00b      	beq.n	8007efe <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007ee6:	4b08      	ldr	r3, [pc, #32]	; (8007f08 <_SendPacket+0x2d4>)
 8007ee8:	789b      	ldrb	r3, [r3, #2]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d107      	bne.n	8007efe <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007eee:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <_SendPacket+0x2d4>)
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007ef4:	f7ff fdbc 	bl	8007a70 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007ef8:	4b03      	ldr	r3, [pc, #12]	; (8007f08 <_SendPacket+0x2d4>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007efe:	bf00      	nop
 8007f00:	3728      	adds	r7, #40	; 0x28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	200143c8 	.word	0x200143c8
 8007f0c:	20012f08 	.word	0x20012f08

08007f10 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b0a2      	sub	sp, #136	; 0x88
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8007f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8007f32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01d      	beq.n	8007f76 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8007f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f3e:	2b25      	cmp	r3, #37	; 0x25
 8007f40:	d1f1      	bne.n	8007f26 <_VPrintHost+0x16>
      c = *p;
 8007f42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	1d19      	adds	r1, r3, #4
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	6011      	str	r1, [r2, #0]
 8007f54:	6819      	ldr	r1, [r3, #0]
 8007f56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f60:	460a      	mov	r2, r1
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	3388      	adds	r3, #136	; 0x88
 8007f66:	443b      	add	r3, r7
 8007f68:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8007f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	d002      	beq.n	8007f7a <_VPrintHost+0x6a>
    c = *p++;
 8007f74:	e7d7      	b.n	8007f26 <_VPrintHost+0x16>
      break;
 8007f76:	bf00      	nop
 8007f78:	e000      	b.n	8007f7c <_VPrintHost+0x6c>
        break;
 8007f7a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8007f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8007f80:	f04f 0120 	mov.w	r1, #32
 8007f84:	f381 8811 	msr	BASEPRI, r1
 8007f88:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f8a:	483f      	ldr	r0, [pc, #252]	; (8008088 <_VPrintHost+0x178>)
 8007f8c:	f7ff fd64 	bl	8007a58 <_PreparePacket>
 8007f90:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f92:	2280      	movs	r2, #128	; 0x80
 8007f94:	68f9      	ldr	r1, [r7, #12]
 8007f96:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007f98:	f7ff fd0e 	bl	80079b8 <_EncodeStr>
 8007f9c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8007f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fa0:	677b      	str	r3, [r7, #116]	; 0x74
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	673b      	str	r3, [r7, #112]	; 0x70
 8007fa6:	e00b      	b.n	8007fc0 <_VPrintHost+0xb0>
 8007fa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fae:	1c59      	adds	r1, r3, #1
 8007fb0:	6779      	str	r1, [r7, #116]	; 0x74
 8007fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fbc:	09db      	lsrs	r3, r3, #7
 8007fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8007fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fc4:	d8f0      	bhi.n	8007fa8 <_VPrintHost+0x98>
 8007fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	677a      	str	r2, [r7, #116]	; 0x74
 8007fcc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fd4:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8007fd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fde:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fe0:	e00b      	b.n	8007ffa <_VPrintHost+0xea>
 8007fe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe8:	1c59      	adds	r1, r3, #1
 8007fea:	66f9      	str	r1, [r7, #108]	; 0x6c
 8007fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ff0:	b2d2      	uxtb	r2, r2
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ff6:	09db      	lsrs	r3, r3, #7
 8007ff8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8007ffe:	d8f0      	bhi.n	8007fe2 <_VPrintHost+0xd2>
 8008000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008006:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8008010:	f107 0314 	add.w	r3, r7, #20
 8008014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8008018:	e022      	b.n	8008060 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800801a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800801c:	667b      	str	r3, [r7, #100]	; 0x64
 800801e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	663b      	str	r3, [r7, #96]	; 0x60
 8008026:	e00b      	b.n	8008040 <_VPrintHost+0x130>
 8008028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800802a:	b2da      	uxtb	r2, r3
 800802c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800802e:	1c59      	adds	r1, r3, #1
 8008030:	6679      	str	r1, [r7, #100]	; 0x64
 8008032:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800803c:	09db      	lsrs	r3, r3, #7
 800803e:	663b      	str	r3, [r7, #96]	; 0x60
 8008040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008042:	2b7f      	cmp	r3, #127	; 0x7f
 8008044:	d8f0      	bhi.n	8008028 <_VPrintHost+0x118>
 8008046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	667a      	str	r2, [r7, #100]	; 0x64
 800804c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	701a      	strb	r2, [r3, #0]
 8008052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008054:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8008056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800805a:	3304      	adds	r3, #4
 800805c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8008060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008064:	1e5a      	subs	r2, r3, #1
 8008066:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1d5      	bne.n	800801a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800806e:	221a      	movs	r2, #26
 8008070:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008072:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008074:	f7ff fdde 	bl	8007c34 <_SendPacket>
    RECORD_END();
 8008078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800807a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3788      	adds	r7, #136	; 0x88
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	200143f8 	.word	0x200143f8

0800808c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800809a:	2300      	movs	r3, #0
 800809c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80080a0:	4917      	ldr	r1, [pc, #92]	; (8008100 <SEGGER_SYSVIEW_Init+0x74>)
 80080a2:	4818      	ldr	r0, [pc, #96]	; (8008104 <SEGGER_SYSVIEW_Init+0x78>)
 80080a4:	f7ff fbb8 	bl	8007818 <SEGGER_RTT_AllocUpBuffer>
 80080a8:	4603      	mov	r3, r0
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	4b16      	ldr	r3, [pc, #88]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080ae:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80080b0:	4b15      	ldr	r3, [pc, #84]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080b2:	785a      	ldrb	r2, [r3, #1]
 80080b4:	4b14      	ldr	r3, [pc, #80]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080b6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80080b8:	4b13      	ldr	r3, [pc, #76]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080ba:	7e1b      	ldrb	r3, [r3, #24]
 80080bc:	4618      	mov	r0, r3
 80080be:	2300      	movs	r3, #0
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	2308      	movs	r3, #8
 80080c4:	4a11      	ldr	r2, [pc, #68]	; (800810c <SEGGER_SYSVIEW_Init+0x80>)
 80080c6:	490f      	ldr	r1, [pc, #60]	; (8008104 <SEGGER_SYSVIEW_Init+0x78>)
 80080c8:	f7ff fc2a 	bl	8007920 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80080cc:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80080d2:	4b0f      	ldr	r3, [pc, #60]	; (8008110 <SEGGER_SYSVIEW_Init+0x84>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a0c      	ldr	r2, [pc, #48]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080d8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80080da:	4a0b      	ldr	r2, [pc, #44]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80080e0:	4a09      	ldr	r2, [pc, #36]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80080e6:	4a08      	ldr	r2, [pc, #32]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80080ec:	4a06      	ldr	r2, [pc, #24]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80080f2:	4b05      	ldr	r3, [pc, #20]	; (8008108 <SEGGER_SYSVIEW_Init+0x7c>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80080f8:	bf00      	nop
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	200133c0 	.word	0x200133c0
 8008104:	080097fc 	.word	0x080097fc
 8008108:	200143c8 	.word	0x200143c8
 800810c:	200143c0 	.word	0x200143c0
 8008110:	e0001004 	.word	0xe0001004

08008114 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800811c:	4a04      	ldr	r2, [pc, #16]	; (8008130 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6113      	str	r3, [r2, #16]
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	200143c8 	.word	0x200143c8

08008134 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800813c:	f3ef 8311 	mrs	r3, BASEPRI
 8008140:	f04f 0120 	mov.w	r1, #32
 8008144:	f381 8811 	msr	BASEPRI, r1
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	4808      	ldr	r0, [pc, #32]	; (800816c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800814c:	f7ff fc84 	bl	8007a58 <_PreparePacket>
 8008150:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	68b8      	ldr	r0, [r7, #8]
 8008158:	f7ff fd6c 	bl	8007c34 <_SendPacket>
  RECORD_END();
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f383 8811 	msr	BASEPRI, r3
}
 8008162:	bf00      	nop
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	200143f8 	.word	0x200143f8

08008170 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800817a:	f3ef 8311 	mrs	r3, BASEPRI
 800817e:	f04f 0120 	mov.w	r1, #32
 8008182:	f381 8811 	msr	BASEPRI, r1
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	4816      	ldr	r0, [pc, #88]	; (80081e4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800818a:	f7ff fc65 	bl	8007a58 <_PreparePacket>
 800818e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	61fb      	str	r3, [r7, #28]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	61bb      	str	r3, [r7, #24]
 800819c:	e00b      	b.n	80081b6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	1c59      	adds	r1, r3, #1
 80081a6:	61f9      	str	r1, [r7, #28]
 80081a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081ac:	b2d2      	uxtb	r2, r2
 80081ae:	701a      	strb	r2, [r3, #0]
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	09db      	lsrs	r3, r3, #7
 80081b4:	61bb      	str	r3, [r7, #24]
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	2b7f      	cmp	r3, #127	; 0x7f
 80081ba:	d8f0      	bhi.n	800819e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	61fa      	str	r2, [r7, #28]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	b2d2      	uxtb	r2, r2
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	68f9      	ldr	r1, [r7, #12]
 80081d0:	6938      	ldr	r0, [r7, #16]
 80081d2:	f7ff fd2f 	bl	8007c34 <_SendPacket>
  RECORD_END();
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f383 8811 	msr	BASEPRI, r3
}
 80081dc:	bf00      	nop
 80081de:	3720      	adds	r7, #32
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	200143f8 	.word	0x200143f8

080081e8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08c      	sub	sp, #48	; 0x30
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80081f4:	f3ef 8311 	mrs	r3, BASEPRI
 80081f8:	f04f 0120 	mov.w	r1, #32
 80081fc:	f381 8811 	msr	BASEPRI, r1
 8008200:	61fb      	str	r3, [r7, #28]
 8008202:	4825      	ldr	r0, [pc, #148]	; (8008298 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8008204:	f7ff fc28 	bl	8007a58 <_PreparePacket>
 8008208:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	62bb      	str	r3, [r7, #40]	; 0x28
 8008216:	e00b      	b.n	8008230 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	b2da      	uxtb	r2, r3
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	1c59      	adds	r1, r3, #1
 8008220:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	09db      	lsrs	r3, r3, #7
 800822e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	2b7f      	cmp	r3, #127	; 0x7f
 8008234:	d8f0      	bhi.n	8008218 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800823c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	623b      	str	r3, [r7, #32]
 800824e:	e00b      	b.n	8008268 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	b2da      	uxtb	r2, r3
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	1c59      	adds	r1, r3, #1
 8008258:	6279      	str	r1, [r7, #36]	; 0x24
 800825a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	09db      	lsrs	r3, r3, #7
 8008266:	623b      	str	r3, [r7, #32]
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	2b7f      	cmp	r3, #127	; 0x7f
 800826c:	d8f0      	bhi.n	8008250 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	627a      	str	r2, [r7, #36]	; 0x24
 8008274:	6a3a      	ldr	r2, [r7, #32]
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	701a      	strb	r2, [r3, #0]
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	6979      	ldr	r1, [r7, #20]
 8008282:	69b8      	ldr	r0, [r7, #24]
 8008284:	f7ff fcd6 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f383 8811 	msr	BASEPRI, r3
}
 800828e:	bf00      	nop
 8008290:	3730      	adds	r7, #48	; 0x30
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	200143f8 	.word	0x200143f8

0800829c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800829c:	b580      	push	{r7, lr}
 800829e:	b08e      	sub	sp, #56	; 0x38
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80082aa:	f3ef 8311 	mrs	r3, BASEPRI
 80082ae:	f04f 0120 	mov.w	r1, #32
 80082b2:	f381 8811 	msr	BASEPRI, r1
 80082b6:	61fb      	str	r3, [r7, #28]
 80082b8:	4832      	ldr	r0, [pc, #200]	; (8008384 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80082ba:	f7ff fbcd 	bl	8007a58 <_PreparePacket>
 80082be:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	637b      	str	r3, [r7, #52]	; 0x34
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	633b      	str	r3, [r7, #48]	; 0x30
 80082cc:	e00b      	b.n	80082e6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d4:	1c59      	adds	r1, r3, #1
 80082d6:	6379      	str	r1, [r7, #52]	; 0x34
 80082d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	701a      	strb	r2, [r3, #0]
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	09db      	lsrs	r3, r3, #7
 80082e4:	633b      	str	r3, [r7, #48]	; 0x30
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	2b7f      	cmp	r3, #127	; 0x7f
 80082ea:	d8f0      	bhi.n	80082ce <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80082ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	637a      	str	r2, [r7, #52]	; 0x34
 80082f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	701a      	strb	r2, [r3, #0]
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
 8008304:	e00b      	b.n	800831e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	b2da      	uxtb	r2, r3
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	1c59      	adds	r1, r3, #1
 800830e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008310:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008314:	b2d2      	uxtb	r2, r2
 8008316:	701a      	strb	r2, [r3, #0]
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	09db      	lsrs	r3, r3, #7
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	2b7f      	cmp	r3, #127	; 0x7f
 8008322:	d8f0      	bhi.n	8008306 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	62fa      	str	r2, [r7, #44]	; 0x2c
 800832a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	701a      	strb	r2, [r3, #0]
 8008330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008332:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	627b      	str	r3, [r7, #36]	; 0x24
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	623b      	str	r3, [r7, #32]
 800833c:	e00b      	b.n	8008356 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	b2da      	uxtb	r2, r3
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	1c59      	adds	r1, r3, #1
 8008346:	6279      	str	r1, [r7, #36]	; 0x24
 8008348:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	09db      	lsrs	r3, r3, #7
 8008354:	623b      	str	r3, [r7, #32]
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	2b7f      	cmp	r3, #127	; 0x7f
 800835a:	d8f0      	bhi.n	800833e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	627a      	str	r2, [r7, #36]	; 0x24
 8008362:	6a3a      	ldr	r2, [r7, #32]
 8008364:	b2d2      	uxtb	r2, r2
 8008366:	701a      	strb	r2, [r3, #0]
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	6979      	ldr	r1, [r7, #20]
 8008370:	69b8      	ldr	r0, [r7, #24]
 8008372:	f7ff fc5f 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	f383 8811 	msr	BASEPRI, r3
}
 800837c:	bf00      	nop
 800837e:	3738      	adds	r7, #56	; 0x38
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	200143f8 	.word	0x200143f8

08008388 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008388:	b580      	push	{r7, lr}
 800838a:	b090      	sub	sp, #64	; 0x40
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008396:	f3ef 8311 	mrs	r3, BASEPRI
 800839a:	f04f 0120 	mov.w	r1, #32
 800839e:	f381 8811 	msr	BASEPRI, r1
 80083a2:	61fb      	str	r3, [r7, #28]
 80083a4:	4840      	ldr	r0, [pc, #256]	; (80084a8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80083a6:	f7ff fb57 	bl	8007a58 <_PreparePacket>
 80083aa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80083b8:	e00b      	b.n	80083d2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c0:	1c59      	adds	r1, r3, #1
 80083c2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80083c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083c8:	b2d2      	uxtb	r2, r2
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	09db      	lsrs	r3, r3, #7
 80083d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	2b7f      	cmp	r3, #127	; 0x7f
 80083d6:	d8f0      	bhi.n	80083ba <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80083d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80083de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	701a      	strb	r2, [r3, #0]
 80083e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	637b      	str	r3, [r7, #52]	; 0x34
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	633b      	str	r3, [r7, #48]	; 0x30
 80083f0:	e00b      	b.n	800840a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f8:	1c59      	adds	r1, r3, #1
 80083fa:	6379      	str	r1, [r7, #52]	; 0x34
 80083fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	701a      	strb	r2, [r3, #0]
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	09db      	lsrs	r3, r3, #7
 8008408:	633b      	str	r3, [r7, #48]	; 0x30
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	2b7f      	cmp	r3, #127	; 0x7f
 800840e:	d8f0      	bhi.n	80083f2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8008410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	637a      	str	r2, [r7, #52]	; 0x34
 8008416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008418:	b2d2      	uxtb	r2, r2
 800841a:	701a      	strb	r2, [r3, #0]
 800841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	62bb      	str	r3, [r7, #40]	; 0x28
 8008428:	e00b      	b.n	8008442 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	b2da      	uxtb	r2, r3
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	1c59      	adds	r1, r3, #1
 8008432:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008438:	b2d2      	uxtb	r2, r2
 800843a:	701a      	strb	r2, [r3, #0]
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	09db      	lsrs	r3, r3, #7
 8008440:	62bb      	str	r3, [r7, #40]	; 0x28
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	2b7f      	cmp	r3, #127	; 0x7f
 8008446:	d8f0      	bhi.n	800842a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800844e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
 800845c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800845e:	623b      	str	r3, [r7, #32]
 8008460:	e00b      	b.n	800847a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	b2da      	uxtb	r2, r3
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	1c59      	adds	r1, r3, #1
 800846a:	6279      	str	r1, [r7, #36]	; 0x24
 800846c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008470:	b2d2      	uxtb	r2, r2
 8008472:	701a      	strb	r2, [r3, #0]
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	09db      	lsrs	r3, r3, #7
 8008478:	623b      	str	r3, [r7, #32]
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	2b7f      	cmp	r3, #127	; 0x7f
 800847e:	d8f0      	bhi.n	8008462 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	627a      	str	r2, [r7, #36]	; 0x24
 8008486:	6a3a      	ldr	r2, [r7, #32]
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	6979      	ldr	r1, [r7, #20]
 8008494:	69b8      	ldr	r0, [r7, #24]
 8008496:	f7ff fbcd 	bl	8007c34 <_SendPacket>
  RECORD_END();
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	f383 8811 	msr	BASEPRI, r3
}
 80084a0:	bf00      	nop
 80084a2:	3740      	adds	r7, #64	; 0x40
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	200143f8 	.word	0x200143f8

080084ac <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b092      	sub	sp, #72	; 0x48
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
 80084b8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80084ba:	f3ef 8311 	mrs	r3, BASEPRI
 80084be:	f04f 0120 	mov.w	r1, #32
 80084c2:	f381 8811 	msr	BASEPRI, r1
 80084c6:	61fb      	str	r3, [r7, #28]
 80084c8:	484e      	ldr	r0, [pc, #312]	; (8008604 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80084ca:	f7ff fac5 	bl	8007a58 <_PreparePacket>
 80084ce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	647b      	str	r3, [r7, #68]	; 0x44
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	643b      	str	r3, [r7, #64]	; 0x40
 80084dc:	e00b      	b.n	80084f6 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80084de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e4:	1c59      	adds	r1, r3, #1
 80084e6:	6479      	str	r1, [r7, #68]	; 0x44
 80084e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f2:	09db      	lsrs	r3, r3, #7
 80084f4:	643b      	str	r3, [r7, #64]	; 0x40
 80084f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f8:	2b7f      	cmp	r3, #127	; 0x7f
 80084fa:	d8f0      	bhi.n	80084de <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80084fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	647a      	str	r2, [r7, #68]	; 0x44
 8008502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008504:	b2d2      	uxtb	r2, r2
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800850a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	63bb      	str	r3, [r7, #56]	; 0x38
 8008514:	e00b      	b.n	800852e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	b2da      	uxtb	r2, r3
 800851a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851c:	1c59      	adds	r1, r3, #1
 800851e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008520:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008524:	b2d2      	uxtb	r2, r2
 8008526:	701a      	strb	r2, [r3, #0]
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	09db      	lsrs	r3, r3, #7
 800852c:	63bb      	str	r3, [r7, #56]	; 0x38
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	2b7f      	cmp	r3, #127	; 0x7f
 8008532:	d8f0      	bhi.n	8008516 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8008534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800853a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800853c:	b2d2      	uxtb	r2, r2
 800853e:	701a      	strb	r2, [r3, #0]
 8008540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008542:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	633b      	str	r3, [r7, #48]	; 0x30
 800854c:	e00b      	b.n	8008566 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	b2da      	uxtb	r2, r3
 8008552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008554:	1c59      	adds	r1, r3, #1
 8008556:	6379      	str	r1, [r7, #52]	; 0x34
 8008558:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	701a      	strb	r2, [r3, #0]
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	09db      	lsrs	r3, r3, #7
 8008564:	633b      	str	r3, [r7, #48]	; 0x30
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	2b7f      	cmp	r3, #127	; 0x7f
 800856a:	d8f0      	bhi.n	800854e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800856c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	637a      	str	r2, [r7, #52]	; 0x34
 8008572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008574:	b2d2      	uxtb	r2, r2
 8008576:	701a      	strb	r2, [r3, #0]
 8008578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008582:	62bb      	str	r3, [r7, #40]	; 0x28
 8008584:	e00b      	b.n	800859e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	b2da      	uxtb	r2, r3
 800858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858c:	1c59      	adds	r1, r3, #1
 800858e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008590:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	09db      	lsrs	r3, r3, #7
 800859c:	62bb      	str	r3, [r7, #40]	; 0x28
 800859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a0:	2b7f      	cmp	r3, #127	; 0x7f
 80085a2:	d8f0      	bhi.n	8008586 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80085a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085ac:	b2d2      	uxtb	r2, r2
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
 80085b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085ba:	623b      	str	r3, [r7, #32]
 80085bc:	e00b      	b.n	80085d6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	1c59      	adds	r1, r3, #1
 80085c6:	6279      	str	r1, [r7, #36]	; 0x24
 80085c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085cc:	b2d2      	uxtb	r2, r2
 80085ce:	701a      	strb	r2, [r3, #0]
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	09db      	lsrs	r3, r3, #7
 80085d4:	623b      	str	r3, [r7, #32]
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	2b7f      	cmp	r3, #127	; 0x7f
 80085da:	d8f0      	bhi.n	80085be <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	627a      	str	r2, [r7, #36]	; 0x24
 80085e2:	6a3a      	ldr	r2, [r7, #32]
 80085e4:	b2d2      	uxtb	r2, r2
 80085e6:	701a      	strb	r2, [r3, #0]
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	6979      	ldr	r1, [r7, #20]
 80085f0:	69b8      	ldr	r0, [r7, #24]
 80085f2:	f7ff fb1f 	bl	8007c34 <_SendPacket>
  RECORD_END();
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	f383 8811 	msr	BASEPRI, r3
}
 80085fc:	bf00      	nop
 80085fe:	3748      	adds	r7, #72	; 0x48
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	200143f8 	.word	0x200143f8

08008608 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8008608:	b580      	push	{r7, lr}
 800860a:	b08c      	sub	sp, #48	; 0x30
 800860c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800860e:	4b58      	ldr	r3, [pc, #352]	; (8008770 <SEGGER_SYSVIEW_Start+0x168>)
 8008610:	2201      	movs	r2, #1
 8008612:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8008614:	f3ef 8311 	mrs	r3, BASEPRI
 8008618:	f04f 0120 	mov.w	r1, #32
 800861c:	f381 8811 	msr	BASEPRI, r1
 8008620:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8008622:	4b53      	ldr	r3, [pc, #332]	; (8008770 <SEGGER_SYSVIEW_Start+0x168>)
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	220a      	movs	r2, #10
 8008628:	4952      	ldr	r1, [pc, #328]	; (8008774 <SEGGER_SYSVIEW_Start+0x16c>)
 800862a:	4618      	mov	r0, r3
 800862c:	f7f7 fde0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8008636:	200a      	movs	r0, #10
 8008638:	f7ff fd7c 	bl	8008134 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800863c:	f3ef 8311 	mrs	r3, BASEPRI
 8008640:	f04f 0120 	mov.w	r1, #32
 8008644:	f381 8811 	msr	BASEPRI, r1
 8008648:	60bb      	str	r3, [r7, #8]
 800864a:	484b      	ldr	r0, [pc, #300]	; (8008778 <SEGGER_SYSVIEW_Start+0x170>)
 800864c:	f7ff fa04 	bl	8007a58 <_PreparePacket>
 8008650:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800865a:	4b45      	ldr	r3, [pc, #276]	; (8008770 <SEGGER_SYSVIEW_Start+0x168>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008660:	e00b      	b.n	800867a <SEGGER_SYSVIEW_Start+0x72>
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	b2da      	uxtb	r2, r3
 8008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008668:	1c59      	adds	r1, r3, #1
 800866a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800866c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008670:	b2d2      	uxtb	r2, r2
 8008672:	701a      	strb	r2, [r3, #0]
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	09db      	lsrs	r3, r3, #7
 8008678:	62bb      	str	r3, [r7, #40]	; 0x28
 800867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867c:	2b7f      	cmp	r3, #127	; 0x7f
 800867e:	d8f0      	bhi.n	8008662 <SEGGER_SYSVIEW_Start+0x5a>
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008688:	b2d2      	uxtb	r2, r2
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
 8008694:	4b36      	ldr	r3, [pc, #216]	; (8008770 <SEGGER_SYSVIEW_Start+0x168>)
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	623b      	str	r3, [r7, #32]
 800869a:	e00b      	b.n	80086b4 <SEGGER_SYSVIEW_Start+0xac>
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	1c59      	adds	r1, r3, #1
 80086a4:	6279      	str	r1, [r7, #36]	; 0x24
 80086a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	701a      	strb	r2, [r3, #0]
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	09db      	lsrs	r3, r3, #7
 80086b2:	623b      	str	r3, [r7, #32]
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	2b7f      	cmp	r3, #127	; 0x7f
 80086b8:	d8f0      	bhi.n	800869c <SEGGER_SYSVIEW_Start+0x94>
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	627a      	str	r2, [r7, #36]	; 0x24
 80086c0:	6a3a      	ldr	r2, [r7, #32]
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	61fb      	str	r3, [r7, #28]
 80086ce:	4b28      	ldr	r3, [pc, #160]	; (8008770 <SEGGER_SYSVIEW_Start+0x168>)
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	61bb      	str	r3, [r7, #24]
 80086d4:	e00b      	b.n	80086ee <SEGGER_SYSVIEW_Start+0xe6>
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	1c59      	adds	r1, r3, #1
 80086de:	61f9      	str	r1, [r7, #28]
 80086e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086e4:	b2d2      	uxtb	r2, r2
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	09db      	lsrs	r3, r3, #7
 80086ec:	61bb      	str	r3, [r7, #24]
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b7f      	cmp	r3, #127	; 0x7f
 80086f2:	d8f0      	bhi.n	80086d6 <SEGGER_SYSVIEW_Start+0xce>
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	61fa      	str	r2, [r7, #28]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	b2d2      	uxtb	r2, r2
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	2300      	movs	r3, #0
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	e00b      	b.n	8008726 <SEGGER_SYSVIEW_Start+0x11e>
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	b2da      	uxtb	r2, r3
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	1c59      	adds	r1, r3, #1
 8008716:	6179      	str	r1, [r7, #20]
 8008718:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800871c:	b2d2      	uxtb	r2, r2
 800871e:	701a      	strb	r2, [r3, #0]
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	09db      	lsrs	r3, r3, #7
 8008724:	613b      	str	r3, [r7, #16]
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b7f      	cmp	r3, #127	; 0x7f
 800872a:	d8f0      	bhi.n	800870e <SEGGER_SYSVIEW_Start+0x106>
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	617a      	str	r2, [r7, #20]
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	b2d2      	uxtb	r2, r2
 8008736:	701a      	strb	r2, [r3, #0]
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800873c:	2218      	movs	r2, #24
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff fa77 	bl	8007c34 <_SendPacket>
      RECORD_END();
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800874c:	4b08      	ldr	r3, [pc, #32]	; (8008770 <SEGGER_SYSVIEW_Start+0x168>)
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <SEGGER_SYSVIEW_Start+0x168>)
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800875a:	f000 f9eb 	bl	8008b34 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800875e:	f000 f9b1 	bl	8008ac4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008762:	f000 fc83 	bl	800906c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008766:	bf00      	nop
 8008768:	3730      	adds	r7, #48	; 0x30
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	200143c8 	.word	0x200143c8
 8008774:	080098f8 	.word	0x080098f8
 8008778:	200143f8 	.word	0x200143f8

0800877c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008782:	f3ef 8311 	mrs	r3, BASEPRI
 8008786:	f04f 0120 	mov.w	r1, #32
 800878a:	f381 8811 	msr	BASEPRI, r1
 800878e:	607b      	str	r3, [r7, #4]
 8008790:	480b      	ldr	r0, [pc, #44]	; (80087c0 <SEGGER_SYSVIEW_Stop+0x44>)
 8008792:	f7ff f961 	bl	8007a58 <_PreparePacket>
 8008796:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <SEGGER_SYSVIEW_Stop+0x48>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80087a0:	220b      	movs	r2, #11
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6838      	ldr	r0, [r7, #0]
 80087a6:	f7ff fa45 	bl	8007c34 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80087aa:	4b06      	ldr	r3, [pc, #24]	; (80087c4 <SEGGER_SYSVIEW_Stop+0x48>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f383 8811 	msr	BASEPRI, r3
}
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	200143f8 	.word	0x200143f8
 80087c4:	200143c8 	.word	0x200143c8

080087c8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08c      	sub	sp, #48	; 0x30
 80087cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80087ce:	f3ef 8311 	mrs	r3, BASEPRI
 80087d2:	f04f 0120 	mov.w	r1, #32
 80087d6:	f381 8811 	msr	BASEPRI, r1
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	4845      	ldr	r0, [pc, #276]	; (80088f4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80087de:	f7ff f93b 	bl	8007a58 <_PreparePacket>
 80087e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ec:	4b42      	ldr	r3, [pc, #264]	; (80088f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80087f2:	e00b      	b.n	800880c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fa:	1c59      	adds	r1, r3, #1
 80087fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80087fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008802:	b2d2      	uxtb	r2, r2
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	09db      	lsrs	r3, r3, #7
 800880a:	62bb      	str	r3, [r7, #40]	; 0x28
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	2b7f      	cmp	r3, #127	; 0x7f
 8008810:	d8f0      	bhi.n	80087f4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	701a      	strb	r2, [r3, #0]
 800881e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008820:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	627b      	str	r3, [r7, #36]	; 0x24
 8008826:	4b34      	ldr	r3, [pc, #208]	; (80088f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	623b      	str	r3, [r7, #32]
 800882c:	e00b      	b.n	8008846 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	1c59      	adds	r1, r3, #1
 8008836:	6279      	str	r1, [r7, #36]	; 0x24
 8008838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800883c:	b2d2      	uxtb	r2, r2
 800883e:	701a      	strb	r2, [r3, #0]
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	09db      	lsrs	r3, r3, #7
 8008844:	623b      	str	r3, [r7, #32]
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	2b7f      	cmp	r3, #127	; 0x7f
 800884a:	d8f0      	bhi.n	800882e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	627a      	str	r2, [r7, #36]	; 0x24
 8008852:	6a3a      	ldr	r2, [r7, #32]
 8008854:	b2d2      	uxtb	r2, r2
 8008856:	701a      	strb	r2, [r3, #0]
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	4b25      	ldr	r3, [pc, #148]	; (80088f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	61bb      	str	r3, [r7, #24]
 8008866:	e00b      	b.n	8008880 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	b2da      	uxtb	r2, r3
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	1c59      	adds	r1, r3, #1
 8008870:	61f9      	str	r1, [r7, #28]
 8008872:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	09db      	lsrs	r3, r3, #7
 800887e:	61bb      	str	r3, [r7, #24]
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	2b7f      	cmp	r3, #127	; 0x7f
 8008884:	d8f0      	bhi.n	8008868 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	61fa      	str	r2, [r7, #28]
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	2300      	movs	r3, #0
 800889c:	613b      	str	r3, [r7, #16]
 800889e:	e00b      	b.n	80088b8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	1c59      	adds	r1, r3, #1
 80088a8:	6179      	str	r1, [r7, #20]
 80088aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088ae:	b2d2      	uxtb	r2, r2
 80088b0:	701a      	strb	r2, [r3, #0]
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	09db      	lsrs	r3, r3, #7
 80088b6:	613b      	str	r3, [r7, #16]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b7f      	cmp	r3, #127	; 0x7f
 80088bc:	d8f0      	bhi.n	80088a0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	617a      	str	r2, [r7, #20]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80088ce:	2218      	movs	r2, #24
 80088d0:	6879      	ldr	r1, [r7, #4]
 80088d2:	68b8      	ldr	r0, [r7, #8]
 80088d4:	f7ff f9ae 	bl	8007c34 <_SendPacket>
  RECORD_END();
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80088de:	4b06      	ldr	r3, [pc, #24]	; (80088f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80088e6:	4b04      	ldr	r3, [pc, #16]	; (80088f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	4798      	blx	r3
  }
}
 80088ec:	bf00      	nop
 80088ee:	3730      	adds	r7, #48	; 0x30
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	200143f8 	.word	0x200143f8
 80088f8:	200143c8 	.word	0x200143c8

080088fc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b092      	sub	sp, #72	; 0x48
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008904:	f3ef 8311 	mrs	r3, BASEPRI
 8008908:	f04f 0120 	mov.w	r1, #32
 800890c:	f381 8811 	msr	BASEPRI, r1
 8008910:	617b      	str	r3, [r7, #20]
 8008912:	486a      	ldr	r0, [pc, #424]	; (8008abc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008914:	f7ff f8a0 	bl	8007a58 <_PreparePacket>
 8008918:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	647b      	str	r3, [r7, #68]	; 0x44
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	4b66      	ldr	r3, [pc, #408]	; (8008ac0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	643b      	str	r3, [r7, #64]	; 0x40
 800892e:	e00b      	b.n	8008948 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008932:	b2da      	uxtb	r2, r3
 8008934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008936:	1c59      	adds	r1, r3, #1
 8008938:	6479      	str	r1, [r7, #68]	; 0x44
 800893a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008944:	09db      	lsrs	r3, r3, #7
 8008946:	643b      	str	r3, [r7, #64]	; 0x40
 8008948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800894a:	2b7f      	cmp	r3, #127	; 0x7f
 800894c:	d8f0      	bhi.n	8008930 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800894e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	647a      	str	r2, [r7, #68]	; 0x44
 8008954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	701a      	strb	r2, [r3, #0]
 800895a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800895c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	63bb      	str	r3, [r7, #56]	; 0x38
 8008968:	e00b      	b.n	8008982 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	b2da      	uxtb	r2, r3
 800896e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008970:	1c59      	adds	r1, r3, #1
 8008972:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008978:	b2d2      	uxtb	r2, r2
 800897a:	701a      	strb	r2, [r3, #0]
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	09db      	lsrs	r3, r3, #7
 8008980:	63bb      	str	r3, [r7, #56]	; 0x38
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	2b7f      	cmp	r3, #127	; 0x7f
 8008986:	d8f0      	bhi.n	800896a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800898e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008990:	b2d2      	uxtb	r2, r2
 8008992:	701a      	strb	r2, [r3, #0]
 8008994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008996:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	4619      	mov	r1, r3
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f7ff f809 	bl	80079b8 <_EncodeStr>
 80089a6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80089a8:	2209      	movs	r2, #9
 80089aa:	68f9      	ldr	r1, [r7, #12]
 80089ac:	6938      	ldr	r0, [r7, #16]
 80089ae:	f7ff f941 	bl	8007c34 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	4b40      	ldr	r3, [pc, #256]	; (8008ac0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	633b      	str	r3, [r7, #48]	; 0x30
 80089c6:	e00b      	b.n	80089e0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ce:	1c59      	adds	r1, r3, #1
 80089d0:	6379      	str	r1, [r7, #52]	; 0x34
 80089d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089d6:	b2d2      	uxtb	r2, r2
 80089d8:	701a      	strb	r2, [r3, #0]
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	09db      	lsrs	r3, r3, #7
 80089de:	633b      	str	r3, [r7, #48]	; 0x30
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	2b7f      	cmp	r3, #127	; 0x7f
 80089e4:	d8f0      	bhi.n	80089c8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80089e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	637a      	str	r2, [r7, #52]	; 0x34
 80089ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	701a      	strb	r2, [r3, #0]
 80089f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a00:	e00b      	b.n	8008a1a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	1c59      	adds	r1, r3, #1
 8008a0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a10:	b2d2      	uxtb	r2, r2
 8008a12:	701a      	strb	r2, [r3, #0]
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	09db      	lsrs	r3, r3, #7
 8008a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8008a1e:	d8f0      	bhi.n	8008a02 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a28:	b2d2      	uxtb	r2, r2
 8008a2a:	701a      	strb	r2, [r3, #0]
 8008a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	627b      	str	r3, [r7, #36]	; 0x24
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	623b      	str	r3, [r7, #32]
 8008a3a:	e00b      	b.n	8008a54 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	1c59      	adds	r1, r3, #1
 8008a44:	6279      	str	r1, [r7, #36]	; 0x24
 8008a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	09db      	lsrs	r3, r3, #7
 8008a52:	623b      	str	r3, [r7, #32]
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	2b7f      	cmp	r3, #127	; 0x7f
 8008a58:	d8f0      	bhi.n	8008a3c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	627a      	str	r2, [r7, #36]	; 0x24
 8008a60:	6a3a      	ldr	r2, [r7, #32]
 8008a62:	b2d2      	uxtb	r2, r2
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	61fb      	str	r3, [r7, #28]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	61bb      	str	r3, [r7, #24]
 8008a72:	e00b      	b.n	8008a8c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	1c59      	adds	r1, r3, #1
 8008a7c:	61f9      	str	r1, [r7, #28]
 8008a7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	09db      	lsrs	r3, r3, #7
 8008a8a:	61bb      	str	r3, [r7, #24]
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8008a90:	d8f0      	bhi.n	8008a74 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	61fa      	str	r2, [r7, #28]
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008aa2:	2215      	movs	r2, #21
 8008aa4:	68f9      	ldr	r1, [r7, #12]
 8008aa6:	6938      	ldr	r0, [r7, #16]
 8008aa8:	f7ff f8c4 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f383 8811 	msr	BASEPRI, r3
}
 8008ab2:	bf00      	nop
 8008ab4:	3748      	adds	r7, #72	; 0x48
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	200143f8 	.word	0x200143f8
 8008ac0:	200143c8 	.word	0x200143c8

08008ac4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008ac8:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008aca:	6a1b      	ldr	r3, [r3, #32]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d008      	beq.n	8008ae2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008ad0:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008ada:	4b03      	ldr	r3, [pc, #12]	; (8008ae8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	4798      	blx	r3
  }
}
 8008ae2:	bf00      	nop
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200143c8 	.word	0x200143c8

08008aec <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008af4:	f3ef 8311 	mrs	r3, BASEPRI
 8008af8:	f04f 0120 	mov.w	r1, #32
 8008afc:	f381 8811 	msr	BASEPRI, r1
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	480b      	ldr	r0, [pc, #44]	; (8008b30 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008b04:	f7fe ffa8 	bl	8007a58 <_PreparePacket>
 8008b08:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008b0a:	2280      	movs	r2, #128	; 0x80
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	6938      	ldr	r0, [r7, #16]
 8008b10:	f7fe ff52 	bl	80079b8 <_EncodeStr>
 8008b14:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008b16:	220e      	movs	r2, #14
 8008b18:	68f9      	ldr	r1, [r7, #12]
 8008b1a:	6938      	ldr	r0, [r7, #16]
 8008b1c:	f7ff f88a 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f383 8811 	msr	BASEPRI, r3
}
 8008b26:	bf00      	nop
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200143f8 	.word	0x200143f8

08008b34 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008b3a:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d01a      	beq.n	8008b78 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008b42:	4b13      	ldr	r3, [pc, #76]	; (8008b90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d015      	beq.n	8008b78 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008b4c:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4798      	blx	r3
 8008b54:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008b58:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b5e:	f04f 0200 	mov.w	r2, #0
 8008b62:	f04f 0300 	mov.w	r3, #0
 8008b66:	000a      	movs	r2, r1
 8008b68:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4621      	mov	r1, r4
 8008b70:	200d      	movs	r0, #13
 8008b72:	f7ff fb39 	bl	80081e8 <SEGGER_SYSVIEW_RecordU32x2>
 8008b76:	e006      	b.n	8008b86 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008b78:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	200c      	movs	r0, #12
 8008b80:	f7ff faf6 	bl	8008170 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd90      	pop	{r4, r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	200143c8 	.word	0x200143c8
 8008b94:	e0001004 	.word	0xe0001004

08008b98 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8008ba2:	f04f 0120 	mov.w	r1, #32
 8008ba6:	f381 8811 	msr	BASEPRI, r1
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	4819      	ldr	r0, [pc, #100]	; (8008c14 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008bae:	f7fe ff53 	bl	8007a58 <_PreparePacket>
 8008bb2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008bb8:	4b17      	ldr	r3, [pc, #92]	; (8008c18 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	617b      	str	r3, [r7, #20]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	613b      	str	r3, [r7, #16]
 8008bca:	e00b      	b.n	8008be4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	1c59      	adds	r1, r3, #1
 8008bd4:	6179      	str	r1, [r7, #20]
 8008bd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	09db      	lsrs	r3, r3, #7
 8008be2:	613b      	str	r3, [r7, #16]
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	2b7f      	cmp	r3, #127	; 0x7f
 8008be8:	d8f0      	bhi.n	8008bcc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	1c5a      	adds	r2, r3, #1
 8008bee:	617a      	str	r2, [r7, #20]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	b2d2      	uxtb	r2, r2
 8008bf4:	701a      	strb	r2, [r3, #0]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	68b8      	ldr	r0, [r7, #8]
 8008c00:	f7ff f818 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f383 8811 	msr	BASEPRI, r3
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	200143f8 	.word	0x200143f8
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008c22:	f3ef 8311 	mrs	r3, BASEPRI
 8008c26:	f04f 0120 	mov.w	r1, #32
 8008c2a:	f381 8811 	msr	BASEPRI, r1
 8008c2e:	607b      	str	r3, [r7, #4]
 8008c30:	4807      	ldr	r0, [pc, #28]	; (8008c50 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008c32:	f7fe ff11 	bl	8007a58 <_PreparePacket>
 8008c36:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008c38:	2203      	movs	r2, #3
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6838      	ldr	r0, [r7, #0]
 8008c3e:	f7fe fff9 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f383 8811 	msr	BASEPRI, r3
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	200143f8 	.word	0x200143f8

08008c54 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8008c5e:	f04f 0120 	mov.w	r1, #32
 8008c62:	f381 8811 	msr	BASEPRI, r1
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	4807      	ldr	r0, [pc, #28]	; (8008c88 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008c6a:	f7fe fef5 	bl	8007a58 <_PreparePacket>
 8008c6e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008c70:	2212      	movs	r2, #18
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6838      	ldr	r0, [r7, #0]
 8008c76:	f7fe ffdd 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f383 8811 	msr	BASEPRI, r3
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	200143f8 	.word	0x200143f8

08008c8c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008c92:	f3ef 8311 	mrs	r3, BASEPRI
 8008c96:	f04f 0120 	mov.w	r1, #32
 8008c9a:	f381 8811 	msr	BASEPRI, r1
 8008c9e:	607b      	str	r3, [r7, #4]
 8008ca0:	4807      	ldr	r0, [pc, #28]	; (8008cc0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008ca2:	f7fe fed9 	bl	8007a58 <_PreparePacket>
 8008ca6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008ca8:	2211      	movs	r2, #17
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6838      	ldr	r0, [r7, #0]
 8008cae:	f7fe ffc1 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f383 8811 	msr	BASEPRI, r3
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	200143f8 	.word	0x200143f8

08008cc4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b088      	sub	sp, #32
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8008cd0:	f04f 0120 	mov.w	r1, #32
 8008cd4:	f381 8811 	msr	BASEPRI, r1
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	4819      	ldr	r0, [pc, #100]	; (8008d40 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008cdc:	f7fe febc 	bl	8007a58 <_PreparePacket>
 8008ce0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008ce6:	4b17      	ldr	r3, [pc, #92]	; (8008d44 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	61fb      	str	r3, [r7, #28]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	e00b      	b.n	8008d12 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	1c59      	adds	r1, r3, #1
 8008d02:	61f9      	str	r1, [r7, #28]
 8008d04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d08:	b2d2      	uxtb	r2, r2
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	09db      	lsrs	r3, r3, #7
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	2b7f      	cmp	r3, #127	; 0x7f
 8008d16:	d8f0      	bhi.n	8008cfa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	61fa      	str	r2, [r7, #28]
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	b2d2      	uxtb	r2, r2
 8008d22:	701a      	strb	r2, [r3, #0]
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008d28:	2208      	movs	r2, #8
 8008d2a:	68f9      	ldr	r1, [r7, #12]
 8008d2c:	6938      	ldr	r0, [r7, #16]
 8008d2e:	f7fe ff81 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f383 8811 	msr	BASEPRI, r3
}
 8008d38:	bf00      	nop
 8008d3a:	3720      	adds	r7, #32
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	200143f8 	.word	0x200143f8
 8008d44:	200143c8 	.word	0x200143c8

08008d48 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008d50:	f3ef 8311 	mrs	r3, BASEPRI
 8008d54:	f04f 0120 	mov.w	r1, #32
 8008d58:	f381 8811 	msr	BASEPRI, r1
 8008d5c:	617b      	str	r3, [r7, #20]
 8008d5e:	4819      	ldr	r0, [pc, #100]	; (8008dc4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008d60:	f7fe fe7a 	bl	8007a58 <_PreparePacket>
 8008d64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008d6a:	4b17      	ldr	r3, [pc, #92]	; (8008dc8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	61fb      	str	r3, [r7, #28]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	e00b      	b.n	8008d96 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	1c59      	adds	r1, r3, #1
 8008d86:	61f9      	str	r1, [r7, #28]
 8008d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d8c:	b2d2      	uxtb	r2, r2
 8008d8e:	701a      	strb	r2, [r3, #0]
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	09db      	lsrs	r3, r3, #7
 8008d94:	61bb      	str	r3, [r7, #24]
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	2b7f      	cmp	r3, #127	; 0x7f
 8008d9a:	d8f0      	bhi.n	8008d7e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	61fa      	str	r2, [r7, #28]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	b2d2      	uxtb	r2, r2
 8008da6:	701a      	strb	r2, [r3, #0]
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008dac:	2204      	movs	r2, #4
 8008dae:	68f9      	ldr	r1, [r7, #12]
 8008db0:	6938      	ldr	r0, [r7, #16]
 8008db2:	f7fe ff3f 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f383 8811 	msr	BASEPRI, r3
}
 8008dbc:	bf00      	nop
 8008dbe:	3720      	adds	r7, #32
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	200143f8 	.word	0x200143f8
 8008dc8:	200143c8 	.word	0x200143c8

08008dcc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008dd4:	f3ef 8311 	mrs	r3, BASEPRI
 8008dd8:	f04f 0120 	mov.w	r1, #32
 8008ddc:	f381 8811 	msr	BASEPRI, r1
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	4819      	ldr	r0, [pc, #100]	; (8008e48 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008de4:	f7fe fe38 	bl	8007a58 <_PreparePacket>
 8008de8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008dee:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	61bb      	str	r3, [r7, #24]
 8008e00:	e00b      	b.n	8008e1a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	1c59      	adds	r1, r3, #1
 8008e0a:	61f9      	str	r1, [r7, #28]
 8008e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e10:	b2d2      	uxtb	r2, r2
 8008e12:	701a      	strb	r2, [r3, #0]
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	09db      	lsrs	r3, r3, #7
 8008e18:	61bb      	str	r3, [r7, #24]
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8008e1e:	d8f0      	bhi.n	8008e02 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	61fa      	str	r2, [r7, #28]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	b2d2      	uxtb	r2, r2
 8008e2a:	701a      	strb	r2, [r3, #0]
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008e30:	2206      	movs	r2, #6
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	6938      	ldr	r0, [r7, #16]
 8008e36:	f7fe fefd 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f383 8811 	msr	BASEPRI, r3
}
 8008e40:	bf00      	nop
 8008e42:	3720      	adds	r7, #32
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	200143f8 	.word	0x200143f8
 8008e4c:	200143c8 	.word	0x200143c8

08008e50 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	; 0x28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008e5a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e5e:	f04f 0120 	mov.w	r1, #32
 8008e62:	f381 8811 	msr	BASEPRI, r1
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	4827      	ldr	r0, [pc, #156]	; (8008f08 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008e6a:	f7fe fdf5 	bl	8007a58 <_PreparePacket>
 8008e6e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008e74:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	623b      	str	r3, [r7, #32]
 8008e86:	e00b      	b.n	8008ea0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	1c59      	adds	r1, r3, #1
 8008e90:	6279      	str	r1, [r7, #36]	; 0x24
 8008e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	09db      	lsrs	r3, r3, #7
 8008e9e:	623b      	str	r3, [r7, #32]
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ea4:	d8f0      	bhi.n	8008e88 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	627a      	str	r2, [r7, #36]	; 0x24
 8008eac:	6a3a      	ldr	r2, [r7, #32]
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	61bb      	str	r3, [r7, #24]
 8008ebe:	e00b      	b.n	8008ed8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	1c59      	adds	r1, r3, #1
 8008ec8:	61f9      	str	r1, [r7, #28]
 8008eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ece:	b2d2      	uxtb	r2, r2
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	09db      	lsrs	r3, r3, #7
 8008ed6:	61bb      	str	r3, [r7, #24]
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	2b7f      	cmp	r3, #127	; 0x7f
 8008edc:	d8f0      	bhi.n	8008ec0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	61fa      	str	r2, [r7, #28]
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	b2d2      	uxtb	r2, r2
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8008eee:	2207      	movs	r2, #7
 8008ef0:	68f9      	ldr	r1, [r7, #12]
 8008ef2:	6938      	ldr	r0, [r7, #16]
 8008ef4:	f7fe fe9e 	bl	8007c34 <_SendPacket>
  RECORD_END();
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f383 8811 	msr	BASEPRI, r3
}
 8008efe:	bf00      	nop
 8008f00:	3728      	adds	r7, #40	; 0x28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	200143f8 	.word	0x200143f8
 8008f0c:	200143c8 	.word	0x200143c8

08008f10 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008f18:	4b04      	ldr	r3, [pc, #16]	; (8008f2c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	1ad3      	subs	r3, r2, r3
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	200143c8 	.word	0x200143c8

08008f30 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08c      	sub	sp, #48	; 0x30
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008f3a:	4b3b      	ldr	r3, [pc, #236]	; (8009028 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d06d      	beq.n	800901e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008f42:	4b39      	ldr	r3, [pc, #228]	; (8009028 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008f48:	2300      	movs	r3, #0
 8008f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f4c:	e008      	b.n	8008f60 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d007      	beq.n	8008f6a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f60:	79fb      	ldrb	r3, [r7, #7]
 8008f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d3f2      	bcc.n	8008f4e <SEGGER_SYSVIEW_SendModule+0x1e>
 8008f68:	e000      	b.n	8008f6c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008f6a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d055      	beq.n	800901e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008f72:	f3ef 8311 	mrs	r3, BASEPRI
 8008f76:	f04f 0120 	mov.w	r1, #32
 8008f7a:	f381 8811 	msr	BASEPRI, r1
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	482a      	ldr	r0, [pc, #168]	; (800902c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008f82:	f7fe fd69 	bl	8007a58 <_PreparePacket>
 8008f86:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f90:	79fb      	ldrb	r3, [r7, #7]
 8008f92:	623b      	str	r3, [r7, #32]
 8008f94:	e00b      	b.n	8008fae <SEGGER_SYSVIEW_SendModule+0x7e>
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	1c59      	adds	r1, r3, #1
 8008f9e:	6279      	str	r1, [r7, #36]	; 0x24
 8008fa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	09db      	lsrs	r3, r3, #7
 8008fac:	623b      	str	r3, [r7, #32]
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	2b7f      	cmp	r3, #127	; 0x7f
 8008fb2:	d8f0      	bhi.n	8008f96 <SEGGER_SYSVIEW_SendModule+0x66>
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	627a      	str	r2, [r7, #36]	; 0x24
 8008fba:	6a3a      	ldr	r2, [r7, #32]
 8008fbc:	b2d2      	uxtb	r2, r2
 8008fbe:	701a      	strb	r2, [r3, #0]
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	61fb      	str	r3, [r7, #28]
 8008fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	61bb      	str	r3, [r7, #24]
 8008fce:	e00b      	b.n	8008fe8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	1c59      	adds	r1, r3, #1
 8008fd8:	61f9      	str	r1, [r7, #28]
 8008fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	09db      	lsrs	r3, r3, #7
 8008fe6:	61bb      	str	r3, [r7, #24]
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	2b7f      	cmp	r3, #127	; 0x7f
 8008fec:	d8f0      	bhi.n	8008fd0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	61fa      	str	r2, [r7, #28]
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	b2d2      	uxtb	r2, r2
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2280      	movs	r2, #128	; 0x80
 8009004:	4619      	mov	r1, r3
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f7fe fcd6 	bl	80079b8 <_EncodeStr>
 800900c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800900e:	2216      	movs	r2, #22
 8009010:	68f9      	ldr	r1, [r7, #12]
 8009012:	6938      	ldr	r0, [r7, #16]
 8009014:	f7fe fe0e 	bl	8007c34 <_SendPacket>
      RECORD_END();
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800901e:	bf00      	nop
 8009020:	3730      	adds	r7, #48	; 0x30
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	200143f0 	.word	0x200143f0
 800902c:	200143f8 	.word	0x200143f8

08009030 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009036:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00f      	beq.n	800905e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800903e:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f2      	bne.n	8009044 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	200143f0 	.word	0x200143f0

0800906c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009072:	f3ef 8311 	mrs	r3, BASEPRI
 8009076:	f04f 0120 	mov.w	r1, #32
 800907a:	f381 8811 	msr	BASEPRI, r1
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	4817      	ldr	r0, [pc, #92]	; (80090e0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009082:	f7fe fce9 	bl	8007a58 <_PreparePacket>
 8009086:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	617b      	str	r3, [r7, #20]
 8009090:	4b14      	ldr	r3, [pc, #80]	; (80090e4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	613b      	str	r3, [r7, #16]
 8009096:	e00b      	b.n	80090b0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	b2da      	uxtb	r2, r3
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	1c59      	adds	r1, r3, #1
 80090a0:	6179      	str	r1, [r7, #20]
 80090a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	09db      	lsrs	r3, r3, #7
 80090ae:	613b      	str	r3, [r7, #16]
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	2b7f      	cmp	r3, #127	; 0x7f
 80090b4:	d8f0      	bhi.n	8009098 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	617a      	str	r2, [r7, #20]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	b2d2      	uxtb	r2, r2
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80090c6:	221b      	movs	r2, #27
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	68b8      	ldr	r0, [r7, #8]
 80090cc:	f7fe fdb2 	bl	8007c34 <_SendPacket>
  RECORD_END();
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f383 8811 	msr	BASEPRI, r3
}
 80090d6:	bf00      	nop
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	200143f8 	.word	0x200143f8
 80090e4:	200143f4 	.word	0x200143f4

080090e8 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80090e8:	b40f      	push	{r0, r1, r2, r3}
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80090f0:	f107 0314 	add.w	r3, r7, #20
 80090f4:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80090f6:	1d3b      	adds	r3, r7, #4
 80090f8:	461a      	mov	r2, r3
 80090fa:	2100      	movs	r1, #0
 80090fc:	6938      	ldr	r0, [r7, #16]
 80090fe:	f7fe ff07 	bl	8007f10 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800910c:	b004      	add	sp, #16
 800910e:	4770      	bx	lr

08009110 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8009110:	b580      	push	{r7, lr}
 8009112:	b08a      	sub	sp, #40	; 0x28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009118:	f3ef 8311 	mrs	r3, BASEPRI
 800911c:	f04f 0120 	mov.w	r1, #32
 8009120:	f381 8811 	msr	BASEPRI, r1
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	4827      	ldr	r0, [pc, #156]	; (80091c4 <SEGGER_SYSVIEW_Print+0xb4>)
 8009128:	f7fe fc96 	bl	8007a58 <_PreparePacket>
 800912c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800912e:	2280      	movs	r2, #128	; 0x80
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	6938      	ldr	r0, [r7, #16]
 8009134:	f7fe fc40 	bl	80079b8 <_EncodeStr>
 8009138:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
 800913e:	2300      	movs	r3, #0
 8009140:	623b      	str	r3, [r7, #32]
 8009142:	e00b      	b.n	800915c <SEGGER_SYSVIEW_Print+0x4c>
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	b2da      	uxtb	r2, r3
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	1c59      	adds	r1, r3, #1
 800914c:	6279      	str	r1, [r7, #36]	; 0x24
 800914e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	09db      	lsrs	r3, r3, #7
 800915a:	623b      	str	r3, [r7, #32]
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	2b7f      	cmp	r3, #127	; 0x7f
 8009160:	d8f0      	bhi.n	8009144 <SEGGER_SYSVIEW_Print+0x34>
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	627a      	str	r2, [r7, #36]	; 0x24
 8009168:	6a3a      	ldr	r2, [r7, #32]
 800916a:	b2d2      	uxtb	r2, r2
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	61fb      	str	r3, [r7, #28]
 8009176:	2300      	movs	r3, #0
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	e00b      	b.n	8009194 <SEGGER_SYSVIEW_Print+0x84>
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	b2da      	uxtb	r2, r3
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	61f9      	str	r1, [r7, #28]
 8009186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	09db      	lsrs	r3, r3, #7
 8009192:	61bb      	str	r3, [r7, #24]
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	2b7f      	cmp	r3, #127	; 0x7f
 8009198:	d8f0      	bhi.n	800917c <SEGGER_SYSVIEW_Print+0x6c>
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	61fa      	str	r2, [r7, #28]
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	b2d2      	uxtb	r2, r2
 80091a4:	701a      	strb	r2, [r3, #0]
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80091aa:	221a      	movs	r2, #26
 80091ac:	68f9      	ldr	r1, [r7, #12]
 80091ae:	6938      	ldr	r0, [r7, #16]
 80091b0:	f7fe fd40 	bl	8007c34 <_SendPacket>
  RECORD_END();
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	f383 8811 	msr	BASEPRI, r3
}
 80091ba:	bf00      	nop
 80091bc:	3728      	adds	r7, #40	; 0x28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	200143f8 	.word	0x200143f8

080091c8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08a      	sub	sp, #40	; 0x28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80091d0:	f3ef 8311 	mrs	r3, BASEPRI
 80091d4:	f04f 0120 	mov.w	r1, #32
 80091d8:	f381 8811 	msr	BASEPRI, r1
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	4827      	ldr	r0, [pc, #156]	; (800927c <SEGGER_SYSVIEW_Warn+0xb4>)
 80091e0:	f7fe fc3a 	bl	8007a58 <_PreparePacket>
 80091e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80091e6:	2280      	movs	r2, #128	; 0x80
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	6938      	ldr	r0, [r7, #16]
 80091ec:	f7fe fbe4 	bl	80079b8 <_EncodeStr>
 80091f0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
 80091f6:	2301      	movs	r3, #1
 80091f8:	623b      	str	r3, [r7, #32]
 80091fa:	e00b      	b.n	8009214 <SEGGER_SYSVIEW_Warn+0x4c>
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	1c59      	adds	r1, r3, #1
 8009204:	6279      	str	r1, [r7, #36]	; 0x24
 8009206:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800920a:	b2d2      	uxtb	r2, r2
 800920c:	701a      	strb	r2, [r3, #0]
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	09db      	lsrs	r3, r3, #7
 8009212:	623b      	str	r3, [r7, #32]
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	2b7f      	cmp	r3, #127	; 0x7f
 8009218:	d8f0      	bhi.n	80091fc <SEGGER_SYSVIEW_Warn+0x34>
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	627a      	str	r2, [r7, #36]	; 0x24
 8009220:	6a3a      	ldr	r2, [r7, #32]
 8009222:	b2d2      	uxtb	r2, r2
 8009224:	701a      	strb	r2, [r3, #0]
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	61fb      	str	r3, [r7, #28]
 800922e:	2300      	movs	r3, #0
 8009230:	61bb      	str	r3, [r7, #24]
 8009232:	e00b      	b.n	800924c <SEGGER_SYSVIEW_Warn+0x84>
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	b2da      	uxtb	r2, r3
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	1c59      	adds	r1, r3, #1
 800923c:	61f9      	str	r1, [r7, #28]
 800923e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	09db      	lsrs	r3, r3, #7
 800924a:	61bb      	str	r3, [r7, #24]
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	2b7f      	cmp	r3, #127	; 0x7f
 8009250:	d8f0      	bhi.n	8009234 <SEGGER_SYSVIEW_Warn+0x6c>
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	61fa      	str	r2, [r7, #28]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	b2d2      	uxtb	r2, r2
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009262:	221a      	movs	r2, #26
 8009264:	68f9      	ldr	r1, [r7, #12]
 8009266:	6938      	ldr	r0, [r7, #16]
 8009268:	f7fe fce4 	bl	8007c34 <_SendPacket>
  RECORD_END();
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f383 8811 	msr	BASEPRI, r3
}
 8009272:	bf00      	nop
 8009274:	3728      	adds	r7, #40	; 0x28
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	200143f8 	.word	0x200143f8

08009280 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8009284:	4803      	ldr	r0, [pc, #12]	; (8009294 <_cbSendSystemDesc+0x14>)
 8009286:	f7ff fc31 	bl	8008aec <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800928a:	4803      	ldr	r0, [pc, #12]	; (8009298 <_cbSendSystemDesc+0x18>)
 800928c:	f7ff fc2e 	bl	8008aec <SEGGER_SYSVIEW_SendSysDesc>
}
 8009290:	bf00      	nop
 8009292:	bd80      	pop	{r7, pc}
 8009294:	08009804 	.word	0x08009804
 8009298:	08009848 	.word	0x08009848

0800929c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80092a0:	4b06      	ldr	r3, [pc, #24]	; (80092bc <SEGGER_SYSVIEW_Conf+0x20>)
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	4b05      	ldr	r3, [pc, #20]	; (80092bc <SEGGER_SYSVIEW_Conf+0x20>)
 80092a6:	6819      	ldr	r1, [r3, #0]
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <SEGGER_SYSVIEW_Conf+0x24>)
 80092aa:	4a06      	ldr	r2, [pc, #24]	; (80092c4 <SEGGER_SYSVIEW_Conf+0x28>)
 80092ac:	f7fe feee 	bl	800808c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80092b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80092b4:	f7fe ff2e 	bl	8008114 <SEGGER_SYSVIEW_SetRAMBase>
}
 80092b8:	bf00      	nop
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20000000 	.word	0x20000000
 80092c0:	08009281 	.word	0x08009281
 80092c4:	08009904 	.word	0x08009904

080092c8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80092c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80092ce:	2300      	movs	r3, #0
 80092d0:	607b      	str	r3, [r7, #4]
 80092d2:	e033      	b.n	800933c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80092d4:	491e      	ldr	r1, [pc, #120]	; (8009350 <_cbSendTaskList+0x88>)
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	4613      	mov	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	491a      	ldr	r1, [pc, #104]	; (8009350 <_cbSendTaskList+0x88>)
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	3304      	adds	r3, #4
 80092f4:	6819      	ldr	r1, [r3, #0]
 80092f6:	4c16      	ldr	r4, [pc, #88]	; (8009350 <_cbSendTaskList+0x88>)
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4423      	add	r3, r4
 8009304:	3308      	adds	r3, #8
 8009306:	681c      	ldr	r4, [r3, #0]
 8009308:	4d11      	ldr	r5, [pc, #68]	; (8009350 <_cbSendTaskList+0x88>)
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	442b      	add	r3, r5
 8009316:	330c      	adds	r3, #12
 8009318:	681d      	ldr	r5, [r3, #0]
 800931a:	4e0d      	ldr	r6, [pc, #52]	; (8009350 <_cbSendTaskList+0x88>)
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4433      	add	r3, r6
 8009328:	3310      	adds	r3, #16
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	462b      	mov	r3, r5
 8009330:	4622      	mov	r2, r4
 8009332:	f000 f8bd 	bl	80094b0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3301      	adds	r3, #1
 800933a:	607b      	str	r3, [r7, #4]
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <_cbSendTaskList+0x8c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	429a      	cmp	r2, r3
 8009344:	d3c6      	bcc.n	80092d4 <_cbSendTaskList+0xc>
  }
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009350:	200144dc 	.word	0x200144dc
 8009354:	2001457c 	.word	0x2001457c

08009358 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8009360:	f7fc fa9c 	bl	800589c <xTaskGetTickCountFromISR>
 8009364:	4603      	mov	r3, r0
 8009366:	2200      	movs	r2, #0
 8009368:	469a      	mov	sl, r3
 800936a:	4693      	mov	fp, r2
 800936c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8009370:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	f04f 0a00 	mov.w	sl, #0
 800937c:	f04f 0b00 	mov.w	fp, #0
 8009380:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009384:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009388:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800938c:	4652      	mov	r2, sl
 800938e:	465b      	mov	r3, fp
 8009390:	1a14      	subs	r4, r2, r0
 8009392:	eb63 0501 	sbc.w	r5, r3, r1
 8009396:	f04f 0200 	mov.w	r2, #0
 800939a:	f04f 0300 	mov.w	r3, #0
 800939e:	00ab      	lsls	r3, r5, #2
 80093a0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80093a4:	00a2      	lsls	r2, r4, #2
 80093a6:	4614      	mov	r4, r2
 80093a8:	461d      	mov	r5, r3
 80093aa:	eb14 0800 	adds.w	r8, r4, r0
 80093ae:	eb45 0901 	adc.w	r9, r5, r1
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093c6:	4690      	mov	r8, r2
 80093c8:	4699      	mov	r9, r3
 80093ca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80093ce:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80093d2:	4610      	mov	r0, r2
 80093d4:	4619      	mov	r1, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080093e0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80093ee:	2205      	movs	r2, #5
 80093f0:	492b      	ldr	r1, [pc, #172]	; (80094a0 <SYSVIEW_AddTask+0xc0>)
 80093f2:	68b8      	ldr	r0, [r7, #8]
 80093f4:	f000 f8a2 	bl	800953c <memcmp>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d04b      	beq.n	8009496 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80093fe:	4b29      	ldr	r3, [pc, #164]	; (80094a4 <SYSVIEW_AddTask+0xc4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b07      	cmp	r3, #7
 8009404:	d903      	bls.n	800940e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8009406:	4828      	ldr	r0, [pc, #160]	; (80094a8 <SYSVIEW_AddTask+0xc8>)
 8009408:	f7ff fede 	bl	80091c8 <SEGGER_SYSVIEW_Warn>
    return;
 800940c:	e044      	b.n	8009498 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800940e:	4b25      	ldr	r3, [pc, #148]	; (80094a4 <SYSVIEW_AddTask+0xc4>)
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	4926      	ldr	r1, [pc, #152]	; (80094ac <SYSVIEW_AddTask+0xcc>)
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8009422:	4b20      	ldr	r3, [pc, #128]	; (80094a4 <SYSVIEW_AddTask+0xc4>)
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	4921      	ldr	r1, [pc, #132]	; (80094ac <SYSVIEW_AddTask+0xcc>)
 8009428:	4613      	mov	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	440b      	add	r3, r1
 8009432:	3304      	adds	r3, #4
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8009438:	4b1a      	ldr	r3, [pc, #104]	; (80094a4 <SYSVIEW_AddTask+0xc4>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	491b      	ldr	r1, [pc, #108]	; (80094ac <SYSVIEW_AddTask+0xcc>)
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	3308      	adds	r3, #8
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800944e:	4b15      	ldr	r3, [pc, #84]	; (80094a4 <SYSVIEW_AddTask+0xc4>)
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	4916      	ldr	r1, [pc, #88]	; (80094ac <SYSVIEW_AddTask+0xcc>)
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	440b      	add	r3, r1
 800945e:	330c      	adds	r3, #12
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8009464:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <SYSVIEW_AddTask+0xc4>)
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	4910      	ldr	r1, [pc, #64]	; (80094ac <SYSVIEW_AddTask+0xcc>)
 800946a:	4613      	mov	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	440b      	add	r3, r1
 8009474:	3310      	adds	r3, #16
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800947a:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <SYSVIEW_AddTask+0xc4>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3301      	adds	r3, #1
 8009480:	4a08      	ldr	r2, [pc, #32]	; (80094a4 <SYSVIEW_AddTask+0xc4>)
 8009482:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	68b9      	ldr	r1, [r7, #8]
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 f80e 	bl	80094b0 <SYSVIEW_SendTaskInfo>
 8009494:	e000      	b.n	8009498 <SYSVIEW_AddTask+0xb8>
    return;
 8009496:	bf00      	nop

}
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	08009858 	.word	0x08009858
 80094a4:	2001457c 	.word	0x2001457c
 80094a8:	08009860 	.word	0x08009860
 80094ac:	200144dc 	.word	0x200144dc

080094b0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08a      	sub	sp, #40	; 0x28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80094be:	f107 0314 	add.w	r3, r7, #20
 80094c2:	2214      	movs	r2, #20
 80094c4:	2100      	movs	r1, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 f856 	bl	8009578 <memset>
  TaskInfo.TaskID     = TaskID;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80094e0:	f107 0314 	add.w	r3, r7, #20
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff fa09 	bl	80088fc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80094ea:	bf00      	nop
 80094ec:	3728      	adds	r7, #40	; 0x28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <__libc_init_array>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	4d0d      	ldr	r5, [pc, #52]	; (800952c <__libc_init_array+0x38>)
 80094f8:	4c0d      	ldr	r4, [pc, #52]	; (8009530 <__libc_init_array+0x3c>)
 80094fa:	1b64      	subs	r4, r4, r5
 80094fc:	10a4      	asrs	r4, r4, #2
 80094fe:	2600      	movs	r6, #0
 8009500:	42a6      	cmp	r6, r4
 8009502:	d109      	bne.n	8009518 <__libc_init_array+0x24>
 8009504:	4d0b      	ldr	r5, [pc, #44]	; (8009534 <__libc_init_array+0x40>)
 8009506:	4c0c      	ldr	r4, [pc, #48]	; (8009538 <__libc_init_array+0x44>)
 8009508:	f000 f83e 	bl	8009588 <_init>
 800950c:	1b64      	subs	r4, r4, r5
 800950e:	10a4      	asrs	r4, r4, #2
 8009510:	2600      	movs	r6, #0
 8009512:	42a6      	cmp	r6, r4
 8009514:	d105      	bne.n	8009522 <__libc_init_array+0x2e>
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	f855 3b04 	ldr.w	r3, [r5], #4
 800951c:	4798      	blx	r3
 800951e:	3601      	adds	r6, #1
 8009520:	e7ee      	b.n	8009500 <__libc_init_array+0xc>
 8009522:	f855 3b04 	ldr.w	r3, [r5], #4
 8009526:	4798      	blx	r3
 8009528:	3601      	adds	r6, #1
 800952a:	e7f2      	b.n	8009512 <__libc_init_array+0x1e>
 800952c:	08009914 	.word	0x08009914
 8009530:	08009914 	.word	0x08009914
 8009534:	08009914 	.word	0x08009914
 8009538:	08009918 	.word	0x08009918

0800953c <memcmp>:
 800953c:	b510      	push	{r4, lr}
 800953e:	3901      	subs	r1, #1
 8009540:	4402      	add	r2, r0
 8009542:	4290      	cmp	r0, r2
 8009544:	d101      	bne.n	800954a <memcmp+0xe>
 8009546:	2000      	movs	r0, #0
 8009548:	e005      	b.n	8009556 <memcmp+0x1a>
 800954a:	7803      	ldrb	r3, [r0, #0]
 800954c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009550:	42a3      	cmp	r3, r4
 8009552:	d001      	beq.n	8009558 <memcmp+0x1c>
 8009554:	1b18      	subs	r0, r3, r4
 8009556:	bd10      	pop	{r4, pc}
 8009558:	3001      	adds	r0, #1
 800955a:	e7f2      	b.n	8009542 <memcmp+0x6>

0800955c <memcpy>:
 800955c:	440a      	add	r2, r1
 800955e:	4291      	cmp	r1, r2
 8009560:	f100 33ff 	add.w	r3, r0, #4294967295
 8009564:	d100      	bne.n	8009568 <memcpy+0xc>
 8009566:	4770      	bx	lr
 8009568:	b510      	push	{r4, lr}
 800956a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800956e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009572:	4291      	cmp	r1, r2
 8009574:	d1f9      	bne.n	800956a <memcpy+0xe>
 8009576:	bd10      	pop	{r4, pc}

08009578 <memset>:
 8009578:	4402      	add	r2, r0
 800957a:	4603      	mov	r3, r0
 800957c:	4293      	cmp	r3, r2
 800957e:	d100      	bne.n	8009582 <memset+0xa>
 8009580:	4770      	bx	lr
 8009582:	f803 1b01 	strb.w	r1, [r3], #1
 8009586:	e7f9      	b.n	800957c <memset+0x4>

08009588 <_init>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr

08009594 <_fini>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	bf00      	nop
 8009598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959a:	bc08      	pop	{r3}
 800959c:	469e      	mov	lr, r3
 800959e:	4770      	bx	lr
