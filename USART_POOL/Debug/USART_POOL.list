
USART_POOL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bfc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  08008dac  08008dac  00018dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009110  08009110  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009118  08009118  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009118  08009118  00019118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800911c  0800911c  0001911c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00014590  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200145a8  200145a8  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8e3  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b28  00000000  00000000  0003a92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003e458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  0003fad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002738c  00000000  00000000  00040fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e68d  00000000  00000000  0006832c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8c49  00000000  00000000  000869b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f602  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d4c  00000000  00000000  0016f654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000018 	.word	0x20000018
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008d94 	.word	0x08008d94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	08008d94 	.word	0x08008d94

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012f30 	.word	0x20012f30

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <RedOn>:
LED BlueLed = { BlueOn, BlueOff }; // initialize the BlueLed struct




void RedOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);}
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <RedOn+0x14>)
 8000594:	f001 ff34 	bl	8002400 <HAL_GPIO_WritePin>
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021800 	.word	0x40021800

080005a0 <RedOff>:
void RedOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);}
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <RedOff+0x14>)
 80005ac:	f001 ff28 	bl	8002400 <HAL_GPIO_WritePin>
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021800 	.word	0x40021800

080005b8 <initUart1Pins>:
#include "UartQuickDirtyInit.h"
#include <stm32f4xx_hal.h>
#include <main.h>

void initUart1Pins( void )
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

	//PA9 is USART1_RX PA10 is USART1_TX
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005d0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005de:	2307      	movs	r3, #7
 80005e0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4619      	mov	r1, r3
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <initUart1Pins+0x3c>)
 80005e8:	f001 fbe8 	bl	8001dbc <HAL_GPIO_Init>
}
 80005ec:	bf00      	nop
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020000 	.word	0x40020000

080005f8 <initUart5Pins>:

void initUart5Pins( void )
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800060c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000610:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	2302      	movs	r3, #2
 8000614:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061a:	2303      	movs	r3, #3
 800061c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800061e:	2308      	movs	r3, #8
 8000620:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <initUart5Pins+0x5c>)
 8000628:	f001 fbc8 	bl	8001dbc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800062c:	2304      	movs	r3, #4
 800062e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000630:	2302      	movs	r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000638:	2303      	movs	r3, #3
 800063a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800063c:	2308      	movs	r3, #8
 800063e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	4619      	mov	r1, r3
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <initUart5Pins+0x60>)
 8000646:	f001 fbb9 	bl	8001dbc <HAL_GPIO_Init>

}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40020800 	.word	0x40020800
 8000658:	40020c00 	.word	0x40020c00

0800065c <STM_UartInit>:
 * @param Baudrate desired baudrate the UART will be setup to use
 * @param DmaTx pointer to DMA struct to use when transmitting via DMA
 * @param DmaRx pointer to DMA struct to use when receiving via DMA
 */
void STM_UartInit( USART_TypeDef* STM_UART_PERIPH, uint32_t Baudrate, DMA_HandleTypeDef* DmaTx, DMA_HandleTypeDef* DmaRx )
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b098      	sub	sp, #96	; 0x60
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
 8000668:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef retVal;
	UART_HandleTypeDef uartInitStruct;
	assert_param(	STM_UART_PERIPH == USART1 ||
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4a2e      	ldr	r2, [pc, #184]	; (8000728 <STM_UartInit+0xcc>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d007      	beq.n	8000682 <STM_UartInit+0x26>
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4a2d      	ldr	r2, [pc, #180]	; (800072c <STM_UartInit+0xd0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d003      	beq.n	8000682 <STM_UartInit+0x26>
 800067a:	2150      	movs	r1, #80	; 0x50
 800067c:	482c      	ldr	r0, [pc, #176]	; (8000730 <STM_UartInit+0xd4>)
 800067e:	f000 fc93 	bl	8000fa8 <assert_failed>
					STM_UART_PERIPH == UART5 );

	if(STM_UART_PERIPH == USART1)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <STM_UartInit+0xcc>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d110      	bne.n	80006ac <STM_UartInit+0x50>
	{
		initUart1Pins();
 800068a:	f7ff ff95 	bl	80005b8 <initUart1Pins>
		__USART1_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <STM_UartInit+0xd8>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	4a27      	ldr	r2, [pc, #156]	; (8000734 <STM_UartInit+0xd8>)
 8000698:	f043 0310 	orr.w	r3, r3, #16
 800069c:	6453      	str	r3, [r2, #68]	; 0x44
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <STM_UartInit+0xd8>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	f003 0310 	and.w	r3, r3, #16
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	e013      	b.n	80006d4 <STM_UartInit+0x78>
	}
	else if (STM_UART_PERIPH == UART5)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4a1f      	ldr	r2, [pc, #124]	; (800072c <STM_UartInit+0xd0>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d10f      	bne.n	80006d4 <STM_UartInit+0x78>
	{
		initUart5Pins();
 80006b4:	f7ff ffa0 	bl	80005f8 <initUart5Pins>
		__UART5_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <STM_UartInit+0xd8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <STM_UartInit+0xd8>)
 80006c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <STM_UartInit+0xd8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]
	}

	uartInitStruct.Instance = STM_UART_PERIPH;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	61bb      	str	r3, [r7, #24]
	uartInitStruct.Init.BaudRate = Baudrate;
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	61fb      	str	r3, [r7, #28]
	uartInitStruct.Init.WordLength = UART_WORDLENGTH_8B;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
	uartInitStruct.Init.StopBits = UART_STOPBITS_1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
	uartInitStruct.Init.Parity = UART_PARITY_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
	uartInitStruct.Init.Mode = UART_MODE_TX_RX;
 80006e8:	230c      	movs	r3, #12
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartInitStruct.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
	uartInitStruct.Init.OverSampling = UART_OVERSAMPLING_8;
 80006f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
	//uartInitStruct.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	uartInitStruct.hdmatx = DmaTx;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uartInitStruct.hdmarx = DmaRx;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	653b      	str	r3, [r7, #80]	; 0x50
	//uartInitStruct.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	retVal = HAL_UART_Init(&uartInitStruct);
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	4618      	mov	r0, r3
 8000704:	f003 f896 	bl	8003834 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	assert_param(retVal == HAL_OK);
 800070e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000712:	2b00      	cmp	r3, #0
 8000714:	d003      	beq.n	800071e <STM_UartInit+0xc2>
 8000716:	216c      	movs	r1, #108	; 0x6c
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <STM_UartInit+0xd4>)
 800071a:	f000 fc45 	bl	8000fa8 <assert_failed>
}
 800071e:	bf00      	nop
 8000720:	3760      	adds	r7, #96	; 0x60
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40011000 	.word	0x40011000
 800072c:	40005000 	.word	0x40005000
 8000730:	08008dac 	.word	0x08008dac
 8000734:	40023800 	.word	0x40023800

08000738 <SetupUart5ExternalSim>:
 * @param Baudrate desired baudrate for the UART4
 *
 * This is a quick and dirty setup. . .
 */
void SetupUart5ExternalSim( uint32_t BaudRate )
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	//setup DMA
	uart5TxDmaSetup();
 8000740:	f000 f81a 	bl	8000778 <uart5TxDmaSetup>

	//GPIO pins are setup in BSP/Nucleo_F767ZI_Init
	STM_UartInit(UART5, BaudRate, &hdma_uart5_tx, NULL);
 8000744:	2300      	movs	r3, #0
 8000746:	4a09      	ldr	r2, [pc, #36]	; (800076c <SetupUart5ExternalSim+0x34>)
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <SetupUart5ExternalSim+0x38>)
 800074c:	f7ff ff86 	bl	800065c <STM_UartInit>

	//also enable DMA for UART5 Transmits
	UART5->CR3 |= USART_CR3_DMAT;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <SetupUart5ExternalSim+0x38>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <SetupUart5ExternalSim+0x38>)
 8000756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075a:	6153      	str	r3, [r2, #20]
	 *	start the repeating DMA transfer.  Eventually, non-circular
	 *	receivers will loose a character here or there at high baudrates.
	 *	When this happens, SEGGER_SYSVIEW_Print() will stop printing when it hits
	 *	the first NULL character.
	 */
	uart5TxDmaStartRepeat(uart5Msg, sizeof(uart5Msg));
 800075c:	2125      	movs	r1, #37	; 0x25
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <SetupUart5ExternalSim+0x3c>)
 8000760:	f000 f874 	bl	800084c <uart5TxDmaStartRepeat>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000034 	.word	0x20000034
 8000770:	40005000 	.word	0x40005000
 8000774:	080090a0 	.word	0x080090a0

08000778 <uart5TxDmaSetup>:

static void uart5TxDmaSetup( void )
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <uart5TxDmaSetup+0xc0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <uart5TxDmaSetup+0xc0>)
 8000788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <uart5TxDmaSetup+0xc0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Stream7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	202f      	movs	r0, #47	; 0x2f
 80007a0:	f000 fef2 	bl	8001588 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80007a4:	202f      	movs	r0, #47	; 0x2f
 80007a6:	f000 ff1b 	bl	80015e0 <HAL_NVIC_EnableIRQ>

	//initialize the DMA peripheral to transfer uart4Msg
	//to UART4 repeatedly
	memset(&hdma_uart5_tx, 0, sizeof(hdma_uart5_tx));
 80007aa:	2260      	movs	r2, #96	; 0x60
 80007ac:	2100      	movs	r1, #0
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007b0:	f008 fae8 	bl	8008d84 <memset>
	hdma_uart5_tx.Instance = DMA1_Stream7;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007b6:	4a22      	ldr	r2, [pc, #136]	; (8000840 <uart5TxDmaSetup+0xc8>)
 80007b8:	601a      	str	r2, [r3, #0]
	hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;			//channel 4 is for UART5 Tx
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007c0:	605a      	str	r2, [r3, #4]
	hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;	//transfering out of memory and into the peripheral register
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007c4:	2240      	movs	r2, #64	; 0x40
 80007c6:	609a      	str	r2, [r3, #8]
	hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;	//no fifo
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_uart5_tx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
	hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;			//increment 1 byte at a time
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e0:	611a      	str	r2, [r3, #16]
	hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;				//this will automatically restart the transfer at the beginning after it has finished
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e8:	61da      	str	r2, [r3, #28]
	hdma_uart5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;	//write 1 at a time to the peripheral
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
	hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;		//always keep the peripheral address the same (the Tx data register is always in the same location)
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
	hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
	//we're setting low priority since this is meant to be simulated data - the DMA
	//transfers of the active code should take priority
	hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <uart5TxDmaSetup+0xc4>)
 80007fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000802:	621a      	str	r2, [r3, #32]
	assert_param(HAL_DMA_Init(&hdma_uart5_tx) == HAL_OK);
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <uart5TxDmaSetup+0xc4>)
 8000806:	f000 ff03 	bl	8001610 <HAL_DMA_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d003      	beq.n	8000818 <uart5TxDmaSetup+0xa0>
 8000810:	2163      	movs	r1, #99	; 0x63
 8000812:	480c      	ldr	r0, [pc, #48]	; (8000844 <uart5TxDmaSetup+0xcc>)
 8000814:	f000 fbc8 	bl	8000fa8 <assert_failed>
	DMA1_Stream7->CR &= ~DMA_SxCR_EN;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <uart5TxDmaSetup+0xc8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a08      	ldr	r2, [pc, #32]	; (8000840 <uart5TxDmaSetup+0xc8>)
 800081e:	f023 0301 	bic.w	r3, r3, #1
 8000822:	6013      	str	r3, [r2, #0]

	//set the DMA transmit mode flag to enable DMA transfers
	UART5->CR3 |= USART_CR3_DMAT;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <uart5TxDmaSetup+0xd0>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <uart5TxDmaSetup+0xd0>)
 800082a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082e:	6153      	str	r3, [r2, #20]
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	20000034 	.word	0x20000034
 8000840:	400260b8 	.word	0x400260b8
 8000844:	08008dd0 	.word	0x08008dd0
 8000848:	40005000 	.word	0x40005000

0800084c <uart5TxDmaStartRepeat>:
 * that will automatically repeat after it is finished
 * @param Msg pointer to array to transfer
 * @param Len number of elements in the array
 */
static void uart5TxDmaStartRepeat( const uint8_t* Msg, uint16_t Len )
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]

	//clear the transfer complete flag to make sure our transfer starts
	//UART5->CR |= USART_SR_TC;
	UART5->SR &= ~USART_SR_TC;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <uart5TxDmaStartRepeat+0x3c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <uart5TxDmaStartRepeat+0x3c>)
 800085e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000862:	6013      	str	r3, [r2, #0]
	assert_param(HAL_DMA_Start(&hdma_uart5_tx, (uint32_t)Msg, (uint32_t)&(UART5->DR), Len) == HAL_OK);
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	4a08      	ldr	r2, [pc, #32]	; (800088c <uart5TxDmaStartRepeat+0x40>)
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <uart5TxDmaStartRepeat+0x44>)
 800086c:	f001 f8ea 	bl	8001a44 <HAL_DMA_Start>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d003      	beq.n	800087e <uart5TxDmaStartRepeat+0x32>
 8000876:	2176      	movs	r1, #118	; 0x76
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <uart5TxDmaStartRepeat+0x48>)
 800087a:	f000 fb95 	bl	8000fa8 <assert_failed>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40005000 	.word	0x40005000
 800088c:	40005004 	.word	0x40005004
 8000890:	20000034 	.word	0x20000034
 8000894:	08008dd0 	.word	0x08008dd0

08000898 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
	//shouldn't ever get here - interrupts are not enabled
	while(1);
 800089c:	e7fe      	b.n	800089c <DMA1_Stream7_IRQHandler+0x4>
	...

080008a0 <main>:
void uartPrintOutTask( void* NotUsed);

static QueueHandle_t uart1_BytesReceived = NULL;

int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af02      	add	r7, sp, #8
	RedLed.Off();  // Code for bug-fix
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <main+0x7c>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4798      	blx	r3

	HWInit();
 80008ac:	f000 f880 	bl	80009b0 <HWInit>
	SetupUart5ExternalSim(9600);
 80008b0:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80008b4:	f7ff ff40 	bl	8000738 <SetupUart5ExternalSim>
	SEGGER_SYSVIEW_Conf();
 80008b8:	f008 f8f6 	bl	8008aa8 <SEGGER_SYSVIEW_Conf>
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 fe43 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

	//setup tasks, making sure they have been properly created before moving on
	assert_param(xTaskCreate(polledUartReceive, "polledUartRx", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 80008c2:	2300      	movs	r3, #0
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	2302      	movs	r3, #2
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	4914      	ldr	r1, [pc, #80]	; (8000920 <main+0x80>)
 80008d0:	4814      	ldr	r0, [pc, #80]	; (8000924 <main+0x84>)
 80008d2:	f004 fda7 	bl	8005424 <xTaskCreate>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d003      	beq.n	80008e4 <main+0x44>
 80008dc:	2137      	movs	r1, #55	; 0x37
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <main+0x88>)
 80008e0:	f000 fb62 	bl	8000fa8 <assert_failed>
	assert_param(xTaskCreate(uartPrintOutTask, "uartPrintTask", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL) == pdPASS);
 80008e4:	2300      	movs	r3, #0
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	2303      	movs	r3, #3
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2300      	movs	r3, #0
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	490e      	ldr	r1, [pc, #56]	; (800092c <main+0x8c>)
 80008f2:	480f      	ldr	r0, [pc, #60]	; (8000930 <main+0x90>)
 80008f4:	f004 fd96 	bl	8005424 <xTaskCreate>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d003      	beq.n	8000906 <main+0x66>
 80008fe:	2138      	movs	r1, #56	; 0x38
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <main+0x88>)
 8000902:	f000 fb51 	bl	8000fa8 <assert_failed>

	uart1_BytesReceived = xQueueCreate(10, sizeof(char));
 8000906:	2200      	movs	r2, #0
 8000908:	2101      	movs	r1, #1
 800090a:	200a      	movs	r0, #10
 800090c:	f004 f898 	bl	8004a40 <xQueueGenericCreate>
 8000910:	4603      	mov	r3, r0
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <main+0x94>)
 8000914:	6013      	str	r3, [r2, #0]
//	{
//		UART4->TDR = i;
//		while(!(UART4->ISR & USART_ISR_TXE));
//	}
	//start the scheduler - shouldn't return unless there's a problem
	vTaskStartScheduler();
 8000916:	f004 fee9 	bl	80056ec <vTaskStartScheduler>

	//if you've wound up here, there is likely an issue with overrunning the freeRTOS heap
	while(1)
 800091a:	e7fe      	b.n	800091a <main+0x7a>
 800091c:	20000000 	.word	0x20000000
 8000920:	08008de8 	.word	0x08008de8
 8000924:	08000969 	.word	0x08000969
 8000928:	08008df8 	.word	0x08008df8
 800092c:	08008e14 	.word	0x08008e14
 8000930:	08000939 	.word	0x08000939
 8000934:	20000094 	.word	0x20000094

08000938 <uartPrintOutTask>:
	{
	}
}

void uartPrintOutTask( void* NotUsed)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	char nextByte;

	while(1)
	{
		xQueueReceive(uart1_BytesReceived, &nextByte, portMAX_DELAY);
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <uartPrintOutTask+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f107 010f 	add.w	r1, r7, #15
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	4618      	mov	r0, r3
 800094e:	f004 fae3 	bl	8004f18 <xQueueReceive>
		//HAL_UART_Transmit(USART1, (uint8_t *)&nextByte, sizeof(nextByte), portMAX_DELAY);
		SEGGER_SYSVIEW_PrintfHost("%c", nextByte);
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4619      	mov	r1, r3
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <uartPrintOutTask+0x2c>)
 8000958:	f008 f828 	bl	80089ac <SEGGER_SYSVIEW_PrintfHost>
		xQueueReceive(uart1_BytesReceived, &nextByte, portMAX_DELAY);
 800095c:	e7f0      	b.n	8000940 <uartPrintOutTask+0x8>
 800095e:	bf00      	nop
 8000960:	20000094 	.word	0x20000094
 8000964:	08008e24 	.word	0x08008e24

08000968 <polledUartReceive>:
/**
 * This receive task uses a queue to directly monitor
 * the USART2 peripheral.
 */
void polledUartReceive( void* NotUsed )
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint8_t nextByte;
	//setup UART
	STM_UartInit(USART1, 9600, NULL, NULL);
 8000970:	2300      	movs	r3, #0
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <polledUartReceive+0x40>)
 800097a:	f7ff fe6f 	bl	800065c <STM_UartInit>
	while(1)
	{
		while(!(USART1->SR & USART_SR_RXNE));
 800097e:	bf00      	nop
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <polledUartReceive+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 0320 	and.w	r3, r3, #32
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0f9      	beq.n	8000980 <polledUartReceive+0x18>
		nextByte = USART1->DR;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <polledUartReceive+0x40>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	73fb      	strb	r3, [r7, #15]
		xQueueSend(uart1_BytesReceived, &nextByte, 0);
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <polledUartReceive+0x44>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	f107 010f 	add.w	r1, r7, #15
 800099c:	2300      	movs	r3, #0
 800099e:	2200      	movs	r2, #0
 80009a0:	f004 f8d6 	bl	8004b50 <xQueueGenericSend>
		while(!(USART1->SR & USART_SR_RXNE));
 80009a4:	e7eb      	b.n	800097e <polledUartReceive+0x16>
 80009a6:	bf00      	nop
 80009a8:	40011000 	.word	0x40011000
 80009ac:	20000094 	.word	0x20000094

080009b0 <HWInit>:
 * Initialize the minimum amount of hardware that will be used in all examples
 * Other initialization might also be necessary (PWM for LED's, USART's, USB, etc)
 * and should be performed after the initial call to HWInit
 */
void HWInit( void )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	HAL_Init();
 80009b4:	f000 fcec 	bl	8001390 <HAL_Init>
	SystemClock_Config();
 80009b8:	f000 f806 	bl	80009c8 <SystemClock_Config>
	gpioPinsInit();			//initialize GPIO lines for LED's
 80009bc:	f000 f870 	bl	8000aa0 <gpioPinsInit>
	rngInit();
 80009c0:	f000 fac8 	bl	8000f54 <rngInit>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <SystemClock_Config>:
	return RNG->DR %Max + Min;
}


void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	; 0x50
 80009cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	2230      	movs	r2, #48	; 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f008 f9d4 	bl	8008d84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <SystemClock_Config+0xd0>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <SystemClock_Config+0xd0>)
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <SystemClock_Config+0xd0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <SystemClock_Config+0xd4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a14:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <SystemClock_Config+0xd4>)
 8000a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <SystemClock_Config+0xd4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	2310      	movs	r3, #16
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000a40:	2332      	movs	r3, #50	; 0x32
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fd07 	bl	8002464 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000a5c:	f000 fa9c 	bl	8000f98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000a6c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a70:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a76:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 f818 	bl	8002ab4 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000a8a:	f000 fa85 	bl	8000f98 <Error_Handler>
	}

}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	; 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <gpioPinsInit>:
/**
  * Initialize all relevant GPIO lines for LED's used in examples, as well as
  * USB pins
  */
static void gpioPinsInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
 8000aba:	4bb2      	ldr	r3, [pc, #712]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4ab1      	ldr	r2, [pc, #708]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4baf      	ldr	r3, [pc, #700]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	623b      	str	r3, [r7, #32]
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
 8000ad6:	4bab      	ldr	r3, [pc, #684]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4aaa      	ldr	r2, [pc, #680]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4ba8      	ldr	r3, [pc, #672]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	4ba4      	ldr	r3, [pc, #656]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4aa3      	ldr	r2, [pc, #652]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4ba1      	ldr	r3, [pc, #644]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	4b9d      	ldr	r3, [pc, #628]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a9c      	ldr	r2, [pc, #624]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b9a      	ldr	r3, [pc, #616]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b96      	ldr	r3, [pc, #600]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a95      	ldr	r2, [pc, #596]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b93      	ldr	r3, [pc, #588]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b8f      	ldr	r3, [pc, #572]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a8e      	ldr	r2, [pc, #568]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b8c      	ldr	r3, [pc, #560]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b88      	ldr	r3, [pc, #544]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a87      	ldr	r2, [pc, #540]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b85      	ldr	r3, [pc, #532]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b81      	ldr	r3, [pc, #516]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a80      	ldr	r2, [pc, #512]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b7e      	ldr	r3, [pc, #504]	; (8000d84 <gpioPinsInit+0x2e4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2116      	movs	r1, #22
 8000b9a:	487b      	ldr	r0, [pc, #492]	; (8000d88 <gpioPinsInit+0x2e8>)
 8000b9c:	f001 fc30 	bl	8002400 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	4879      	ldr	r0, [pc, #484]	; (8000d8c <gpioPinsInit+0x2ec>)
 8000ba6:	f001 fc2b 	bl	8002400 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000bb0:	4877      	ldr	r0, [pc, #476]	; (8000d90 <gpioPinsInit+0x2f0>)
 8000bb2:	f001 fc25 	bl	8002400 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bbc:	4875      	ldr	r0, [pc, #468]	; (8000d94 <gpioPinsInit+0x2f4>)
 8000bbe:	f001 fc1f 	bl	8002400 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
	                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
	                           A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000bc2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
			|A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
			|A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	486e      	ldr	r0, [pc, #440]	; (8000d98 <gpioPinsInit+0x2f8>)
 8000be0:	f001 f8ec 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000be4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4865      	ldr	r0, [pc, #404]	; (8000d98 <gpioPinsInit+0x2f8>)
 8000c02:	f001 f8db 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pin : ENABLE_Pin */
	GPIO_InitStruct.Pin = ENABLE_Pin;
 8000c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c18:	230e      	movs	r3, #14
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	485d      	ldr	r0, [pc, #372]	; (8000d98 <gpioPinsInit+0x2f8>)
 8000c24:	f001 f8ca 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4851      	ldr	r0, [pc, #324]	; (8000d88 <gpioPinsInit+0x2e8>)
 8000c44:	f001 f8ba 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c48:	2316      	movs	r3, #22
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	484a      	ldr	r0, [pc, #296]	; (8000d88 <gpioPinsInit+0x2e8>)
 8000c60:	f001 f8ac 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c64:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c6a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4844      	ldr	r0, [pc, #272]	; (8000d8c <gpioPinsInit+0x2ec>)
 8000c7c:	f001 f89e 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
	                           R5_Pin */
	GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000c80:	f641 0358 	movw	r3, #6232	; 0x1858
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
			|R5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c92:	230e      	movs	r3, #14
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	483b      	ldr	r0, [pc, #236]	; (8000d8c <gpioPinsInit+0x2ec>)
 8000c9e:	f001 f88d 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4834      	ldr	r0, [pc, #208]	; (8000d8c <gpioPinsInit+0x2ec>)
 8000cba:	f001 f87f 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	482d      	ldr	r0, [pc, #180]	; (8000d88 <gpioPinsInit+0x2e8>)
 8000cd4:	f001 f872 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : R3_Pin R6_Pin */
	GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ce8:	2309      	movs	r3, #9
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	482a      	ldr	r0, [pc, #168]	; (8000d9c <gpioPinsInit+0x2fc>)
 8000cf4:	f001 f862 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4824      	ldr	r0, [pc, #144]	; (8000d9c <gpioPinsInit+0x2fc>)
 8000d0c:	f001 f856 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
	                           SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000d10:	f248 1333 	movw	r3, #33075	; 0x8133
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
			|SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d22:	230c      	movs	r3, #12
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4819      	ldr	r0, [pc, #100]	; (8000d94 <gpioPinsInit+0x2f4>)
 8000d2e:	f001 f845 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
	                           D8_Pin D9_Pin D10_Pin D11_Pin
	                           D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000d32:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
			|D8_Pin|D9_Pin|D10_Pin|D11_Pin
			|D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d44:	230c      	movs	r3, #12
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4814      	ldr	r0, [pc, #80]	; (8000da0 <gpioPinsInit+0x300>)
 8000d50:	f001 f834 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
	GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000d54:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d66:	230e      	movs	r3, #14
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480a      	ldr	r0, [pc, #40]	; (8000d9c <gpioPinsInit+0x2fc>)
 8000d72:	f001 f823 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000d76:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d80:	e010      	b.n	8000da4 <gpioPinsInit+0x304>
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40021400 	.word	0x40021400
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40021000 	.word	0x40021000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000dac:	230c      	movs	r3, #12
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4862      	ldr	r0, [pc, #392]	; (8000f40 <gpioPinsInit+0x4a0>)
 8000db8:	f001 f800 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	485b      	ldr	r0, [pc, #364]	; (8000f40 <gpioPinsInit+0x4a0>)
 8000dd2:	f000 fff3 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
	                           D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000dd6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
			|D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000de8:	230c      	movs	r3, #12
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4854      	ldr	r0, [pc, #336]	; (8000f44 <gpioPinsInit+0x4a4>)
 8000df4:	f000 ffe2 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8000df8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	484d      	ldr	r0, [pc, #308]	; (8000f44 <gpioPinsInit+0x4a4>)
 8000e0e:	f000 ffd5 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4846      	ldr	r0, [pc, #280]	; (8000f44 <gpioPinsInit+0x4a4>)
 8000e2c:	f000 ffc6 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
	GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e30:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e42:	230e      	movs	r3, #14
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	483e      	ldr	r0, [pc, #248]	; (8000f48 <gpioPinsInit+0x4a8>)
 8000e4e:	f000 ffb5 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
	GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000e52:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e64:	230e      	movs	r3, #14
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4837      	ldr	r0, [pc, #220]	; (8000f4c <gpioPinsInit+0x4ac>)
 8000e70:	f000 ffa4 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SDA_Pin */
	GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7a:	2312      	movs	r3, #18
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e86:	2304      	movs	r3, #4
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	482e      	ldr	r0, [pc, #184]	; (8000f4c <gpioPinsInit+0x4ac>)
 8000e92:	f000 ff93 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SCL_Pin */
	GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9c:	2312      	movs	r3, #18
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4827      	ldr	r0, [pc, #156]	; (8000f50 <gpioPinsInit+0x4b0>)
 8000eb4:	f000 ff82 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : G7_Pin B2_Pin */
	GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000eb8:	2348      	movs	r3, #72	; 0x48
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ec8:	230e      	movs	r3, #14
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481c      	ldr	r0, [pc, #112]	; (8000f44 <gpioPinsInit+0x4a4>)
 8000ed4:	f000 ff72 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : G3_Pin B4_Pin */
	GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000ed8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000eea:	2309      	movs	r3, #9
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4814      	ldr	r0, [pc, #80]	; (8000f48 <gpioPinsInit+0x4a8>)
 8000ef6:	f000 ff61 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000efa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <gpioPinsInit+0x4a8>)
 8000f14:	f000 ff52 	bl	8001dbc <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000f18:	2360      	movs	r3, #96	; 0x60
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <gpioPinsInit+0x4a0>)
 8000f34:	f000 ff42 	bl	8001dbc <HAL_GPIO_Init>

}
 8000f38:	bf00      	nop
 8000f3a:	3738      	adds	r7, #56	; 0x38
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020000 	.word	0x40020000

08000f54 <rngInit>:

/**
 * Init the random number generator (RNG) peripheral
 */
static void rngInit( void )
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
	//start the peripheral clock
	__HAL_RCC_RNG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <rngInit+0x3c>)
 8000f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <rngInit+0x3c>)
 8000f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f68:	6353      	str	r3, [r2, #52]	; 0x34
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <rngInit+0x3c>)
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

	//enable the random number generator
	RNG->CR |= RNG_CR_RNGEN;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <rngInit+0x40>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <rngInit+0x40>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6013      	str	r3, [r2, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	50060800 	.word	0x50060800

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <assert_failed+0x18>)
 8000fb8:	f007 fcf8 	bl	80089ac <SEGGER_SYSVIEW_PrintfHost>
                            on line %d\r\n", file, line);
  while(1);
 8000fbc:	e7fe      	b.n	8000fbc <assert_failed+0x14>
 8000fbe:	bf00      	nop
 8000fc0:	08008e28 	.word	0x08008e28

08000fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_MspInit+0x4c>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_MspInit+0x4c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x4c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001002:	2007      	movs	r0, #7
 8001004:	f000 faa0 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a5e      	ldr	r2, [pc, #376]	; (80011ac <HAL_UART_MspInit+0x198>)
 8001032:	4293      	cmp	r3, r2
 8001034:	f040 8083 	bne.w	800113e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	4b5c      	ldr	r3, [pc, #368]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a5b      	ldr	r2, [pc, #364]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 8001042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	4a54      	ldr	r2, [pc, #336]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6313      	str	r3, [r2, #48]	; 0x30
 8001064:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	4b4e      	ldr	r3, [pc, #312]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a4d      	ldr	r2, [pc, #308]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800109e:	2308      	movs	r3, #8
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	4842      	ldr	r0, [pc, #264]	; (80011b4 <HAL_UART_MspInit+0x1a0>)
 80010aa:	f000 fe87 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ae:	2304      	movs	r3, #4
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80010be:	2308      	movs	r3, #8
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	483b      	ldr	r0, [pc, #236]	; (80011b8 <HAL_UART_MspInit+0x1a4>)
 80010ca:	f000 fe77 	bl	8001dbc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 80010d0:	4a3b      	ldr	r2, [pc, #236]	; (80011c0 <HAL_UART_MspInit+0x1ac>)
 80010d2:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80010d4:	4b39      	ldr	r3, [pc, #228]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 80010d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010da:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010e8:	4b34      	ldr	r3, [pc, #208]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 80010ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ee:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f0:	4b32      	ldr	r3, [pc, #200]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 8001104:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001108:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001110:	482a      	ldr	r0, [pc, #168]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 8001112:	f000 fa7d 	bl	8001610 <HAL_DMA_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800111c:	f7ff ff3c 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a26      	ldr	r2, [pc, #152]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <HAL_UART_MspInit+0x1a8>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2035      	movs	r0, #53	; 0x35
 8001132:	f000 fa29 	bl	8001588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001136:	2035      	movs	r0, #53	; 0x35
 8001138:	f000 fa52 	bl	80015e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800113c:	e031      	b.n	80011a2 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <HAL_UART_MspInit+0x1b0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d12c      	bne.n	80011a2 <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	6453      	str	r3, [r2, #68]	; 0x44
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6313      	str	r3, [r2, #48]	; 0x30
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_UART_MspInit+0x19c>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001180:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001192:	2307      	movs	r3, #7
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	480a      	ldr	r0, [pc, #40]	; (80011c8 <HAL_UART_MspInit+0x1b4>)
 800119e:	f000 fe0d 	bl	8001dbc <HAL_GPIO_Init>
}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40005000 	.word	0x40005000
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	200000dc 	.word	0x200000dc
 80011c0:	400260b8 	.word	0x400260b8
 80011c4:	40011000 	.word	0x40011000
 80011c8:	40020000 	.word	0x40020000

080011cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08e      	sub	sp, #56	; 0x38
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <HAL_InitTick+0xe4>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a32      	ldr	r2, [pc, #200]	; (80012b0 <HAL_InitTick+0xe4>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <HAL_InitTick+0xe4>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f8:	f107 0210 	add.w	r2, r7, #16
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f001 ff36 	bl	8003074 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001212:	f001 ff07 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8001216:	6378      	str	r0, [r7, #52]	; 0x34
 8001218:	e004      	b.n	8001224 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800121a:	f001 ff03 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 800121e:	4603      	mov	r3, r0
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001226:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <HAL_InitTick+0xe8>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	0c9b      	lsrs	r3, r3, #18
 800122e:	3b01      	subs	r3, #1
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_InitTick+0xec>)
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <HAL_InitTick+0xf0>)
 8001236:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_InitTick+0xec>)
 800123a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_InitTick+0xec>)
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_InitTick+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_InitTick+0xec>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_InitTick+0xec>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001258:	4817      	ldr	r0, [pc, #92]	; (80012b8 <HAL_InitTick+0xec>)
 800125a:	f001 ff3d 	bl	80030d8 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001264:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001268:	2b00      	cmp	r3, #0
 800126a:	d11b      	bne.n	80012a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800126c:	4812      	ldr	r0, [pc, #72]	; (80012b8 <HAL_InitTick+0xec>)
 800126e:	f002 f82d 	bl	80032cc <HAL_TIM_Base_Start_IT>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001278:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800127c:	2b00      	cmp	r3, #0
 800127e:	d111      	bne.n	80012a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001280:	2036      	movs	r0, #54	; 0x36
 8001282:	f000 f9ad 	bl	80015e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d808      	bhi.n	800129e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2036      	movs	r0, #54	; 0x36
 8001292:	f000 f979 	bl	8001588 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_InitTick+0xf4>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e002      	b.n	80012a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3738      	adds	r7, #56	; 0x38
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	2000013c 	.word	0x2000013c
 80012bc:	40001000 	.word	0x40001000
 80012c0:	2000000c 	.word	0x2000000c

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <UART5_IRQHandler+0x10>)
 80012f6:	f002 fb7b 	bl	80039f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000098 	.word	0x20000098

08001304 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <TIM6_DAC_IRQHandler+0x10>)
 800130a:	f002 f8a5 	bl	8003458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000013c 	.word	0x2000013c

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001358:	4c0b      	ldr	r4, [pc, #44]	; (8001388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001366:	f7ff ffd7 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136a:	f007 fcc9 	bl	8008d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fa97 	bl	80008a0 <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001374:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001380:	08009120 	.word	0x08009120
  ldr r2, =_sbss
 8001384:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001388:	200145a8 	.word	0x200145a8

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <HAL_Init+0x40>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_Init+0x40>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_Init+0x40>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f8c5 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff ff04 	bl	80011cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fdfe 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000184 	.word	0x20000184

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db0b      	blt.n	800147a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <__NVIC_EnableIRQ+0x38>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2001      	movs	r0, #1
 8001472:	fa00 f202 	lsl.w	r2, r0, r2
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b07      	cmp	r3, #7
 8001554:	d00f      	beq.n	8001576 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b06      	cmp	r3, #6
 800155a:	d00c      	beq.n	8001576 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b05      	cmp	r3, #5
 8001560:	d009      	beq.n	8001576 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b04      	cmp	r3, #4
 8001566:	d006      	beq.n	8001576 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d003      	beq.n	8001576 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800156e:	2190      	movs	r1, #144	; 0x90
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001572:	f7ff fd19 	bl	8000fa8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff38 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	08008e6c 	.word	0x08008e6c

08001588 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d903      	bls.n	80015a8 <HAL_NVIC_SetPriority+0x20>
 80015a0:	21a8      	movs	r1, #168	; 0xa8
 80015a2:	480e      	ldr	r0, [pc, #56]	; (80015dc <HAL_NVIC_SetPriority+0x54>)
 80015a4:	f7ff fd00 	bl	8000fa8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b0f      	cmp	r3, #15
 80015ac:	d903      	bls.n	80015b6 <HAL_NVIC_SetPriority+0x2e>
 80015ae:	21a9      	movs	r1, #169	; 0xa9
 80015b0:	480a      	ldr	r0, [pc, #40]	; (80015dc <HAL_NVIC_SetPriority+0x54>)
 80015b2:	f7ff fcf9 	bl	8000fa8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b6:	f7ff ff3d 	bl	8001434 <__NVIC_GetPriorityGrouping>
 80015ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	6978      	ldr	r0, [r7, #20]
 80015c2:	f7ff ff8d 	bl	80014e0 <NVIC_EncodePriority>
 80015c6:	4602      	mov	r2, r0
 80015c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff5c 	bl	800148c <__NVIC_SetPriority>
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	08008e6c 	.word	0x08008e6c

080015e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da03      	bge.n	80015fa <HAL_NVIC_EnableIRQ+0x1a>
 80015f2:	21bc      	movs	r1, #188	; 0xbc
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <HAL_NVIC_EnableIRQ+0x2c>)
 80015f6:	f7ff fcd7 	bl	8000fa8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff26 	bl	8001450 <__NVIC_EnableIRQ>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	08008e6c 	.word	0x08008e6c

08001610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff feda 	bl	80013d4 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e203      	b.n	8001a34 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a8b      	ldr	r2, [pc, #556]	; (8001860 <HAL_DMA_Init+0x250>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d04e      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a8a      	ldr	r2, [pc, #552]	; (8001864 <HAL_DMA_Init+0x254>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d049      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a88      	ldr	r2, [pc, #544]	; (8001868 <HAL_DMA_Init+0x258>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d044      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a87      	ldr	r2, [pc, #540]	; (800186c <HAL_DMA_Init+0x25c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d03f      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a85      	ldr	r2, [pc, #532]	; (8001870 <HAL_DMA_Init+0x260>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d03a      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a84      	ldr	r2, [pc, #528]	; (8001874 <HAL_DMA_Init+0x264>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d035      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a82      	ldr	r2, [pc, #520]	; (8001878 <HAL_DMA_Init+0x268>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d030      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a81      	ldr	r2, [pc, #516]	; (800187c <HAL_DMA_Init+0x26c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d02b      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a7f      	ldr	r2, [pc, #508]	; (8001880 <HAL_DMA_Init+0x270>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d026      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a7e      	ldr	r2, [pc, #504]	; (8001884 <HAL_DMA_Init+0x274>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d021      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a7c      	ldr	r2, [pc, #496]	; (8001888 <HAL_DMA_Init+0x278>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01c      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a7b      	ldr	r2, [pc, #492]	; (800188c <HAL_DMA_Init+0x27c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d017      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a79      	ldr	r2, [pc, #484]	; (8001890 <HAL_DMA_Init+0x280>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d012      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a78      	ldr	r2, [pc, #480]	; (8001894 <HAL_DMA_Init+0x284>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a76      	ldr	r2, [pc, #472]	; (8001898 <HAL_DMA_Init+0x288>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d008      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a75      	ldr	r2, [pc, #468]	; (800189c <HAL_DMA_Init+0x28c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d003      	beq.n	80016d4 <HAL_DMA_Init+0xc4>
 80016cc:	21b7      	movs	r1, #183	; 0xb7
 80016ce:	4874      	ldr	r0, [pc, #464]	; (80018a0 <HAL_DMA_Init+0x290>)
 80016d0:	f7ff fc6a 	bl	8000fa8 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d026      	beq.n	800172a <HAL_DMA_Init+0x11a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016e4:	d021      	beq.n	800172a <HAL_DMA_Init+0x11a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016ee:	d01c      	beq.n	800172a <HAL_DMA_Init+0x11a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80016f8:	d017      	beq.n	800172a <HAL_DMA_Init+0x11a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001702:	d012      	beq.n	800172a <HAL_DMA_Init+0x11a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800170c:	d00d      	beq.n	800172a <HAL_DMA_Init+0x11a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001716:	d008      	beq.n	800172a <HAL_DMA_Init+0x11a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001720:	d003      	beq.n	800172a <HAL_DMA_Init+0x11a>
 8001722:	21b8      	movs	r1, #184	; 0xb8
 8001724:	485e      	ldr	r0, [pc, #376]	; (80018a0 <HAL_DMA_Init+0x290>)
 8001726:	f7ff fc3f 	bl	8000fa8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00b      	beq.n	800174a <HAL_DMA_Init+0x13a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b40      	cmp	r3, #64	; 0x40
 8001738:	d007      	beq.n	800174a <HAL_DMA_Init+0x13a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b80      	cmp	r3, #128	; 0x80
 8001740:	d003      	beq.n	800174a <HAL_DMA_Init+0x13a>
 8001742:	21b9      	movs	r1, #185	; 0xb9
 8001744:	4856      	ldr	r0, [pc, #344]	; (80018a0 <HAL_DMA_Init+0x290>)
 8001746:	f7ff fc2f 	bl	8000fa8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001752:	d007      	beq.n	8001764 <HAL_DMA_Init+0x154>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_DMA_Init+0x154>
 800175c:	21ba      	movs	r1, #186	; 0xba
 800175e:	4850      	ldr	r0, [pc, #320]	; (80018a0 <HAL_DMA_Init+0x290>)
 8001760:	f7ff fc22 	bl	8000fa8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176c:	d007      	beq.n	800177e <HAL_DMA_Init+0x16e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_DMA_Init+0x16e>
 8001776:	21bb      	movs	r1, #187	; 0xbb
 8001778:	4849      	ldr	r0, [pc, #292]	; (80018a0 <HAL_DMA_Init+0x290>)
 800177a:	f7ff fc15 	bl	8000fa8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00d      	beq.n	80017a2 <HAL_DMA_Init+0x192>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800178e:	d008      	beq.n	80017a2 <HAL_DMA_Init+0x192>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001798:	d003      	beq.n	80017a2 <HAL_DMA_Init+0x192>
 800179a:	21bc      	movs	r1, #188	; 0xbc
 800179c:	4840      	ldr	r0, [pc, #256]	; (80018a0 <HAL_DMA_Init+0x290>)
 800179e:	f7ff fc03 	bl	8000fa8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00d      	beq.n	80017c6 <HAL_DMA_Init+0x1b6>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b2:	d008      	beq.n	80017c6 <HAL_DMA_Init+0x1b6>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017bc:	d003      	beq.n	80017c6 <HAL_DMA_Init+0x1b6>
 80017be:	21bd      	movs	r1, #189	; 0xbd
 80017c0:	4837      	ldr	r0, [pc, #220]	; (80018a0 <HAL_DMA_Init+0x290>)
 80017c2:	f7ff fbf1 	bl	8000fa8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00c      	beq.n	80017e8 <HAL_DMA_Init+0x1d8>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d6:	d007      	beq.n	80017e8 <HAL_DMA_Init+0x1d8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2b20      	cmp	r3, #32
 80017de:	d003      	beq.n	80017e8 <HAL_DMA_Init+0x1d8>
 80017e0:	21be      	movs	r1, #190	; 0xbe
 80017e2:	482f      	ldr	r0, [pc, #188]	; (80018a0 <HAL_DMA_Init+0x290>)
 80017e4:	f7ff fbe0 	bl	8000fa8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d012      	beq.n	8001816 <HAL_DMA_Init+0x206>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d00d      	beq.n	8001816 <HAL_DMA_Init+0x206>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001802:	d008      	beq.n	8001816 <HAL_DMA_Init+0x206>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800180c:	d003      	beq.n	8001816 <HAL_DMA_Init+0x206>
 800180e:	21bf      	movs	r1, #191	; 0xbf
 8001810:	4823      	ldr	r0, [pc, #140]	; (80018a0 <HAL_DMA_Init+0x290>)
 8001812:	f7ff fbc9 	bl	8000fa8 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_DMA_Init+0x21e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2b04      	cmp	r3, #4
 8001824:	d003      	beq.n	800182e <HAL_DMA_Init+0x21e>
 8001826:	21c0      	movs	r1, #192	; 0xc0
 8001828:	481d      	ldr	r0, [pc, #116]	; (80018a0 <HAL_DMA_Init+0x290>)
 800182a:	f7ff fbbd 	bl	8000fa8 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	2b00      	cmp	r3, #0
 8001834:	d064      	beq.n	8001900 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	2b00      	cmp	r3, #0
 800183c:	d032      	beq.n	80018a4 <HAL_DMA_Init+0x294>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	2b01      	cmp	r3, #1
 8001844:	d02e      	beq.n	80018a4 <HAL_DMA_Init+0x294>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	2b02      	cmp	r3, #2
 800184c:	d02a      	beq.n	80018a4 <HAL_DMA_Init+0x294>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	2b03      	cmp	r3, #3
 8001854:	d026      	beq.n	80018a4 <HAL_DMA_Init+0x294>
 8001856:	21c5      	movs	r1, #197	; 0xc5
 8001858:	4811      	ldr	r0, [pc, #68]	; (80018a0 <HAL_DMA_Init+0x290>)
 800185a:	f7ff fba5 	bl	8000fa8 <assert_failed>
 800185e:	e021      	b.n	80018a4 <HAL_DMA_Init+0x294>
 8001860:	40026010 	.word	0x40026010
 8001864:	40026028 	.word	0x40026028
 8001868:	40026040 	.word	0x40026040
 800186c:	40026058 	.word	0x40026058
 8001870:	40026070 	.word	0x40026070
 8001874:	40026088 	.word	0x40026088
 8001878:	400260a0 	.word	0x400260a0
 800187c:	400260b8 	.word	0x400260b8
 8001880:	40026410 	.word	0x40026410
 8001884:	40026428 	.word	0x40026428
 8001888:	40026440 	.word	0x40026440
 800188c:	40026458 	.word	0x40026458
 8001890:	40026470 	.word	0x40026470
 8001894:	40026488 	.word	0x40026488
 8001898:	400264a0 	.word	0x400264a0
 800189c:	400264b8 	.word	0x400264b8
 80018a0:	08008ea8 	.word	0x08008ea8
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d012      	beq.n	80018d2 <HAL_DMA_Init+0x2c2>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018b4:	d00d      	beq.n	80018d2 <HAL_DMA_Init+0x2c2>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018be:	d008      	beq.n	80018d2 <HAL_DMA_Init+0x2c2>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018c8:	d003      	beq.n	80018d2 <HAL_DMA_Init+0x2c2>
 80018ca:	21c6      	movs	r1, #198	; 0xc6
 80018cc:	485b      	ldr	r0, [pc, #364]	; (8001a3c <HAL_DMA_Init+0x42c>)
 80018ce:	f7ff fb6b 	bl	8000fa8 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d012      	beq.n	8001900 <HAL_DMA_Init+0x2f0>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018e2:	d00d      	beq.n	8001900 <HAL_DMA_Init+0x2f0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ec:	d008      	beq.n	8001900 <HAL_DMA_Init+0x2f0>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80018f6:	d003      	beq.n	8001900 <HAL_DMA_Init+0x2f0>
 80018f8:	21c7      	movs	r1, #199	; 0xc7
 80018fa:	4850      	ldr	r0, [pc, #320]	; (8001a3c <HAL_DMA_Init+0x42c>)
 80018fc:	f7ff fb54 	bl	8000fa8 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001920:	e00f      	b.n	8001942 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001922:	f7ff fd57 	bl	80013d4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b05      	cmp	r3, #5
 800192e:	d908      	bls.n	8001942 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2220      	movs	r2, #32
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2203      	movs	r2, #3
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e078      	b.n	8001a34 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1e8      	bne.n	8001922 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_DMA_Init+0x430>)
 800195c:	4013      	ands	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800196e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	2b04      	cmp	r3, #4
 800199a:	d107      	bne.n	80019ac <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	4313      	orrs	r3, r2
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f023 0307 	bic.w	r3, r3, #7
 80019c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d117      	bne.n	8001a06 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4313      	orrs	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f96b 	bl	8001cc4 <DMA_CheckFifoParam>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a02:	2301      	movs	r3, #1
 8001a04:	e016      	b.n	8001a34 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f922 	bl	8001c58 <DMA_CalcBaseAndBitshift>
 8001a14:	4603      	mov	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1c:	223f      	movs	r2, #63	; 0x3f
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	08008ea8 	.word	0x08008ea8
 8001a40:	f010803f 	.word	0xf010803f

08001a44 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_DMA_Start+0x20>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d304      	bcc.n	8001a6e <HAL_DMA_Start+0x2a>
 8001a64:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001a68:	481a      	ldr	r0, [pc, #104]	; (8001ad4 <HAL_DMA_Start+0x90>)
 8001a6a:	f7ff fa9d 	bl	8000fa8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_DMA_Start+0x38>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e026      	b.n	8001aca <HAL_DMA_Start+0x86>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d115      	bne.n	8001abc <HAL_DMA_Start+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f8a9 	bl	8001bfc <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0201 	orr.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e005      	b.n	8001ac8 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	08008ea8 	.word	0x08008ea8

08001ad8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ae6:	f7ff fc75 	bl	80013d4 <HAL_GetTick>
 8001aea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d008      	beq.n	8001b0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e052      	b.n	8001bb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0216 	bic.w	r2, r2, #22
 8001b18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <HAL_DMA_Abort+0x62>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0208 	bic.w	r2, r2, #8
 8001b48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5a:	e013      	b.n	8001b84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b5c:	f7ff fc3a 	bl	80013d4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d90c      	bls.n	8001b84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2203      	movs	r2, #3
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e015      	b.n	8001bb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e4      	bne.n	8001b5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	223f      	movs	r2, #63	; 0x3f
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d004      	beq.n	8001bd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00c      	b.n	8001bf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2205      	movs	r2, #5
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0201 	bic.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b40      	cmp	r3, #64	; 0x40
 8001c28:	d108      	bne.n	8001c3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c3a:	e007      	b.n	8001c4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	60da      	str	r2, [r3, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	3b10      	subs	r3, #16
 8001c68:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <DMA_CalcBaseAndBitshift+0x64>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c72:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <DMA_CalcBaseAndBitshift+0x68>)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d909      	bls.n	8001c9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c8e:	f023 0303 	bic.w	r3, r3, #3
 8001c92:	1d1a      	adds	r2, r3, #4
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	659a      	str	r2, [r3, #88]	; 0x58
 8001c98:	e007      	b.n	8001caa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ca2:	f023 0303 	bic.w	r3, r3, #3
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	aaaaaaab 	.word	0xaaaaaaab
 8001cc0:	080090e0 	.word	0x080090e0

08001cc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d11f      	bne.n	8001d1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d856      	bhi.n	8001d92 <DMA_CheckFifoParam+0xce>
 8001ce4:	a201      	add	r2, pc, #4	; (adr r2, 8001cec <DMA_CheckFifoParam+0x28>)
 8001ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cea:	bf00      	nop
 8001cec:	08001cfd 	.word	0x08001cfd
 8001cf0:	08001d0f 	.word	0x08001d0f
 8001cf4:	08001cfd 	.word	0x08001cfd
 8001cf8:	08001d93 	.word	0x08001d93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d046      	beq.n	8001d96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d0c:	e043      	b.n	8001d96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d16:	d140      	bne.n	8001d9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d1c:	e03d      	b.n	8001d9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d26:	d121      	bne.n	8001d6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d837      	bhi.n	8001d9e <DMA_CheckFifoParam+0xda>
 8001d2e:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <DMA_CheckFifoParam+0x70>)
 8001d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d34:	08001d45 	.word	0x08001d45
 8001d38:	08001d4b 	.word	0x08001d4b
 8001d3c:	08001d45 	.word	0x08001d45
 8001d40:	08001d5d 	.word	0x08001d5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
      break;
 8001d48:	e030      	b.n	8001dac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d025      	beq.n	8001da2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d5a:	e022      	b.n	8001da2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d64:	d11f      	bne.n	8001da6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d6a:	e01c      	b.n	8001da6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d903      	bls.n	8001d7a <DMA_CheckFifoParam+0xb6>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d003      	beq.n	8001d80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d78:	e018      	b.n	8001dac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d7e:	e015      	b.n	8001dac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00e      	beq.n	8001daa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d90:	e00b      	b.n	8001daa <DMA_CheckFifoParam+0xe6>
      break;
 8001d92:	bf00      	nop
 8001d94:	e00a      	b.n	8001dac <DMA_CheckFifoParam+0xe8>
      break;
 8001d96:	bf00      	nop
 8001d98:	e008      	b.n	8001dac <DMA_CheckFifoParam+0xe8>
      break;
 8001d9a:	bf00      	nop
 8001d9c:	e006      	b.n	8001dac <DMA_CheckFifoParam+0xe8>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e004      	b.n	8001dac <DMA_CheckFifoParam+0xe8>
      break;
 8001da2:	bf00      	nop
 8001da4:	e002      	b.n	8001dac <DMA_CheckFifoParam+0xe8>
      break;   
 8001da6:	bf00      	nop
 8001da8:	e000      	b.n	8001dac <DMA_CheckFifoParam+0xe8>
      break;
 8001daa:	bf00      	nop
    }
  } 
  
  return status; 
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a3d      	ldr	r2, [pc, #244]	; (8001ecc <HAL_GPIO_Init+0x110>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a3c      	ldr	r2, [pc, #240]	; (8001ed0 <HAL_GPIO_Init+0x114>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d027      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a3b      	ldr	r2, [pc, #236]	; (8001ed4 <HAL_GPIO_Init+0x118>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d023      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a3a      	ldr	r2, [pc, #232]	; (8001ed8 <HAL_GPIO_Init+0x11c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a39      	ldr	r2, [pc, #228]	; (8001edc <HAL_GPIO_Init+0x120>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01b      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a38      	ldr	r2, [pc, #224]	; (8001ee0 <HAL_GPIO_Init+0x124>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d017      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a37      	ldr	r2, [pc, #220]	; (8001ee4 <HAL_GPIO_Init+0x128>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a36      	ldr	r2, [pc, #216]	; (8001ee8 <HAL_GPIO_Init+0x12c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00f      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a35      	ldr	r2, [pc, #212]	; (8001eec <HAL_GPIO_Init+0x130>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00b      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <HAL_GPIO_Init+0x134>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <HAL_GPIO_Init+0x138>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x76>
 8001e2a:	21ac      	movs	r1, #172	; 0xac
 8001e2c:	4832      	ldr	r0, [pc, #200]	; (8001ef8 <HAL_GPIO_Init+0x13c>)
 8001e2e:	f7ff f8bb 	bl	8000fa8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_GPIO_Init+0x8c>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x94>
 8001e48:	21ad      	movs	r1, #173	; 0xad
 8001e4a:	482b      	ldr	r0, [pc, #172]	; (8001ef8 <HAL_GPIO_Init+0x13c>)
 8001e4c:	f7ff f8ac 	bl	8000fa8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d035      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d031      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b11      	cmp	r3, #17
 8001e66:	d02d      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d029      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b12      	cmp	r3, #18
 8001e76:	d025      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001e80:	d020      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001e94:	d016      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001e9e:	d011      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x108>
 8001ebc:	21ae      	movs	r1, #174	; 0xae
 8001ebe:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <HAL_GPIO_Init+0x13c>)
 8001ec0:	f7ff f872 	bl	8000fa8 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	e274      	b.n	80023b4 <HAL_GPIO_Init+0x5f8>
 8001eca:	bf00      	nop
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40021400 	.word	0x40021400
 8001ee4:	40021800 	.word	0x40021800
 8001ee8:	40021c00 	.word	0x40021c00
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	40022400 	.word	0x40022400
 8001ef4:	40022800 	.word	0x40022800
 8001ef8:	08008ee0 	.word	0x08008ee0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	f040 824a 	bne.w	80023ae <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d005      	beq.n	8001f32 <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d144      	bne.n	8001fbc <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00f      	beq.n	8001f5a <HAL_GPIO_Init+0x19e>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d00b      	beq.n	8001f5a <HAL_GPIO_Init+0x19e>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x19e>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x19e>
 8001f52:	21c0      	movs	r1, #192	; 0xc0
 8001f54:	4831      	ldr	r0, [pc, #196]	; (800201c <HAL_GPIO_Init+0x260>)
 8001f56:	f7ff f827 	bl	8000fa8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 0201 	and.w	r2, r3, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d02b      	beq.n	8002020 <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <HAL_GPIO_Init+0x22c>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_Init+0x22c>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x22c>
 8001fe0:	21d1      	movs	r1, #209	; 0xd1
 8001fe2:	480e      	ldr	r0, [pc, #56]	; (800201c <HAL_GPIO_Init+0x260>)
 8001fe4:	f7fe ffe0 	bl	8000fa8 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	e002      	b.n	8002020 <HAL_GPIO_Init+0x264>
 800201a:	bf00      	nop
 800201c:	08008ee0 	.word	0x08008ee0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	f040 80df 	bne.w	80021ec <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80b6 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	2b09      	cmp	r3, #9
 800203e:	f000 80b1 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80ac 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a7 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80a2 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 809d 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b01      	cmp	r3, #1
 8002070:	f000 8098 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b01      	cmp	r3, #1
 800207a:	f000 8093 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b02      	cmp	r3, #2
 8002084:	f000 808e 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b02      	cmp	r3, #2
 800208e:	f000 8089 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b02      	cmp	r3, #2
 8002098:	f000 8084 	beq.w	80021a4 <HAL_GPIO_Init+0x3e8>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d07f      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d07b      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d077      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d073      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d06f      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d06b      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b09      	cmp	r3, #9
 80020d2:	d067      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b06      	cmp	r3, #6
 80020da:	d063      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b09      	cmp	r3, #9
 80020e2:	d05f      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b07      	cmp	r3, #7
 80020ea:	d05b      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b07      	cmp	r3, #7
 80020f2:	d057      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b07      	cmp	r3, #7
 80020fa:	d053      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b08      	cmp	r3, #8
 8002102:	d04f      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d04b      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b08      	cmp	r3, #8
 8002112:	d047      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b09      	cmp	r3, #9
 800211a:	d043      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b09      	cmp	r3, #9
 8002122:	d03f      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	2b0a      	cmp	r3, #10
 800212a:	d03b      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	2b0a      	cmp	r3, #10
 8002132:	d037      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b0b      	cmp	r3, #11
 800213a:	d033      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d02f      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b0c      	cmp	r3, #12
 800214a:	d02b      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b0d      	cmp	r3, #13
 8002152:	d027      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d023      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d01f      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d01b      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d017      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d013      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d00f      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d00b      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b06      	cmp	r3, #6
 8002192:	d007      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b0e      	cmp	r3, #14
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x3e8>
 800219c:	21de      	movs	r1, #222	; 0xde
 800219e:	488a      	ldr	r0, [pc, #552]	; (80023c8 <HAL_GPIO_Init+0x60c>)
 80021a0:	f7fe ff02 	bl	8000fa8 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80c0 	beq.w	80023ae <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b66      	ldr	r3, [pc, #408]	; (80023cc <HAL_GPIO_Init+0x610>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a65      	ldr	r2, [pc, #404]	; (80023cc <HAL_GPIO_Init+0x610>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b63      	ldr	r3, [pc, #396]	; (80023cc <HAL_GPIO_Init+0x610>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224a:	4a61      	ldr	r2, [pc, #388]	; (80023d0 <HAL_GPIO_Init+0x614>)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_GPIO_Init+0x618>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d037      	beq.n	80022e6 <HAL_GPIO_Init+0x52a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a57      	ldr	r2, [pc, #348]	; (80023d8 <HAL_GPIO_Init+0x61c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d031      	beq.n	80022e2 <HAL_GPIO_Init+0x526>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a56      	ldr	r2, [pc, #344]	; (80023dc <HAL_GPIO_Init+0x620>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d02b      	beq.n	80022de <HAL_GPIO_Init+0x522>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a55      	ldr	r2, [pc, #340]	; (80023e0 <HAL_GPIO_Init+0x624>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d025      	beq.n	80022da <HAL_GPIO_Init+0x51e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a54      	ldr	r2, [pc, #336]	; (80023e4 <HAL_GPIO_Init+0x628>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01f      	beq.n	80022d6 <HAL_GPIO_Init+0x51a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a53      	ldr	r2, [pc, #332]	; (80023e8 <HAL_GPIO_Init+0x62c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d019      	beq.n	80022d2 <HAL_GPIO_Init+0x516>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_GPIO_Init+0x630>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0x512>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a51      	ldr	r2, [pc, #324]	; (80023f0 <HAL_GPIO_Init+0x634>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_GPIO_Init+0x50e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a50      	ldr	r2, [pc, #320]	; (80023f4 <HAL_GPIO_Init+0x638>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x50a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4f      	ldr	r2, [pc, #316]	; (80023f8 <HAL_GPIO_Init+0x63c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_GPIO_Init+0x506>
 80022be:	2309      	movs	r3, #9
 80022c0:	e012      	b.n	80022e8 <HAL_GPIO_Init+0x52c>
 80022c2:	230a      	movs	r3, #10
 80022c4:	e010      	b.n	80022e8 <HAL_GPIO_Init+0x52c>
 80022c6:	2308      	movs	r3, #8
 80022c8:	e00e      	b.n	80022e8 <HAL_GPIO_Init+0x52c>
 80022ca:	2307      	movs	r3, #7
 80022cc:	e00c      	b.n	80022e8 <HAL_GPIO_Init+0x52c>
 80022ce:	2306      	movs	r3, #6
 80022d0:	e00a      	b.n	80022e8 <HAL_GPIO_Init+0x52c>
 80022d2:	2305      	movs	r3, #5
 80022d4:	e008      	b.n	80022e8 <HAL_GPIO_Init+0x52c>
 80022d6:	2304      	movs	r3, #4
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x52c>
 80022da:	2303      	movs	r3, #3
 80022dc:	e004      	b.n	80022e8 <HAL_GPIO_Init+0x52c>
 80022de:	2302      	movs	r3, #2
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_Init+0x52c>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_GPIO_Init+0x52c>
 80022e6:	2300      	movs	r3, #0
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	f002 0203 	and.w	r2, r2, #3
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	4093      	lsls	r3, r2
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f8:	4935      	ldr	r1, [pc, #212]	; (80023d0 <HAL_GPIO_Init+0x614>)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3302      	adds	r3, #2
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002306:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <HAL_GPIO_Init+0x640>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232a:	4a34      	ldr	r2, [pc, #208]	; (80023fc <HAL_GPIO_Init+0x640>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002330:	4b32      	ldr	r3, [pc, #200]	; (80023fc <HAL_GPIO_Init+0x640>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_GPIO_Init+0x640>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235a:	4b28      	ldr	r3, [pc, #160]	; (80023fc <HAL_GPIO_Init+0x640>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237e:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_GPIO_Init+0x640>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_GPIO_Init+0x640>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <HAL_GPIO_Init+0x640>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b0f      	cmp	r3, #15
 80023b8:	f67f ada0 	bls.w	8001efc <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	08008ee0 	.word	0x08008ee0
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40013800 	.word	0x40013800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40020400 	.word	0x40020400
 80023dc:	40020800 	.word	0x40020800
 80023e0:	40020c00 	.word	0x40020c00
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40021400 	.word	0x40021400
 80023ec:	40021800 	.word	0x40021800
 80023f0:	40021c00 	.word	0x40021c00
 80023f4:	40022000 	.word	0x40022000
 80023f8:	40022400 	.word	0x40022400
 80023fc:	40013c00 	.word	0x40013c00

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <HAL_GPIO_WritePin+0x20>
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <HAL_GPIO_WritePin+0x2a>
 8002420:	f240 119d 	movw	r1, #413	; 0x19d
 8002424:	480e      	ldr	r0, [pc, #56]	; (8002460 <HAL_GPIO_WritePin+0x60>)
 8002426:	f7fe fdbf 	bl	8000fa8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800242a:	787b      	ldrb	r3, [r7, #1]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <HAL_GPIO_WritePin+0x40>
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d004      	beq.n	8002440 <HAL_GPIO_WritePin+0x40>
 8002436:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800243a:	4809      	ldr	r0, [pc, #36]	; (8002460 <HAL_GPIO_WritePin+0x60>)
 800243c:	f7fe fdb4 	bl	8000fa8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002440:	787b      	ldrb	r3, [r7, #1]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800244c:	e003      	b.n	8002456 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	041a      	lsls	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	619a      	str	r2, [r3, #24]
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	08008ee0 	.word	0x08008ee0

08002464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e314      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b0f      	cmp	r3, #15
 800247c:	d903      	bls.n	8002486 <HAL_RCC_OscConfig+0x22>
 800247e:	21e6      	movs	r1, #230	; 0xe6
 8002480:	4897      	ldr	r0, [pc, #604]	; (80026e0 <HAL_RCC_OscConfig+0x27c>)
 8002482:	f7fe fd91 	bl	8000fa8 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8088 	beq.w	80025a4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00d      	beq.n	80024b8 <HAL_RCC_OscConfig+0x54>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a4:	d008      	beq.n	80024b8 <HAL_RCC_OscConfig+0x54>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ae:	d003      	beq.n	80024b8 <HAL_RCC_OscConfig+0x54>
 80024b0:	21eb      	movs	r1, #235	; 0xeb
 80024b2:	488b      	ldr	r0, [pc, #556]	; (80026e0 <HAL_RCC_OscConfig+0x27c>)
 80024b4:	f7fe fd78 	bl	8000fa8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b8:	4b8a      	ldr	r3, [pc, #552]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d00c      	beq.n	80024de <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c4:	4b87      	ldr	r3, [pc, #540]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d112      	bne.n	80024f6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d0:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024dc:	d10b      	bne.n	80024f6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024de:	4b81      	ldr	r3, [pc, #516]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d05b      	beq.n	80025a2 <HAL_RCC_OscConfig+0x13e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d157      	bne.n	80025a2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e2d4      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0xaa>
 8002500:	4b78      	ldr	r3, [pc, #480]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a77      	ldr	r2, [pc, #476]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	e01d      	b.n	800254a <HAL_RCC_OscConfig+0xe6>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002516:	d10c      	bne.n	8002532 <HAL_RCC_OscConfig+0xce>
 8002518:	4b72      	ldr	r3, [pc, #456]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a71      	ldr	r2, [pc, #452]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800251e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b6f      	ldr	r3, [pc, #444]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a6e      	ldr	r2, [pc, #440]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e00b      	b.n	800254a <HAL_RCC_OscConfig+0xe6>
 8002532:	4b6c      	ldr	r3, [pc, #432]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6b      	ldr	r2, [pc, #428]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b69      	ldr	r3, [pc, #420]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a68      	ldr	r2, [pc, #416]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d013      	beq.n	800257a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe ff3f 	bl	80013d4 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255a:	f7fe ff3b 	bl	80013d4 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	; 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e299      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256c:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0xf6>
 8002578:	e014      	b.n	80025a4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe ff2b 	bl	80013d4 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002582:	f7fe ff27 	bl	80013d4 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b64      	cmp	r3, #100	; 0x64
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e285      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002594:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x11e>
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d079      	beq.n	80026a4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_OscConfig+0x166>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d004      	beq.n	80025ca <HAL_RCC_OscConfig+0x166>
 80025c0:	f240 111d 	movw	r1, #285	; 0x11d
 80025c4:	4846      	ldr	r0, [pc, #280]	; (80026e0 <HAL_RCC_OscConfig+0x27c>)
 80025c6:	f7fe fcef 	bl	8000fa8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b1f      	cmp	r3, #31
 80025d0:	d904      	bls.n	80025dc <HAL_RCC_OscConfig+0x178>
 80025d2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80025d6:	4842      	ldr	r0, [pc, #264]	; (80026e0 <HAL_RCC_OscConfig+0x27c>)
 80025d8:	f7fe fce6 	bl	8000fa8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025dc:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00b      	beq.n	8002600 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e8:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d11c      	bne.n	800262e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d116      	bne.n	800262e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002600:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_OscConfig+0x1b4>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e243      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002618:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	492f      	ldr	r1, [pc, #188]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262c:	e03a      	b.n	80026a4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d020      	beq.n	8002678 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002636:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_RCC_OscConfig+0x284>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe feca 	bl	80013d4 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe fec6 	bl	80013d4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e224      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	491c      	ldr	r1, [pc, #112]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
 8002676:	e015      	b.n	80026a4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x284>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe fea9 	bl	80013d4 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002686:	f7fe fea5 	bl	80013d4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e203      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_RCC_OscConfig+0x280>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d045      	beq.n	800273c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_OscConfig+0x266>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d004      	beq.n	80026ca <HAL_RCC_OscConfig+0x266>
 80026c0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80026c4:	4806      	ldr	r0, [pc, #24]	; (80026e0 <HAL_RCC_OscConfig+0x27c>)
 80026c6:	f7fe fc6f 	bl	8000fa8 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01e      	beq.n	8002710 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x288>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fe7c 	bl	80013d4 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	e010      	b.n	8002702 <HAL_RCC_OscConfig+0x29e>
 80026e0:	08008f1c 	.word	0x08008f1c
 80026e4:	40023800 	.word	0x40023800
 80026e8:	42470000 	.word	0x42470000
 80026ec:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f0:	f7fe fe70 	bl	80013d4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1ce      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	4b5e      	ldr	r3, [pc, #376]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x28c>
 800270e:	e015      	b.n	800273c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002710:	4b5b      	ldr	r3, [pc, #364]	; (8002880 <HAL_RCC_OscConfig+0x41c>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002716:	f7fe fe5d 	bl	80013d4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271e:	f7fe fe59 	bl	80013d4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1b7      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	4b52      	ldr	r3, [pc, #328]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80b0 	beq.w	80028aa <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274a:	2300      	movs	r3, #0
 800274c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00c      	beq.n	8002770 <HAL_RCC_OscConfig+0x30c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d008      	beq.n	8002770 <HAL_RCC_OscConfig+0x30c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d004      	beq.n	8002770 <HAL_RCC_OscConfig+0x30c>
 8002766:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800276a:	4846      	ldr	r0, [pc, #280]	; (8002884 <HAL_RCC_OscConfig+0x420>)
 800276c:	f7fe fc1c 	bl	8000fa8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002770:	4b42      	ldr	r3, [pc, #264]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10f      	bne.n	800279c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	4a3d      	ldr	r2, [pc, #244]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278a:	6413      	str	r3, [r2, #64]	; 0x40
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <HAL_RCC_OscConfig+0x418>)
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002798:	2301      	movs	r3, #1
 800279a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d118      	bne.n	80027da <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a8:	4b37      	ldr	r3, [pc, #220]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a36      	ldr	r2, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b4:	f7fe fe0e 	bl	80013d4 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027bc:	f7fe fe0a 	bl	80013d4 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e168      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <HAL_RCC_OscConfig+0x424>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d106      	bne.n	80027f0 <HAL_RCC_OscConfig+0x38c>
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <HAL_RCC_OscConfig+0x418>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	4a25      	ldr	r2, [pc, #148]	; (800287c <HAL_RCC_OscConfig+0x418>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6713      	str	r3, [r2, #112]	; 0x70
 80027ee:	e01c      	b.n	800282a <HAL_RCC_OscConfig+0x3c6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d10c      	bne.n	8002812 <HAL_RCC_OscConfig+0x3ae>
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_OscConfig+0x418>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_RCC_OscConfig+0x418>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_RCC_OscConfig+0x418>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	; 0x70
 8002810:	e00b      	b.n	800282a <HAL_RCC_OscConfig+0x3c6>
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d015      	beq.n	800285e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe fdcf 	bl	80013d4 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fdcb 	bl	80013d4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e127      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_RCC_OscConfig+0x418>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCC_OscConfig+0x3d6>
 800285c:	e01c      	b.n	8002898 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7fe fdb9 	bl	80013d4 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002864:	e012      	b.n	800288c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7fe fdb5 	bl	80013d4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d909      	bls.n	800288c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e111      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
 800287c:	40023800 	.word	0x40023800
 8002880:	42470e80 	.word	0x42470e80
 8002884:	08008f1c 	.word	0x08008f1c
 8002888:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	4b86      	ldr	r3, [pc, #536]	; (8002aa8 <HAL_RCC_OscConfig+0x644>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e6      	bne.n	8002866 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d105      	bne.n	80028aa <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289e:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_OscConfig+0x644>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a81      	ldr	r2, [pc, #516]	; (8002aa8 <HAL_RCC_OscConfig+0x644>)
 80028a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00c      	beq.n	80028cc <HAL_RCC_OscConfig+0x468>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d008      	beq.n	80028cc <HAL_RCC_OscConfig+0x468>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d004      	beq.n	80028cc <HAL_RCC_OscConfig+0x468>
 80028c2:	f240 11cd 	movw	r1, #461	; 0x1cd
 80028c6:	4879      	ldr	r0, [pc, #484]	; (8002aac <HAL_RCC_OscConfig+0x648>)
 80028c8:	f7fe fb6e 	bl	8000fa8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80e4 	beq.w	8002a9e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028d6:	4b74      	ldr	r3, [pc, #464]	; (8002aa8 <HAL_RCC_OscConfig+0x644>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b08      	cmp	r3, #8
 80028e0:	f000 80a5 	beq.w	8002a2e <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	f040 8089 	bne.w	8002a00 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_RCC_OscConfig+0x4a6>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fe:	d004      	beq.n	800290a <HAL_RCC_OscConfig+0x4a6>
 8002900:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002904:	4869      	ldr	r0, [pc, #420]	; (8002aac <HAL_RCC_OscConfig+0x648>)
 8002906:	f7fe fb4f 	bl	8000fa8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	2b3f      	cmp	r3, #63	; 0x3f
 8002910:	d904      	bls.n	800291c <HAL_RCC_OscConfig+0x4b8>
 8002912:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002916:	4865      	ldr	r0, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x648>)
 8002918:	f7fe fb46 	bl	8000fa8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	2b31      	cmp	r3, #49	; 0x31
 8002922:	d904      	bls.n	800292e <HAL_RCC_OscConfig+0x4ca>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800292c:	d904      	bls.n	8002938 <HAL_RCC_OscConfig+0x4d4>
 800292e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002932:	485e      	ldr	r0, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x648>)
 8002934:	f7fe fb38 	bl	8000fa8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	2b02      	cmp	r3, #2
 800293e:	d010      	beq.n	8002962 <HAL_RCC_OscConfig+0x4fe>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b04      	cmp	r3, #4
 8002946:	d00c      	beq.n	8002962 <HAL_RCC_OscConfig+0x4fe>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	2b06      	cmp	r3, #6
 800294e:	d008      	beq.n	8002962 <HAL_RCC_OscConfig+0x4fe>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	2b08      	cmp	r3, #8
 8002956:	d004      	beq.n	8002962 <HAL_RCC_OscConfig+0x4fe>
 8002958:	f240 11d9 	movw	r1, #473	; 0x1d9
 800295c:	4853      	ldr	r0, [pc, #332]	; (8002aac <HAL_RCC_OscConfig+0x648>)
 800295e:	f7fe fb23 	bl	8000fa8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d903      	bls.n	8002972 <HAL_RCC_OscConfig+0x50e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	2b0f      	cmp	r3, #15
 8002970:	d904      	bls.n	800297c <HAL_RCC_OscConfig+0x518>
 8002972:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002976:	484d      	ldr	r0, [pc, #308]	; (8002aac <HAL_RCC_OscConfig+0x648>)
 8002978:	f7fe fb16 	bl	8000fa8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <HAL_RCC_OscConfig+0x64c>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe fd27 	bl	80013d4 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298a:	f7fe fd23 	bl	80013d4 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e081      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299c:	4b42      	ldr	r3, [pc, #264]	; (8002aa8 <HAL_RCC_OscConfig+0x644>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	019b      	lsls	r3, r3, #6
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	4936      	ldr	r1, [pc, #216]	; (8002aa8 <HAL_RCC_OscConfig+0x644>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d2:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <HAL_RCC_OscConfig+0x64c>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fcfc 	bl	80013d4 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fcf8 	bl	80013d4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e056      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_OscConfig+0x644>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x57c>
 80029fe:	e04e      	b.n	8002a9e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_RCC_OscConfig+0x64c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe fce5 	bl	80013d4 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe fce1 	bl	80013d4 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e03f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_OscConfig+0x644>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5aa>
 8002a2c:	e037      	b.n	8002a9e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e032      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x644>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d028      	beq.n	8002a9a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d121      	bne.n	8002a9a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d11a      	bne.n	8002a9a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d111      	bne.n	8002a9a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	08008f1c 	.word	0x08008f1c
 8002ab0:	42470060 	.word	0x42470060

08002ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e18c      	b.n	8002de2 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x24>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b0f      	cmp	r3, #15
 8002ad6:	d904      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x2e>
 8002ad8:	f240 215a 	movw	r1, #602	; 0x25a
 8002adc:	4887      	ldr	r0, [pc, #540]	; (8002cfc <HAL_RCC_ClockConfig+0x248>)
 8002ade:	f7fe fa63 	bl	8000fa8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d031      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d02e      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d02b      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d028      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d025      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d022      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d01f      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b07      	cmp	r3, #7
 8002b10:	d01c      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d019      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b09      	cmp	r3, #9
 8002b1c:	d016      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b0a      	cmp	r3, #10
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b0b      	cmp	r3, #11
 8002b28:	d010      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b0d      	cmp	r3, #13
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b0e      	cmp	r3, #14
 8002b3a:	d007      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b0f      	cmp	r3, #15
 8002b40:	d004      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x98>
 8002b42:	f240 215b 	movw	r1, #603	; 0x25b
 8002b46:	486d      	ldr	r0, [pc, #436]	; (8002cfc <HAL_RCC_ClockConfig+0x248>)
 8002b48:	f7fe fa2e 	bl	8000fa8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <HAL_RCC_ClockConfig+0x24c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d90c      	bls.n	8002b74 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b69      	ldr	r3, [pc, #420]	; (8002d00 <HAL_RCC_ClockConfig+0x24c>)
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_RCC_ClockConfig+0x24c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e136      	b.n	8002de2 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d049      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b8c:	4b5d      	ldr	r3, [pc, #372]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a5c      	ldr	r2, [pc, #368]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba4:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a56      	ldr	r2, [pc, #344]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d024      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x14e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x14e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b90      	cmp	r3, #144	; 0x90
 8002bc6:	d01c      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x14e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2ba0      	cmp	r3, #160	; 0xa0
 8002bce:	d018      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x14e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2bb0      	cmp	r3, #176	; 0xb0
 8002bd6:	d014      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x14e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2bc0      	cmp	r3, #192	; 0xc0
 8002bde:	d010      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x14e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2bd0      	cmp	r3, #208	; 0xd0
 8002be6:	d00c      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x14e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2be0      	cmp	r3, #224	; 0xe0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x14e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2bf0      	cmp	r3, #240	; 0xf0
 8002bf6:	d004      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x14e>
 8002bf8:	f240 217e 	movw	r1, #638	; 0x27e
 8002bfc:	483f      	ldr	r0, [pc, #252]	; (8002cfc <HAL_RCC_ClockConfig+0x248>)
 8002bfe:	f7fe f9d3 	bl	8000fa8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c02:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	493d      	ldr	r1, [pc, #244]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d059      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x196>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d00c      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x196>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d008      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x196>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d004      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x196>
 8002c40:	f240 2185 	movw	r1, #645	; 0x285
 8002c44:	482d      	ldr	r0, [pc, #180]	; (8002cfc <HAL_RCC_ClockConfig+0x248>)
 8002c46:	f7fe f9af 	bl	8000fa8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d119      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0bf      	b.n	8002de2 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c72:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0af      	b.n	8002de2 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0a7      	b.n	8002de2 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c92:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4919      	ldr	r1, [pc, #100]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fb96 	bl	80013d4 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7fe fb92 	bl	80013d4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e08f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_RCC_ClockConfig+0x250>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 020c 	and.w	r2, r3, #12
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d1eb      	bne.n	8002cac <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_RCC_ClockConfig+0x24c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d212      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_RCC_ClockConfig+0x24c>)
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_ClockConfig+0x24c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d007      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e072      	b.n	8002de2 <HAL_RCC_ClockConfig+0x32e>
 8002cfc:	08008f1c 	.word	0x08008f1c
 8002d00:	40023c00 	.word	0x40023c00
 8002d04:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d025      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d018      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x29a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d24:	d013      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x29a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d2e:	d00e      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x29a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002d38:	d009      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x29a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002d42:	d004      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x29a>
 8002d44:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002d48:	4828      	ldr	r0, [pc, #160]	; (8002dec <HAL_RCC_ClockConfig+0x338>)
 8002d4a:	f7fe f92d 	bl	8000fa8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d4e:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCC_ClockConfig+0x33c>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	4925      	ldr	r1, [pc, #148]	; (8002df0 <HAL_RCC_ClockConfig+0x33c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d026      	beq.n	8002dba <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d018      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x2f2>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7c:	d013      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x2f2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d86:	d00e      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x2f2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x2f2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002d9a:	d004      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x2f2>
 8002d9c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002da0:	4812      	ldr	r0, [pc, #72]	; (8002dec <HAL_RCC_ClockConfig+0x338>)
 8002da2:	f7fe f901 	bl	8000fa8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_RCC_ClockConfig+0x33c>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	490e      	ldr	r1, [pc, #56]	; (8002df0 <HAL_RCC_ClockConfig+0x33c>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dba:	f000 f821 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_ClockConfig+0x33c>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	490a      	ldr	r1, [pc, #40]	; (8002df4 <HAL_RCC_ClockConfig+0x340>)
 8002dcc:	5ccb      	ldrb	r3, [r1, r3]
 8002dce:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_RCC_ClockConfig+0x344>)
 8002dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCC_ClockConfig+0x348>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f9f6 	bl	80011cc <HAL_InitTick>

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	08008f1c 	.word	0x08008f1c
 8002df0:	40023800 	.word	0x40023800
 8002df4:	080090c8 	.word	0x080090c8
 8002df8:	20000008 	.word	0x20000008
 8002dfc:	2000000c 	.word	0x2000000c

08002e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e04:	b094      	sub	sp, #80	; 0x50
 8002e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e10:	2300      	movs	r3, #0
 8002e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e18:	4b79      	ldr	r3, [pc, #484]	; (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d00d      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x40>
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	f200 80e1 	bhi.w	8002fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x34>
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d003      	beq.n	8002e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e32:	e0db      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e34:	4b73      	ldr	r3, [pc, #460]	; (8003004 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e38:	e0db      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e3a:	4b73      	ldr	r3, [pc, #460]	; (8003008 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e3e:	e0d8      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e40:	4b6f      	ldr	r3, [pc, #444]	; (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e4a:	4b6d      	ldr	r3, [pc, #436]	; (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d063      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e56:	4b6a      	ldr	r3, [pc, #424]	; (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	099b      	lsrs	r3, r3, #6
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e68:	633b      	str	r3, [r7, #48]	; 0x30
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e72:	4622      	mov	r2, r4
 8002e74:	462b      	mov	r3, r5
 8002e76:	f04f 0000 	mov.w	r0, #0
 8002e7a:	f04f 0100 	mov.w	r1, #0
 8002e7e:	0159      	lsls	r1, r3, #5
 8002e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e84:	0150      	lsls	r0, r2, #5
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	1a51      	subs	r1, r2, r1
 8002e8e:	6139      	str	r1, [r7, #16]
 8002e90:	4629      	mov	r1, r5
 8002e92:	eb63 0301 	sbc.w	r3, r3, r1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ea4:	4659      	mov	r1, fp
 8002ea6:	018b      	lsls	r3, r1, #6
 8002ea8:	4651      	mov	r1, sl
 8002eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eae:	4651      	mov	r1, sl
 8002eb0:	018a      	lsls	r2, r1, #6
 8002eb2:	4651      	mov	r1, sl
 8002eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8002eb8:	4659      	mov	r1, fp
 8002eba:	eb63 0901 	sbc.w	r9, r3, r1
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ed2:	4690      	mov	r8, r2
 8002ed4:	4699      	mov	r9, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	eb18 0303 	adds.w	r3, r8, r3
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	462b      	mov	r3, r5
 8002ee0:	eb49 0303 	adc.w	r3, r9, r3
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	024b      	lsls	r3, r1, #9
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002efc:	4621      	mov	r1, r4
 8002efe:	024a      	lsls	r2, r1, #9
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f06:	2200      	movs	r2, #0
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f10:	f7fd f9b8 	bl	8000284 <__aeabi_uldivmod>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4613      	mov	r3, r2
 8002f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f1c:	e058      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1e:	4b38      	ldr	r3, [pc, #224]	; (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	2200      	movs	r2, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	4611      	mov	r1, r2
 8002f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f2e:	623b      	str	r3, [r7, #32]
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
 8002f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f38:	4642      	mov	r2, r8
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	f04f 0100 	mov.w	r1, #0
 8002f44:	0159      	lsls	r1, r3, #5
 8002f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f4a:	0150      	lsls	r0, r2, #5
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4641      	mov	r1, r8
 8002f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f56:	4649      	mov	r1, r9
 8002f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f70:	ebb2 040a 	subs.w	r4, r2, sl
 8002f74:	eb63 050b 	sbc.w	r5, r3, fp
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	00eb      	lsls	r3, r5, #3
 8002f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f86:	00e2      	lsls	r2, r4, #3
 8002f88:	4614      	mov	r4, r2
 8002f8a:	461d      	mov	r5, r3
 8002f8c:	4643      	mov	r3, r8
 8002f8e:	18e3      	adds	r3, r4, r3
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	464b      	mov	r3, r9
 8002f94:	eb45 0303 	adc.w	r3, r5, r3
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	028b      	lsls	r3, r1, #10
 8002faa:	4621      	mov	r1, r4
 8002fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	028a      	lsls	r2, r1, #10
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	61fa      	str	r2, [r7, #28]
 8002fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc4:	f7fd f95e 	bl	8000284 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4613      	mov	r3, r2
 8002fce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fea:	e002      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3750      	adds	r7, #80	; 0x50
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	00f42400 	.word	0x00f42400
 8003008:	007a1200 	.word	0x007a1200

0800300c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_RCC_GetHCLKFreq+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000008 	.word	0x20000008

08003024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003028:	f7ff fff0 	bl	800300c <HAL_RCC_GetHCLKFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	0a9b      	lsrs	r3, r3, #10
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	4903      	ldr	r1, [pc, #12]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003040:	4618      	mov	r0, r3
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40023800 	.word	0x40023800
 8003048:	080090d8 	.word	0x080090d8

0800304c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003050:	f7ff ffdc 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0b5b      	lsrs	r3, r3, #13
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4903      	ldr	r1, [pc, #12]	; (8003070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	080090d8 	.word	0x080090d8

08003074 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	220f      	movs	r2, #15
 8003082:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0203 	and.w	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <HAL_RCC_GetClockConfig+0x5c>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_GetClockConfig+0x5c>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	08db      	lsrs	r3, r3, #3
 80030ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <HAL_RCC_GetClockConfig+0x60>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	601a      	str	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40023c00 	.word	0x40023c00

080030d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0c5      	b.n	8003276 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a64      	ldr	r2, [pc, #400]	; (8003280 <HAL_TIM_Base_Init+0x1a8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d045      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fc:	d040      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a60      	ldr	r2, [pc, #384]	; (8003284 <HAL_TIM_Base_Init+0x1ac>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d03b      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a5e      	ldr	r2, [pc, #376]	; (8003288 <HAL_TIM_Base_Init+0x1b0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d036      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a5d      	ldr	r2, [pc, #372]	; (800328c <HAL_TIM_Base_Init+0x1b4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d031      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5b      	ldr	r2, [pc, #364]	; (8003290 <HAL_TIM_Base_Init+0x1b8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d02c      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5a      	ldr	r2, [pc, #360]	; (8003294 <HAL_TIM_Base_Init+0x1bc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d027      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_TIM_Base_Init+0x1c0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d022      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a57      	ldr	r2, [pc, #348]	; (800329c <HAL_TIM_Base_Init+0x1c4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d01d      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a55      	ldr	r2, [pc, #340]	; (80032a0 <HAL_TIM_Base_Init+0x1c8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d018      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a54      	ldr	r2, [pc, #336]	; (80032a4 <HAL_TIM_Base_Init+0x1cc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d013      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_TIM_Base_Init+0x1d0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00e      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a51      	ldr	r2, [pc, #324]	; (80032ac <HAL_TIM_Base_Init+0x1d4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a4f      	ldr	r2, [pc, #316]	; (80032b0 <HAL_TIM_Base_Init+0x1d8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_TIM_Base_Init+0xa8>
 8003176:	f240 1113 	movw	r1, #275	; 0x113
 800317a:	484e      	ldr	r0, [pc, #312]	; (80032b4 <HAL_TIM_Base_Init+0x1dc>)
 800317c:	f7fd ff14 	bl	8000fa8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d014      	beq.n	80031b2 <HAL_TIM_Base_Init+0xda>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b10      	cmp	r3, #16
 800318e:	d010      	beq.n	80031b2 <HAL_TIM_Base_Init+0xda>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b20      	cmp	r3, #32
 8003196:	d00c      	beq.n	80031b2 <HAL_TIM_Base_Init+0xda>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d008      	beq.n	80031b2 <HAL_TIM_Base_Init+0xda>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b60      	cmp	r3, #96	; 0x60
 80031a6:	d004      	beq.n	80031b2 <HAL_TIM_Base_Init+0xda>
 80031a8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80031ac:	4841      	ldr	r0, [pc, #260]	; (80032b4 <HAL_TIM_Base_Init+0x1dc>)
 80031ae:	f7fd fefb 	bl	8000fa8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00e      	beq.n	80031d8 <HAL_TIM_Base_Init+0x100>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c2:	d009      	beq.n	80031d8 <HAL_TIM_Base_Init+0x100>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031cc:	d004      	beq.n	80031d8 <HAL_TIM_Base_Init+0x100>
 80031ce:	f240 1115 	movw	r1, #277	; 0x115
 80031d2:	4838      	ldr	r0, [pc, #224]	; (80032b4 <HAL_TIM_Base_Init+0x1dc>)
 80031d4:	f7fd fee8 	bl	8000fa8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_TIM_Base_Init+0x11a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d004      	beq.n	80031f2 <HAL_TIM_Base_Init+0x11a>
 80031e8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80031ec:	4831      	ldr	r0, [pc, #196]	; (80032b4 <HAL_TIM_Base_Init+0x1dc>)
 80031ee:	f7fd fedb 	bl	8000fa8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f856 	bl	80032b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f000 fa54 	bl	80036cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40000c00 	.word	0x40000c00
 8003290:	40001000 	.word	0x40001000
 8003294:	40001400 	.word	0x40001400
 8003298:	40010400 	.word	0x40010400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800
 80032a8:	40001800 	.word	0x40001800
 80032ac:	40001c00 	.word	0x40001c00
 80032b0:	40002000 	.word	0x40002000
 80032b4:	08008f54 	.word	0x08008f54

080032b8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a51      	ldr	r2, [pc, #324]	; (8003420 <HAL_TIM_Base_Start_IT+0x154>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d045      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e6:	d040      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a4d      	ldr	r2, [pc, #308]	; (8003424 <HAL_TIM_Base_Start_IT+0x158>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d03b      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a4c      	ldr	r2, [pc, #304]	; (8003428 <HAL_TIM_Base_Start_IT+0x15c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d036      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a4a      	ldr	r2, [pc, #296]	; (800342c <HAL_TIM_Base_Start_IT+0x160>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d031      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a49      	ldr	r2, [pc, #292]	; (8003430 <HAL_TIM_Base_Start_IT+0x164>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d02c      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a47      	ldr	r2, [pc, #284]	; (8003434 <HAL_TIM_Base_Start_IT+0x168>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d027      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a46      	ldr	r2, [pc, #280]	; (8003438 <HAL_TIM_Base_Start_IT+0x16c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a44      	ldr	r2, [pc, #272]	; (800343c <HAL_TIM_Base_Start_IT+0x170>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01d      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a43      	ldr	r2, [pc, #268]	; (8003440 <HAL_TIM_Base_Start_IT+0x174>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d018      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a41      	ldr	r2, [pc, #260]	; (8003444 <HAL_TIM_Base_Start_IT+0x178>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a40      	ldr	r2, [pc, #256]	; (8003448 <HAL_TIM_Base_Start_IT+0x17c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00e      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a3e      	ldr	r2, [pc, #248]	; (800344c <HAL_TIM_Base_Start_IT+0x180>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a3d      	ldr	r2, [pc, #244]	; (8003450 <HAL_TIM_Base_Start_IT+0x184>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d004      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x9e>
 8003360:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003364:	483b      	ldr	r0, [pc, #236]	; (8003454 <HAL_TIM_Base_Start_IT+0x188>)
 8003366:	f7fd fe1f 	bl	8000fa8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d001      	beq.n	800337a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e04e      	b.n	8003418 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a22      	ldr	r2, [pc, #136]	; (8003420 <HAL_TIM_Base_Start_IT+0x154>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_TIM_Base_Start_IT+0x116>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d01d      	beq.n	80033e2 <HAL_TIM_Base_Start_IT+0x116>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <HAL_TIM_Base_Start_IT+0x158>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_TIM_Base_Start_IT+0x116>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_TIM_Base_Start_IT+0x15c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_TIM_Base_Start_IT+0x116>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1b      	ldr	r2, [pc, #108]	; (800342c <HAL_TIM_Base_Start_IT+0x160>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_TIM_Base_Start_IT+0x116>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <HAL_TIM_Base_Start_IT+0x16c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_TIM_Base_Start_IT+0x116>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1a      	ldr	r2, [pc, #104]	; (800343c <HAL_TIM_Base_Start_IT+0x170>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIM_Base_Start_IT+0x116>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1a      	ldr	r2, [pc, #104]	; (8003448 <HAL_TIM_Base_Start_IT+0x17c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d111      	bne.n	8003406 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b06      	cmp	r3, #6
 80033f2:	d010      	beq.n	8003416 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003404:	e007      	b.n	8003416 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40010000 	.word	0x40010000
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800
 800342c:	40000c00 	.word	0x40000c00
 8003430:	40001000 	.word	0x40001000
 8003434:	40001400 	.word	0x40001400
 8003438:	40010400 	.word	0x40010400
 800343c:	40014000 	.word	0x40014000
 8003440:	40014400 	.word	0x40014400
 8003444:	40014800 	.word	0x40014800
 8003448:	40001800 	.word	0x40001800
 800344c:	40001c00 	.word	0x40001c00
 8003450:	40002000 	.word	0x40002000
 8003454:	08008f54 	.word	0x08008f54

08003458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b02      	cmp	r3, #2
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0202 	mvn.w	r2, #2
 8003484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8f8 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8ea 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f8fb 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0204 	mvn.w	r2, #4
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8ce 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8c0 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f8d1 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b08      	cmp	r3, #8
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b08      	cmp	r3, #8
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0208 	mvn.w	r2, #8
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2204      	movs	r2, #4
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8a4 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f896 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f8a7 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b10      	cmp	r3, #16
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b10      	cmp	r3, #16
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0210 	mvn.w	r2, #16
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2208      	movs	r2, #8
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f87a 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f86c 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f87d 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0201 	mvn.w	r2, #1
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f846 	bl	8003668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b80      	cmp	r3, #128	; 0x80
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f90c 	bl	8003820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d10e      	bne.n	8003634 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d107      	bne.n	8003634 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800362c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f842 	bl	80036b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b20      	cmp	r3, #32
 8003640:	d10e      	bne.n	8003660 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b20      	cmp	r3, #32
 800364e:	d107      	bne.n	8003660 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0220 	mvn.w	r2, #32
 8003658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8d6 	bl	800380c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a40      	ldr	r2, [pc, #256]	; (80037e0 <TIM_Base_SetConfig+0x114>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <TIM_Base_SetConfig+0x40>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ea:	d00f      	beq.n	800370c <TIM_Base_SetConfig+0x40>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a3d      	ldr	r2, [pc, #244]	; (80037e4 <TIM_Base_SetConfig+0x118>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00b      	beq.n	800370c <TIM_Base_SetConfig+0x40>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a3c      	ldr	r2, [pc, #240]	; (80037e8 <TIM_Base_SetConfig+0x11c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <TIM_Base_SetConfig+0x40>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a3b      	ldr	r2, [pc, #236]	; (80037ec <TIM_Base_SetConfig+0x120>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <TIM_Base_SetConfig+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a3a      	ldr	r2, [pc, #232]	; (80037f0 <TIM_Base_SetConfig+0x124>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d108      	bne.n	800371e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a2f      	ldr	r2, [pc, #188]	; (80037e0 <TIM_Base_SetConfig+0x114>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d02b      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372c:	d027      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <TIM_Base_SetConfig+0x118>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d023      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a2b      	ldr	r2, [pc, #172]	; (80037e8 <TIM_Base_SetConfig+0x11c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01f      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <TIM_Base_SetConfig+0x120>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01b      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <TIM_Base_SetConfig+0x124>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d017      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a28      	ldr	r2, [pc, #160]	; (80037f4 <TIM_Base_SetConfig+0x128>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a27      	ldr	r2, [pc, #156]	; (80037f8 <TIM_Base_SetConfig+0x12c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00f      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <TIM_Base_SetConfig+0x130>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00b      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a25      	ldr	r2, [pc, #148]	; (8003800 <TIM_Base_SetConfig+0x134>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a24      	ldr	r2, [pc, #144]	; (8003804 <TIM_Base_SetConfig+0x138>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d003      	beq.n	800377e <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a23      	ldr	r2, [pc, #140]	; (8003808 <TIM_Base_SetConfig+0x13c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d108      	bne.n	8003790 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <TIM_Base_SetConfig+0x114>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_Base_SetConfig+0xf8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <TIM_Base_SetConfig+0x124>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d103      	bne.n	80037cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	615a      	str	r2, [r3, #20]
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40000c00 	.word	0x40000c00
 80037f0:	40010400 	.word	0x40010400
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40014400 	.word	0x40014400
 80037fc:	40014800 	.word	0x40014800
 8003800:	40001800 	.word	0x40001800
 8003804:	40001c00 	.word	0x40001c00
 8003808:	40002000 	.word	0x40002000

0800380c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0be      	b.n	80039c4 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d031      	beq.n	80038b2 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a5e      	ldr	r2, [pc, #376]	; (80039cc <HAL_UART_Init+0x198>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <HAL_UART_Init+0x4c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a5c      	ldr	r2, [pc, #368]	; (80039d0 <HAL_UART_Init+0x19c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_UART_Init+0x4c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5b      	ldr	r2, [pc, #364]	; (80039d4 <HAL_UART_Init+0x1a0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_UART_Init+0x4c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a59      	ldr	r2, [pc, #356]	; (80039d8 <HAL_UART_Init+0x1a4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_UART_Init+0x4c>
 8003876:	f240 1173 	movw	r1, #371	; 0x173
 800387a:	4858      	ldr	r0, [pc, #352]	; (80039dc <HAL_UART_Init+0x1a8>)
 800387c:	f7fd fb94 	bl	8000fa8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d041      	beq.n	800390c <HAL_UART_Init+0xd8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003890:	d03c      	beq.n	800390c <HAL_UART_Init+0xd8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800389a:	d037      	beq.n	800390c <HAL_UART_Init+0xd8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a4:	d032      	beq.n	800390c <HAL_UART_Init+0xd8>
 80038a6:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80038aa:	484c      	ldr	r0, [pc, #304]	; (80039dc <HAL_UART_Init+0x1a8>)
 80038ac:	f7fd fb7c 	bl	8000fa8 <assert_failed>
 80038b0:	e02c      	b.n	800390c <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a45      	ldr	r2, [pc, #276]	; (80039cc <HAL_UART_Init+0x198>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d027      	beq.n	800390c <HAL_UART_Init+0xd8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a43      	ldr	r2, [pc, #268]	; (80039d0 <HAL_UART_Init+0x19c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d022      	beq.n	800390c <HAL_UART_Init+0xd8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a42      	ldr	r2, [pc, #264]	; (80039d4 <HAL_UART_Init+0x1a0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d01d      	beq.n	800390c <HAL_UART_Init+0xd8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a42      	ldr	r2, [pc, #264]	; (80039e0 <HAL_UART_Init+0x1ac>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <HAL_UART_Init+0xd8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a41      	ldr	r2, [pc, #260]	; (80039e4 <HAL_UART_Init+0x1b0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_UART_Init+0xd8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a3b      	ldr	r2, [pc, #236]	; (80039d8 <HAL_UART_Init+0x1a4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_UART_Init+0xd8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a3d      	ldr	r2, [pc, #244]	; (80039e8 <HAL_UART_Init+0x1b4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_UART_Init+0xd8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a3b      	ldr	r2, [pc, #236]	; (80039ec <HAL_UART_Init+0x1b8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_UART_Init+0xd8>
 8003902:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003906:	4835      	ldr	r0, [pc, #212]	; (80039dc <HAL_UART_Init+0x1a8>)
 8003908:	f7fd fb4e 	bl	8000fa8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_UART_Init+0xf4>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d004      	beq.n	8003928 <HAL_UART_Init+0xf4>
 800391e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003922:	482e      	ldr	r0, [pc, #184]	; (80039dc <HAL_UART_Init+0x1a8>)
 8003924:	f7fd fb40 	bl	8000fa8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <HAL_UART_Init+0x110>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003938:	d004      	beq.n	8003944 <HAL_UART_Init+0x110>
 800393a:	f240 117b 	movw	r1, #379	; 0x17b
 800393e:	4827      	ldr	r0, [pc, #156]	; (80039dc <HAL_UART_Init+0x1a8>)
 8003940:	f7fd fb32 	bl	8000fa8 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7fd fb5b 	bl	8001014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2224      	movs	r2, #36	; 0x24
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003974:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fc8c 	bl	8004294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800398a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800399a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40011000 	.word	0x40011000
 80039d0:	40004400 	.word	0x40004400
 80039d4:	40004800 	.word	0x40004800
 80039d8:	40011400 	.word	0x40011400
 80039dc:	08008f8c 	.word	0x08008f8c
 80039e0:	40004c00 	.word	0x40004c00
 80039e4:	40005000 	.word	0x40005000
 80039e8:	40007800 	.word	0x40007800
 80039ec:	40007c00 	.word	0x40007c00

080039f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b0ba      	sub	sp, #232	; 0xe8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <HAL_UART_IRQHandler+0x66>
 8003a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fb65 	bl	800411e <UART_Receive_IT>
      return;
 8003a54:	e256      	b.n	8003f04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80de 	beq.w	8003c1c <HAL_UART_IRQHandler+0x22c>
 8003a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80d1 	beq.w	8003c1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_UART_IRQHandler+0xae>
 8003a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f043 0201 	orr.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xd2>
 8003aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xf6>
 8003ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f043 0204 	orr.w	r2, r3, #4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d011      	beq.n	8003b16 <HAL_UART_IRQHandler+0x126>
 8003af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f043 0208 	orr.w	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 81ed 	beq.w	8003efa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_UART_IRQHandler+0x14e>
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 faf0 	bl	800411e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d103      	bne.n	8003b6a <HAL_UART_IRQHandler+0x17a>
 8003b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d04f      	beq.n	8003c0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f9f8 	bl	8003f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b40      	cmp	r3, #64	; 0x40
 8003b7c:	d141      	bne.n	8003c02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3314      	adds	r3, #20
 8003b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3314      	adds	r3, #20
 8003ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003baa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1d9      	bne.n	8003b7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d013      	beq.n	8003bfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	4a7d      	ldr	r2, [pc, #500]	; (8003dcc <HAL_UART_IRQHandler+0x3dc>)
 8003bd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd ffea 	bl	8001bb8 <HAL_DMA_Abort_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	e00e      	b.n	8003c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f99a 	bl	8003f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	e00a      	b.n	8003c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f996 	bl	8003f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	e006      	b.n	8003c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f992 	bl	8003f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c16:	e170      	b.n	8003efa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	bf00      	nop
    return;
 8003c1a:	e16e      	b.n	8003efa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	f040 814a 	bne.w	8003eba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8143 	beq.w	8003eba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 813c 	beq.w	8003eba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	f040 80b4 	bne.w	8003dd0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8140 	beq.w	8003efe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c86:	429a      	cmp	r2, r3
 8003c88:	f080 8139 	bcs.w	8003efe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9e:	f000 8088 	beq.w	8003db2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1d9      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e1      	bne.n	8003cee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e3      	bne.n	8003d2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d94:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e3      	bne.n	8003d70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fd fe93 	bl	8001ad8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8c0 	bl	8003f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dc8:	e099      	b.n	8003efe <HAL_UART_IRQHandler+0x50e>
 8003dca:	bf00      	nop
 8003dcc:	08004027 	.word	0x08004027
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 808b 	beq.w	8003f02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003dec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8086 	beq.w	8003f02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	330c      	adds	r3, #12
 8003e16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e1a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e3      	bne.n	8003df6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3314      	adds	r3, #20
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e52:	633a      	str	r2, [r7, #48]	; 0x30
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e3      	bne.n	8003e2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0310 	bic.w	r3, r3, #16
 8003e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e98:	61fa      	str	r2, [r7, #28]
 8003e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e3      	bne.n	8003e74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f848 	bl	8003f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eb8:	e023      	b.n	8003f02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_UART_IRQHandler+0x4ea>
 8003ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8bb 	bl	800404e <UART_Transmit_IT>
    return;
 8003ed8:	e014      	b.n	8003f04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00e      	beq.n	8003f04 <HAL_UART_IRQHandler+0x514>
 8003ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8fb 	bl	80040ee <UART_EndTransmit_IT>
    return;
 8003ef8:	e004      	b.n	8003f04 <HAL_UART_IRQHandler+0x514>
    return;
 8003efa:	bf00      	nop
 8003efc:	e002      	b.n	8003f04 <HAL_UART_IRQHandler+0x514>
      return;
 8003efe:	bf00      	nop
 8003f00:	e000      	b.n	8003f04 <HAL_UART_IRQHandler+0x514>
      return;
 8003f02:	bf00      	nop
  }
}
 8003f04:	37e8      	adds	r7, #232	; 0xe8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop

08003f0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b095      	sub	sp, #84	; 0x54
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f88:	643a      	str	r2, [r7, #64]	; 0x40
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3314      	adds	r3, #20
 8003fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3314      	adds	r3, #20
 8003fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e5      	bne.n	8003f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d119      	bne.n	800400c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f023 0310 	bic.w	r3, r3, #16
 8003fee:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff8:	61ba      	str	r2, [r7, #24]
 8003ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6979      	ldr	r1, [r7, #20]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	613b      	str	r3, [r7, #16]
   return(result);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800401a:	bf00      	nop
 800401c:	3754      	adds	r7, #84	; 0x54
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff ff77 	bl	8003f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b21      	cmp	r3, #33	; 0x21
 8004060:	d13e      	bne.n	80040e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406a:	d114      	bne.n	8004096 <UART_Transmit_IT+0x48>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d110      	bne.n	8004096 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004088:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	1c9a      	adds	r2, r3, #2
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	621a      	str	r2, [r3, #32]
 8004094:	e008      	b.n	80040a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	1c59      	adds	r1, r3, #1
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6211      	str	r1, [r2, #32]
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4619      	mov	r1, r3
 80040b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10f      	bne.n	80040dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e000      	b.n	80040e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
  }
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff fefc 	bl	8003f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b08c      	sub	sp, #48	; 0x30
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b22      	cmp	r3, #34	; 0x22
 8004130:	f040 80ab 	bne.w	800428a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413c:	d117      	bne.n	800416e <UART_Receive_IT+0x50>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d113      	bne.n	800416e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004146:	2300      	movs	r3, #0
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415c:	b29a      	uxth	r2, r3
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	1c9a      	adds	r2, r3, #2
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
 800416c:	e026      	b.n	80041bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004180:	d007      	beq.n	8004192 <UART_Receive_IT+0x74>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <UART_Receive_IT+0x82>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e008      	b.n	80041b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4619      	mov	r1, r3
 80041ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d15a      	bne.n	8004286 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0220 	bic.w	r2, r2, #32
 80041de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	2b01      	cmp	r3, #1
 800420e:	d135      	bne.n	800427c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	613b      	str	r3, [r7, #16]
   return(result);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f023 0310 	bic.w	r3, r3, #16
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004236:	623a      	str	r2, [r7, #32]
 8004238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	69f9      	ldr	r1, [r7, #28]
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	61bb      	str	r3, [r7, #24]
   return(result);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e5      	bne.n	8004216 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b10      	cmp	r3, #16
 8004256:	d10a      	bne.n	800426e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004272:	4619      	mov	r1, r3
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff fe67 	bl	8003f48 <HAL_UARTEx_RxEventCallback>
 800427a:	e002      	b.n	8004282 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff fe4f 	bl	8003f20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e002      	b.n	800428c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	e000      	b.n	800428c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
  }
}
 800428c:	4618      	mov	r0, r3
 800428e:	3730      	adds	r7, #48	; 0x30
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004298:	b0c0      	sub	sp, #256	; 0x100
 800429a:	af00      	add	r7, sp, #0
 800429c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	4bcf      	ldr	r3, [pc, #828]	; (80045e4 <UART_SetConfig+0x350>)
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d904      	bls.n	80042b6 <UART_SetConfig+0x22>
 80042ac:	f640 6161 	movw	r1, #3681	; 0xe61
 80042b0:	48cd      	ldr	r0, [pc, #820]	; (80045e8 <UART_SetConfig+0x354>)
 80042b2:	f7fc fe79 	bl	8000fa8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <UART_SetConfig+0x42>
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ca:	d004      	beq.n	80042d6 <UART_SetConfig+0x42>
 80042cc:	f640 6162 	movw	r1, #3682	; 0xe62
 80042d0:	48c5      	ldr	r0, [pc, #788]	; (80045e8 <UART_SetConfig+0x354>)
 80042d2:	f7fc fe69 	bl	8000fa8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d010      	beq.n	8004302 <UART_SetConfig+0x6e>
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ea:	d00a      	beq.n	8004302 <UART_SetConfig+0x6e>
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042f6:	d004      	beq.n	8004302 <UART_SetConfig+0x6e>
 80042f8:	f640 6163 	movw	r1, #3683	; 0xe63
 80042fc:	48ba      	ldr	r0, [pc, #744]	; (80045e8 <UART_SetConfig+0x354>)
 80042fe:	f7fc fe53 	bl	8000fa8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d104      	bne.n	800431c <UART_SetConfig+0x88>
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <UART_SetConfig+0x92>
 800431c:	f640 6164 	movw	r1, #3684	; 0xe64
 8004320:	48b1      	ldr	r0, [pc, #708]	; (80045e8 <UART_SetConfig+0x354>)
 8004322:	f7fc fe41 	bl	8000fa8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004336:	68d9      	ldr	r1, [r3, #12]
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	ea40 0301 	orr.w	r3, r0, r1
 8004342:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	431a      	orrs	r2, r3
 8004352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	431a      	orrs	r2, r3
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004372:	f021 010c 	bic.w	r1, r1, #12
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004380:	430b      	orrs	r3, r1
 8004382:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	6999      	ldr	r1, [r3, #24]
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	ea40 0301 	orr.w	r3, r0, r1
 80043a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b90      	ldr	r3, [pc, #576]	; (80045ec <UART_SetConfig+0x358>)
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d005      	beq.n	80043ba <UART_SetConfig+0x126>
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b8e      	ldr	r3, [pc, #568]	; (80045f0 <UART_SetConfig+0x35c>)
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d104      	bne.n	80043c4 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ba:	f7fe fe47 	bl	800304c <HAL_RCC_GetPCLK2Freq>
 80043be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043c2:	e003      	b.n	80043cc <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe fe2e 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 80043c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d6:	f040 810f 	bne.w	80045f8 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043e4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043e8:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043ec:	4622      	mov	r2, r4
 80043ee:	462b      	mov	r3, r5
 80043f0:	1891      	adds	r1, r2, r2
 80043f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80043f4:	415b      	adcs	r3, r3
 80043f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043fc:	4621      	mov	r1, r4
 80043fe:	eb12 0801 	adds.w	r8, r2, r1
 8004402:	4629      	mov	r1, r5
 8004404:	eb43 0901 	adc.w	r9, r3, r1
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004414:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004418:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800441c:	4690      	mov	r8, r2
 800441e:	4699      	mov	r9, r3
 8004420:	4623      	mov	r3, r4
 8004422:	eb18 0303 	adds.w	r3, r8, r3
 8004426:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800442a:	462b      	mov	r3, r5
 800442c:	eb49 0303 	adc.w	r3, r9, r3
 8004430:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004440:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004444:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004448:	460b      	mov	r3, r1
 800444a:	18db      	adds	r3, r3, r3
 800444c:	653b      	str	r3, [r7, #80]	; 0x50
 800444e:	4613      	mov	r3, r2
 8004450:	eb42 0303 	adc.w	r3, r2, r3
 8004454:	657b      	str	r3, [r7, #84]	; 0x54
 8004456:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800445a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800445e:	f7fb ff11 	bl	8000284 <__aeabi_uldivmod>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <UART_SetConfig+0x360>)
 8004468:	fba3 2302 	umull	r2, r3, r3, r2
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	011c      	lsls	r4, r3, #4
 8004470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004474:	2200      	movs	r2, #0
 8004476:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800447a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800447e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004482:	4642      	mov	r2, r8
 8004484:	464b      	mov	r3, r9
 8004486:	1891      	adds	r1, r2, r2
 8004488:	64b9      	str	r1, [r7, #72]	; 0x48
 800448a:	415b      	adcs	r3, r3
 800448c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004492:	4641      	mov	r1, r8
 8004494:	eb12 0a01 	adds.w	sl, r2, r1
 8004498:	4649      	mov	r1, r9
 800449a:	eb43 0b01 	adc.w	fp, r3, r1
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b2:	4692      	mov	sl, r2
 80044b4:	469b      	mov	fp, r3
 80044b6:	4643      	mov	r3, r8
 80044b8:	eb1a 0303 	adds.w	r3, sl, r3
 80044bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044c0:	464b      	mov	r3, r9
 80044c2:	eb4b 0303 	adc.w	r3, fp, r3
 80044c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044d6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044de:	460b      	mov	r3, r1
 80044e0:	18db      	adds	r3, r3, r3
 80044e2:	643b      	str	r3, [r7, #64]	; 0x40
 80044e4:	4613      	mov	r3, r2
 80044e6:	eb42 0303 	adc.w	r3, r2, r3
 80044ea:	647b      	str	r3, [r7, #68]	; 0x44
 80044ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044f0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044f4:	f7fb fec6 	bl	8000284 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4611      	mov	r1, r2
 80044fe:	4b3d      	ldr	r3, [pc, #244]	; (80045f4 <UART_SetConfig+0x360>)
 8004500:	fba3 2301 	umull	r2, r3, r3, r1
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	2264      	movs	r2, #100	; 0x64
 8004508:	fb02 f303 	mul.w	r3, r2, r3
 800450c:	1acb      	subs	r3, r1, r3
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004514:	4b37      	ldr	r3, [pc, #220]	; (80045f4 <UART_SetConfig+0x360>)
 8004516:	fba3 2302 	umull	r2, r3, r3, r2
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004522:	441c      	add	r4, r3
 8004524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004528:	2200      	movs	r2, #0
 800452a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800452e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004532:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004536:	4642      	mov	r2, r8
 8004538:	464b      	mov	r3, r9
 800453a:	1891      	adds	r1, r2, r2
 800453c:	63b9      	str	r1, [r7, #56]	; 0x38
 800453e:	415b      	adcs	r3, r3
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004542:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004546:	4641      	mov	r1, r8
 8004548:	1851      	adds	r1, r2, r1
 800454a:	6339      	str	r1, [r7, #48]	; 0x30
 800454c:	4649      	mov	r1, r9
 800454e:	414b      	adcs	r3, r1
 8004550:	637b      	str	r3, [r7, #52]	; 0x34
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800455e:	4659      	mov	r1, fp
 8004560:	00cb      	lsls	r3, r1, #3
 8004562:	4651      	mov	r1, sl
 8004564:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004568:	4651      	mov	r1, sl
 800456a:	00ca      	lsls	r2, r1, #3
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	4603      	mov	r3, r0
 8004572:	4642      	mov	r2, r8
 8004574:	189b      	adds	r3, r3, r2
 8004576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800457a:	464b      	mov	r3, r9
 800457c:	460a      	mov	r2, r1
 800457e:	eb42 0303 	adc.w	r3, r2, r3
 8004582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004592:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004596:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800459a:	460b      	mov	r3, r1
 800459c:	18db      	adds	r3, r3, r3
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a0:	4613      	mov	r3, r2
 80045a2:	eb42 0303 	adc.w	r3, r2, r3
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ac:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045b0:	f7fb fe68 	bl	8000284 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <UART_SetConfig+0x360>)
 80045ba:	fba3 1302 	umull	r1, r3, r3, r2
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2164      	movs	r1, #100	; 0x64
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	3332      	adds	r3, #50	; 0x32
 80045cc:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <UART_SetConfig+0x360>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	f003 0207 	and.w	r2, r3, #7
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4422      	add	r2, r4
 80045e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045e2:	e108      	b.n	80047f6 <UART_SetConfig+0x562>
 80045e4:	00a037a0 	.word	0x00a037a0
 80045e8:	08008f8c 	.word	0x08008f8c
 80045ec:	40011000 	.word	0x40011000
 80045f0:	40011400 	.word	0x40011400
 80045f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004602:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800460a:	4642      	mov	r2, r8
 800460c:	464b      	mov	r3, r9
 800460e:	1891      	adds	r1, r2, r2
 8004610:	6239      	str	r1, [r7, #32]
 8004612:	415b      	adcs	r3, r3
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
 8004616:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800461a:	4641      	mov	r1, r8
 800461c:	1854      	adds	r4, r2, r1
 800461e:	4649      	mov	r1, r9
 8004620:	eb43 0501 	adc.w	r5, r3, r1
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	00eb      	lsls	r3, r5, #3
 800462e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004632:	00e2      	lsls	r2, r4, #3
 8004634:	4614      	mov	r4, r2
 8004636:	461d      	mov	r5, r3
 8004638:	4643      	mov	r3, r8
 800463a:	18e3      	adds	r3, r4, r3
 800463c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004640:	464b      	mov	r3, r9
 8004642:	eb45 0303 	adc.w	r3, r5, r3
 8004646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004656:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004666:	4629      	mov	r1, r5
 8004668:	008b      	lsls	r3, r1, #2
 800466a:	4621      	mov	r1, r4
 800466c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004670:	4621      	mov	r1, r4
 8004672:	008a      	lsls	r2, r1, #2
 8004674:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004678:	f7fb fe04 	bl	8000284 <__aeabi_uldivmod>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4b60      	ldr	r3, [pc, #384]	; (8004804 <UART_SetConfig+0x570>)
 8004682:	fba3 2302 	umull	r2, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	011c      	lsls	r4, r3, #4
 800468a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800468e:	2200      	movs	r2, #0
 8004690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004694:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004698:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800469c:	4642      	mov	r2, r8
 800469e:	464b      	mov	r3, r9
 80046a0:	1891      	adds	r1, r2, r2
 80046a2:	61b9      	str	r1, [r7, #24]
 80046a4:	415b      	adcs	r3, r3
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ac:	4641      	mov	r1, r8
 80046ae:	1851      	adds	r1, r2, r1
 80046b0:	6139      	str	r1, [r7, #16]
 80046b2:	4649      	mov	r1, r9
 80046b4:	414b      	adcs	r3, r1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046c4:	4659      	mov	r1, fp
 80046c6:	00cb      	lsls	r3, r1, #3
 80046c8:	4651      	mov	r1, sl
 80046ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ce:	4651      	mov	r1, sl
 80046d0:	00ca      	lsls	r2, r1, #3
 80046d2:	4610      	mov	r0, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	4642      	mov	r2, r8
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046e0:	464b      	mov	r3, r9
 80046e2:	460a      	mov	r2, r1
 80046e4:	eb42 0303 	adc.w	r3, r2, r3
 80046e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80046f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004704:	4649      	mov	r1, r9
 8004706:	008b      	lsls	r3, r1, #2
 8004708:	4641      	mov	r1, r8
 800470a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800470e:	4641      	mov	r1, r8
 8004710:	008a      	lsls	r2, r1, #2
 8004712:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004716:	f7fb fdb5 	bl	8000284 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4b39      	ldr	r3, [pc, #228]	; (8004804 <UART_SetConfig+0x570>)
 8004720:	fba3 1302 	umull	r1, r3, r3, r2
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	2164      	movs	r1, #100	; 0x64
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	3332      	adds	r3, #50	; 0x32
 8004732:	4a34      	ldr	r2, [pc, #208]	; (8004804 <UART_SetConfig+0x570>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473e:	441c      	add	r4, r3
 8004740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004744:	2200      	movs	r2, #0
 8004746:	673b      	str	r3, [r7, #112]	; 0x70
 8004748:	677a      	str	r2, [r7, #116]	; 0x74
 800474a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800474e:	4642      	mov	r2, r8
 8004750:	464b      	mov	r3, r9
 8004752:	1891      	adds	r1, r2, r2
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	415b      	adcs	r3, r3
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800475e:	4641      	mov	r1, r8
 8004760:	1851      	adds	r1, r2, r1
 8004762:	6039      	str	r1, [r7, #0]
 8004764:	4649      	mov	r1, r9
 8004766:	414b      	adcs	r3, r1
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004776:	4659      	mov	r1, fp
 8004778:	00cb      	lsls	r3, r1, #3
 800477a:	4651      	mov	r1, sl
 800477c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004780:	4651      	mov	r1, sl
 8004782:	00ca      	lsls	r2, r1, #3
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	4603      	mov	r3, r0
 800478a:	4642      	mov	r2, r8
 800478c:	189b      	adds	r3, r3, r2
 800478e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004790:	464b      	mov	r3, r9
 8004792:	460a      	mov	r2, r1
 8004794:	eb42 0303 	adc.w	r3, r2, r3
 8004798:	66fb      	str	r3, [r7, #108]	; 0x6c
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	663b      	str	r3, [r7, #96]	; 0x60
 80047a4:	667a      	str	r2, [r7, #100]	; 0x64
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047b2:	4649      	mov	r1, r9
 80047b4:	008b      	lsls	r3, r1, #2
 80047b6:	4641      	mov	r1, r8
 80047b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047bc:	4641      	mov	r1, r8
 80047be:	008a      	lsls	r2, r1, #2
 80047c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047c4:	f7fb fd5e 	bl	8000284 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <UART_SetConfig+0x570>)
 80047ce:	fba3 1302 	umull	r1, r3, r3, r2
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	2164      	movs	r1, #100	; 0x64
 80047d6:	fb01 f303 	mul.w	r3, r1, r3
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	3332      	adds	r3, #50	; 0x32
 80047e0:	4a08      	ldr	r2, [pc, #32]	; (8004804 <UART_SetConfig+0x570>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	f003 020f 	and.w	r2, r3, #15
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4422      	add	r2, r4
 80047f4:	609a      	str	r2, [r3, #8]
}
 80047f6:	bf00      	nop
 80047f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047fc:	46bd      	mov	sp, r7
 80047fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004802:	bf00      	nop
 8004804:	51eb851f 	.word	0x51eb851f

08004808 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f103 0208 	add.w	r2, r3, #8
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f04f 32ff 	mov.w	r2, #4294967295
 8004820:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f103 0208 	add.w	r2, r3, #8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f103 0208 	add.w	r2, r3, #8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d103      	bne.n	80048ca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e00c      	b.n	80048e4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3308      	adds	r3, #8
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e002      	b.n	80048d8 <vListInsert+0x2e>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d2f6      	bcs.n	80048d2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	601a      	str	r2, [r3, #0]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6892      	ldr	r2, [r2, #8]
 8004932:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6852      	ldr	r2, [r2, #4]
 800493c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d103      	bne.n	8004950 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	1e5a      	subs	r2, r3, #1
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800499a:	f002 f845 	bl	8006a28 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	441a      	add	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	3b01      	subs	r3, #1
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	441a      	add	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	22ff      	movs	r2, #255	; 0xff
 80049de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	22ff      	movs	r2, #255	; 0xff
 80049e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d114      	bne.n	8004a1a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01a      	beq.n	8004a2e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3310      	adds	r3, #16
 80049fc:	4618      	mov	r0, r3
 80049fe:	f001 f91f 	bl	8005c40 <xTaskRemoveFromEventList>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d012      	beq.n	8004a2e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004a08:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <xQueueGenericReset+0xcc>)
 8004a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	e009      	b.n	8004a2e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3310      	adds	r3, #16
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fef2 	bl	8004808 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3324      	adds	r3, #36	; 0x24
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff feed 	bl	8004808 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004a2e:	f002 f82b 	bl	8006a88 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004a32:	2301      	movs	r3, #1
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	e000ed04 	.word	0xe000ed04

08004a40 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08c      	sub	sp, #48	; 0x30
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <xQueueGenericCreate+0x2a>
        __asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	61bb      	str	r3, [r7, #24]
    }
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d006      	beq.n	8004a88 <xQueueGenericCreate+0x48>
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d101      	bne.n	8004a8c <xQueueGenericCreate+0x4c>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <xQueueGenericCreate+0x4e>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <xQueueGenericCreate+0x68>
        __asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	617b      	str	r3, [r7, #20]
    }
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004aae:	d90a      	bls.n	8004ac6 <xQueueGenericCreate+0x86>
        __asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	613b      	str	r3, [r7, #16]
    }
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	3350      	adds	r3, #80	; 0x50
 8004aca:	4618      	mov	r0, r3
 8004acc:	f002 f8d6 	bl	8006c7c <pvPortMalloc>
 8004ad0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00d      	beq.n	8004af4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3350      	adds	r3, #80	; 0x50
 8004ae0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ae2:	79fa      	ldrb	r2, [r7, #7]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f805 	bl	8004afe <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004af4:	6a3b      	ldr	r3, [r7, #32]
    }
 8004af6:	4618      	mov	r0, r3
 8004af8:	3728      	adds	r7, #40	; 0x28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e002      	b.n	8004b20 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	69b8      	ldr	r0, [r7, #24]
 8004b30:	f7ff ff1e 	bl	8004970 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	68f9      	ldr	r1, [r7, #12]
 8004b42:	2073      	movs	r0, #115	; 0x73
 8004b44:	f003 f8ba 	bl	8007cbc <SEGGER_SYSVIEW_RecordU32x3>
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b090      	sub	sp, #64	; 0x40
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xQueueGenericSend+0x32>
        __asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d103      	bne.n	8004b90 <xQueueGenericSend+0x40>
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <xQueueGenericSend+0x44>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <xQueueGenericSend+0x46>
 8004b94:	2300      	movs	r3, #0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <xQueueGenericSend+0x60>
        __asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d103      	bne.n	8004bbe <xQueueGenericSend+0x6e>
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <xQueueGenericSend+0x72>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <xQueueGenericSend+0x74>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xQueueGenericSend+0x8e>
        __asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	623b      	str	r3, [r7, #32]
    }
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bde:	f001 f9cf 	bl	8005f80 <xTaskGetSchedulerState>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <xQueueGenericSend+0x9e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <xQueueGenericSend+0xa2>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <xQueueGenericSend+0xa4>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <xQueueGenericSend+0xbe>
        __asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	61fb      	str	r3, [r7, #28]
    }
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004c0e:	f001 ff0b 	bl	8006a28 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <xQueueGenericSend+0xd4>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d136      	bne.n	8004c92 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	4618      	mov	r0, r3
 8004c28:	f003 fdd4 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	460b      	mov	r3, r1
 8004c36:	4601      	mov	r1, r0
 8004c38:	205a      	movs	r0, #90	; 0x5a
 8004c3a:	f003 f8b5 	bl	8007da8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c44:	f000 fa78 	bl	8005138 <prvCopyDataToQueue>
 8004c48:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d010      	beq.n	8004c74 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	3324      	adds	r3, #36	; 0x24
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fff2 	bl	8005c40 <xTaskRemoveFromEventList>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d013      	beq.n	8004c8a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004c62:	4b4d      	ldr	r3, [pc, #308]	; (8004d98 <xQueueGenericSend+0x248>)
 8004c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	e00a      	b.n	8004c8a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <xQueueGenericSend+0x248>)
 8004c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004c8a:	f001 fefd 	bl	8006a88 <vPortExitCritical>
                return pdPASS;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e07d      	b.n	8004d8e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d110      	bne.n	8004cba <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004c98:	f001 fef6 	bl	8006a88 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 fd98 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	460b      	mov	r3, r1
 8004cae:	4601      	mov	r1, r0
 8004cb0:	205a      	movs	r0, #90	; 0x5a
 8004cb2:	f003 f879 	bl	8007da8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e069      	b.n	8004d8e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004cc0:	f107 0314 	add.w	r3, r7, #20
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 f821 	bl	8005d0c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004cce:	f001 fedb 	bl	8006a88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004cd2:	f000 fd6d 	bl	80057b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004cd6:	f001 fea7 	bl	8006a28 <vPortEnterCritical>
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ce0:	b25b      	sxtb	r3, r3
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d103      	bne.n	8004cf0 <xQueueGenericSend+0x1a0>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf6:	b25b      	sxtb	r3, r3
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfc:	d103      	bne.n	8004d06 <xQueueGenericSend+0x1b6>
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d06:	f001 febf 	bl	8006a88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d0a:	1d3a      	adds	r2, r7, #4
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f001 f810 	bl	8005d38 <xTaskCheckForTimeOut>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d124      	bne.n	8004d68 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d20:	f000 fb02 	bl	8005328 <prvIsQueueFull>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d018      	beq.n	8004d5c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	3310      	adds	r3, #16
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 ff32 	bl	8005b9c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d3a:	f000 fa8d 	bl	8005258 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004d3e:	f000 fd45 	bl	80057cc <xTaskResumeAll>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f47f af62 	bne.w	8004c0e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <xQueueGenericSend+0x248>)
 8004d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	e758      	b.n	8004c0e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d5e:	f000 fa7b 	bl	8005258 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004d62:	f000 fd33 	bl	80057cc <xTaskResumeAll>
 8004d66:	e752      	b.n	8004c0e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d6a:	f000 fa75 	bl	8005258 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004d6e:	f000 fd2d 	bl	80057cc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	4618      	mov	r0, r3
 8004d76:	f003 fd2d 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	460b      	mov	r3, r1
 8004d84:	4601      	mov	r1, r0
 8004d86:	205a      	movs	r0, #90	; 0x5a
 8004d88:	f003 f80e 	bl	8007da8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8004d8c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3738      	adds	r7, #56	; 0x38
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b090      	sub	sp, #64	; 0x40
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004dc6:	bf00      	nop
 8004dc8:	e7fe      	b.n	8004dc8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d103      	bne.n	8004dd8 <xQueueGenericSendFromISR+0x3c>
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <xQueueGenericSendFromISR+0x40>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <xQueueGenericSendFromISR+0x42>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d103      	bne.n	8004e06 <xQueueGenericSendFromISR+0x6a>
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <xQueueGenericSendFromISR+0x6e>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <xQueueGenericSendFromISR+0x70>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	623b      	str	r3, [r7, #32]
    }
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e26:	f001 fee9 	bl	8006bfc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	61fa      	str	r2, [r7, #28]
 8004e40:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004e42:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <xQueueGenericSendFromISR+0xbc>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d148      	bne.n	8004eea <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f003 fcb2 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8004e70:	4601      	mov	r1, r0
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	461a      	mov	r2, r3
 8004e76:	2060      	movs	r0, #96	; 0x60
 8004e78:	f002 fec6 	bl	8007c08 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e82:	f000 f959 	bl	8005138 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004e86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d112      	bne.n	8004eb6 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d025      	beq.n	8004ee4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	3324      	adds	r3, #36	; 0x24
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fecf 	bl	8005c40 <xTaskRemoveFromEventList>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01d      	beq.n	8004ee4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01a      	beq.n	8004ee4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e016      	b.n	8004ee4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004eb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004eba:	2b7f      	cmp	r3, #127	; 0x7f
 8004ebc:	d10a      	bne.n	8004ed4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	617b      	str	r3, [r7, #20]
    }
 8004ed0:	bf00      	nop
 8004ed2:	e7fe      	b.n	8004ed2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ed8:	3301      	adds	r3, #1
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	b25a      	sxtb	r2, r3
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004ee8:	e00b      	b.n	8004f02 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	4618      	mov	r0, r3
 8004eee:	f003 fc71 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2060      	movs	r0, #96	; 0x60
 8004efa:	f002 fe85 	bl	8007c08 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f04:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004f0c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3740      	adds	r7, #64	; 0x40
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b08f      	sub	sp, #60	; 0x3c
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <xQueueReceive+0x30>
        __asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	623b      	str	r3, [r7, #32]
    }
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <xQueueReceive+0x3e>
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <xQueueReceive+0x42>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <xQueueReceive+0x44>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xQueueReceive+0x5e>
        __asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	61fb      	str	r3, [r7, #28]
    }
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f76:	f001 f803 	bl	8005f80 <xTaskGetSchedulerState>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <xQueueReceive+0x6e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <xQueueReceive+0x72>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <xQueueReceive+0x74>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <xQueueReceive+0x8e>
        __asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	61bb      	str	r3, [r7, #24]
    }
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004fa6:	f001 fd3f 	bl	8006a28 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d02f      	beq.n	8005016 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fba:	f000 f927 	bl	800520c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f003 fc07 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f003 fc03 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	9100      	str	r1, [sp, #0]
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	205c      	movs	r0, #92	; 0x5c
 8004fda:	f002 fee5 	bl	8007da8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	1e5a      	subs	r2, r3, #1
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00f      	beq.n	800500e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	3310      	adds	r3, #16
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fe24 	bl	8005c40 <xTaskRemoveFromEventList>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004ffe:	4b4d      	ldr	r3, [pc, #308]	; (8005134 <xQueueReceive+0x21c>)
 8005000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800500e:	f001 fd3b 	bl	8006a88 <vPortExitCritical>
                return pdPASS;
 8005012:	2301      	movs	r3, #1
 8005014:	e08a      	b.n	800512c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d113      	bne.n	8005044 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800501c:	f001 fd34 	bl	8006a88 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	4618      	mov	r0, r3
 8005024:	f003 fbd6 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8005028:	4604      	mov	r4, r0
 800502a:	2000      	movs	r0, #0
 800502c:	f003 fbd2 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8005030:	4602      	mov	r2, r0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2101      	movs	r1, #1
 8005036:	9100      	str	r1, [sp, #0]
 8005038:	4621      	mov	r1, r4
 800503a:	205c      	movs	r0, #92	; 0x5c
 800503c:	f002 feb4 	bl	8007da8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005040:	2300      	movs	r3, #0
 8005042:	e073      	b.n	800512c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800504a:	f107 0310 	add.w	r3, r7, #16
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fe5c 	bl	8005d0c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005058:	f001 fd16 	bl	8006a88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800505c:	f000 fba8 	bl	80057b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005060:	f001 fce2 	bl	8006a28 <vPortEnterCritical>
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800506a:	b25b      	sxtb	r3, r3
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d103      	bne.n	800507a <xQueueReceive+0x162>
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005080:	b25b      	sxtb	r3, r3
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d103      	bne.n	8005090 <xQueueReceive+0x178>
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005090:	f001 fcfa 	bl	8006a88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005094:	1d3a      	adds	r2, r7, #4
 8005096:	f107 0310 	add.w	r3, r7, #16
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fe4b 	bl	8005d38 <xTaskCheckForTimeOut>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d124      	bne.n	80050f2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050aa:	f000 f927 	bl	80052fc <prvIsQueueEmpty>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d018      	beq.n	80050e6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	3324      	adds	r3, #36	; 0x24
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fd6d 	bl	8005b9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80050c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c4:	f000 f8c8 	bl	8005258 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80050c8:	f000 fb80 	bl	80057cc <xTaskResumeAll>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f47f af69 	bne.w	8004fa6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80050d4:	4b17      	ldr	r3, [pc, #92]	; (8005134 <xQueueReceive+0x21c>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	e75f      	b.n	8004fa6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80050e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e8:	f000 f8b6 	bl	8005258 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80050ec:	f000 fb6e 	bl	80057cc <xTaskResumeAll>
 80050f0:	e759      	b.n	8004fa6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80050f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f4:	f000 f8b0 	bl	8005258 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80050f8:	f000 fb68 	bl	80057cc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050fe:	f000 f8fd 	bl	80052fc <prvIsQueueEmpty>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	f43f af4e 	beq.w	8004fa6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510c:	4618      	mov	r0, r3
 800510e:	f003 fb61 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8005112:	4604      	mov	r4, r0
 8005114:	2000      	movs	r0, #0
 8005116:	f003 fb5d 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 800511a:	4602      	mov	r2, r0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2101      	movs	r1, #1
 8005120:	9100      	str	r1, [sp, #0]
 8005122:	4621      	mov	r1, r4
 8005124:	205c      	movs	r0, #92	; 0x5c
 8005126:	f002 fe3f 	bl	8007da8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800512a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800512c:	4618      	mov	r0, r3
 800512e:	3734      	adds	r7, #52	; 0x34
 8005130:	46bd      	mov	sp, r7
 8005132:	bd90      	pop	{r4, r7, pc}
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d14d      	bne.n	80051fa <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 ff2a 	bl	8005fbc <xTaskPriorityDisinherit>
 8005168:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	e043      	b.n	80051fa <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d119      	bne.n	80051ac <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6858      	ldr	r0, [r3, #4]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	461a      	mov	r2, r3
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	f003 fdf0 	bl	8008d68 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	441a      	add	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d32b      	bcc.n	80051fa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	e026      	b.n	80051fa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	68d8      	ldr	r0, [r3, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	461a      	mov	r2, r3
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	f003 fdd6 	bl	8008d68 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	425b      	negs	r3, r3
 80051c6:	441a      	add	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d207      	bcs.n	80051e8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	425b      	negs	r3, r3
 80051e2:	441a      	add	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d105      	bne.n	80051fa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005202:	697b      	ldr	r3, [r7, #20]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d018      	beq.n	8005250 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	441a      	add	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	429a      	cmp	r2, r3
 8005236:	d303      	bcc.n	8005240 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68d9      	ldr	r1, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	461a      	mov	r2, r3
 800524a:	6838      	ldr	r0, [r7, #0]
 800524c:	f003 fd8c 	bl	8008d68 <memcpy>
    }
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005260:	f001 fbe2 	bl	8006a28 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800526a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800526c:	e011      	b.n	8005292 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	d012      	beq.n	800529c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3324      	adds	r3, #36	; 0x24
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fce0 	bl	8005c40 <xTaskRemoveFromEventList>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005286:	f000 fdbd 	bl	8005e04 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	3b01      	subs	r3, #1
 800528e:	b2db      	uxtb	r3, r3
 8005290:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005296:	2b00      	cmp	r3, #0
 8005298:	dce9      	bgt.n	800526e <prvUnlockQueue+0x16>
 800529a:	e000      	b.n	800529e <prvUnlockQueue+0x46>
                        break;
 800529c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	22ff      	movs	r2, #255	; 0xff
 80052a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80052a6:	f001 fbef 	bl	8006a88 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80052aa:	f001 fbbd 	bl	8006a28 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052b4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052b6:	e011      	b.n	80052dc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d012      	beq.n	80052e6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3310      	adds	r3, #16
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fcbb 	bl	8005c40 <xTaskRemoveFromEventList>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80052d0:	f000 fd98 	bl	8005e04 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80052d4:	7bbb      	ldrb	r3, [r7, #14]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	dce9      	bgt.n	80052b8 <prvUnlockQueue+0x60>
 80052e4:	e000      	b.n	80052e8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80052e6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	22ff      	movs	r2, #255	; 0xff
 80052ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80052f0:	f001 fbca 	bl	8006a88 <vPortExitCritical>
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005304:	f001 fb90 	bl	8006a28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d102      	bne.n	8005316 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005310:	2301      	movs	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e001      	b.n	800531a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800531a:	f001 fbb5 	bl	8006a88 <vPortExitCritical>

    return xReturn;
 800531e:	68fb      	ldr	r3, [r7, #12]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005330:	f001 fb7a 	bl	8006a28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533c:	429a      	cmp	r2, r3
 800533e:	d102      	bne.n	8005346 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005340:	2301      	movs	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e001      	b.n	800534a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800534a:	f001 fb9d 	bl	8006a88 <vPortExitCritical>

    return xReturn;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e01e      	b.n	80053a6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005368:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <vQueueAddToRegistry+0x60>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d115      	bne.n	80053a0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005374:	4910      	ldr	r1, [pc, #64]	; (80053b8 <vQueueAddToRegistry+0x60>)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800537e:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <vQueueAddToRegistry+0x60>)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	4413      	add	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	f003 fa21 	bl	80087d4 <SEGGER_SYSVIEW_ShrinkId>
 8005392:	4601      	mov	r1, r0
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	2071      	movs	r0, #113	; 0x71
 800539a:	f002 fc35 	bl	8007c08 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800539e:	e006      	b.n	80053ae <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b07      	cmp	r3, #7
 80053aa:	d9dd      	bls.n	8005368 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000188 	.word	0x20000188

080053bc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80053cc:	f001 fb2c 	bl	8006a28 <vPortEnterCritical>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053d6:	b25b      	sxtb	r3, r3
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d103      	bne.n	80053e6 <vQueueWaitForMessageRestricted+0x2a>
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053ec:	b25b      	sxtb	r3, r3
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d103      	bne.n	80053fc <vQueueWaitForMessageRestricted+0x40>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053fc:	f001 fb44 	bl	8006a88 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	3324      	adds	r3, #36	; 0x24
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fbe7 	bl	8005be4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005416:	6978      	ldr	r0, [r7, #20]
 8005418:	f7ff ff1e 	bl	8005258 <prvUnlockQueue>
    }
 800541c:	bf00      	nop
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005424:	b580      	push	{r7, lr}
 8005426:	b08c      	sub	sp, #48	; 0x30
 8005428:	af04      	add	r7, sp, #16
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	4613      	mov	r3, r2
 8005432:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4618      	mov	r0, r3
 800543a:	f001 fc1f 	bl	8006c7c <pvPortMalloc>
 800543e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00e      	beq.n	8005464 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005446:	2058      	movs	r0, #88	; 0x58
 8005448:	f001 fc18 	bl	8006c7c <pvPortMalloc>
 800544c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
 800545a:	e005      	b.n	8005468 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800545c:	6978      	ldr	r0, [r7, #20]
 800545e:	f001 fced 	bl	8006e3c <vPortFree>
 8005462:	e001      	b.n	8005468 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d013      	beq.n	8005496 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	2300      	movs	r3, #0
 8005472:	9303      	str	r3, [sp, #12]
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	9302      	str	r3, [sp, #8]
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f80e 	bl	80054a6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800548a:	69f8      	ldr	r0, [r7, #28]
 800548c:	f000 f8a2 	bl	80055d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005490:	2301      	movs	r3, #1
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e002      	b.n	800549c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005496:	f04f 33ff 	mov.w	r3, #4294967295
 800549a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800549c:	69bb      	ldr	r3, [r7, #24]
    }
 800549e:	4618      	mov	r0, r3
 80054a0:	3720      	adds	r7, #32
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b088      	sub	sp, #32
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	461a      	mov	r2, r3
 80054be:	21a5      	movs	r1, #165	; 0xa5
 80054c0:	f003 fc60 	bl	8008d84 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054ce:	3b01      	subs	r3, #1
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f023 0307 	bic.w	r3, r3, #7
 80054dc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <prvInitialiseNewTask+0x58>
        __asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	617b      	str	r3, [r7, #20]
    }
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01f      	beq.n	8005544 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	e012      	b.n	8005530 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	4413      	add	r3, r2
 8005510:	7819      	ldrb	r1, [r3, #0]
 8005512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	3334      	adds	r3, #52	; 0x34
 800551a:	460a      	mov	r2, r1
 800551c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	3301      	adds	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b09      	cmp	r3, #9
 8005534:	d9e9      	bls.n	800550a <prvInitialiseNewTask+0x64>
 8005536:	e000      	b.n	800553a <prvInitialiseNewTask+0x94>
            {
                break;
 8005538:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005542:	e003      	b.n	800554c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	2b04      	cmp	r3, #4
 8005550:	d901      	bls.n	8005556 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005552:	2304      	movs	r3, #4
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005560:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2200      	movs	r2, #0
 8005566:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff f96b 	bl	8004848 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	3318      	adds	r3, #24
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff f966 	bl	8004848 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005580:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	f1c3 0205 	rsb	r2, r3, #5
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005590:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	3350      	adds	r3, #80	; 0x50
 8005596:	2204      	movs	r2, #4
 8005598:	2100      	movs	r1, #0
 800559a:	4618      	mov	r0, r3
 800559c:	f003 fbf2 	bl	8008d84 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	3354      	adds	r3, #84	; 0x54
 80055a4:	2201      	movs	r2, #1
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f003 fbeb 	bl	8008d84 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	68f9      	ldr	r1, [r7, #12]
 80055b2:	69b8      	ldr	r0, [r7, #24]
 80055b4:	f001 f90c 	bl	80067d0 <pxPortInitialiseStack>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055ca:	bf00      	nop
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80055d4:	b5b0      	push	{r4, r5, r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af02      	add	r7, sp, #8
 80055da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80055dc:	f001 fa24 	bl	8006a28 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80055e0:	4b3b      	ldr	r3, [pc, #236]	; (80056d0 <prvAddNewTaskToReadyList+0xfc>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	4a3a      	ldr	r2, [pc, #232]	; (80056d0 <prvAddNewTaskToReadyList+0xfc>)
 80055e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80055ea:	4b3a      	ldr	r3, [pc, #232]	; (80056d4 <prvAddNewTaskToReadyList+0x100>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80055f2:	4a38      	ldr	r2, [pc, #224]	; (80056d4 <prvAddNewTaskToReadyList+0x100>)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f8:	4b35      	ldr	r3, [pc, #212]	; (80056d0 <prvAddNewTaskToReadyList+0xfc>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d110      	bne.n	8005622 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005600:	f000 fc24 	bl	8005e4c <prvInitialiseTaskLists>
 8005604:	e00d      	b.n	8005622 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005606:	4b34      	ldr	r3, [pc, #208]	; (80056d8 <prvAddNewTaskToReadyList+0x104>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800560e:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <prvAddNewTaskToReadyList+0x100>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	429a      	cmp	r2, r3
 800561a:	d802      	bhi.n	8005622 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800561c:	4a2d      	ldr	r2, [pc, #180]	; (80056d4 <prvAddNewTaskToReadyList+0x100>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005622:	4b2e      	ldr	r3, [pc, #184]	; (80056dc <prvAddNewTaskToReadyList+0x108>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	4a2c      	ldr	r2, [pc, #176]	; (80056dc <prvAddNewTaskToReadyList+0x108>)
 800562a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800562c:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <prvAddNewTaskToReadyList+0x108>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d016      	beq.n	8005668 <prvAddNewTaskToReadyList+0x94>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4618      	mov	r0, r3
 800563e:	f002 ffa3 	bl	8008588 <SEGGER_SYSVIEW_OnTaskCreate>
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	461d      	mov	r5, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461c      	mov	r4, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	1ae3      	subs	r3, r4, r3
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	462b      	mov	r3, r5
 8005664:	f003 fac2 	bl	8008bec <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4618      	mov	r0, r3
 800566c:	f003 f810 	bl	8008690 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	2201      	movs	r2, #1
 8005676:	409a      	lsls	r2, r3
 8005678:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <prvAddNewTaskToReadyList+0x10c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4313      	orrs	r3, r2
 800567e:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <prvAddNewTaskToReadyList+0x10c>)
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <prvAddNewTaskToReadyList+0x110>)
 8005690:	441a      	add	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3304      	adds	r3, #4
 8005696:	4619      	mov	r1, r3
 8005698:	4610      	mov	r0, r2
 800569a:	f7ff f8e2 	bl	8004862 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800569e:	f001 f9f3 	bl	8006a88 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <prvAddNewTaskToReadyList+0x104>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00e      	beq.n	80056c8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056aa:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <prvAddNewTaskToReadyList+0x100>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d207      	bcs.n	80056c8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <prvAddNewTaskToReadyList+0x114>)
 80056ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bdb0      	pop	{r4, r5, r7, pc}
 80056d0:	200002a0 	.word	0x200002a0
 80056d4:	200001c8 	.word	0x200001c8
 80056d8:	200002ac 	.word	0x200002ac
 80056dc:	200002bc 	.word	0x200002bc
 80056e0:	200002a8 	.word	0x200002a8
 80056e4:	200001cc 	.word	0x200001cc
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <vTaskStartScheduler+0xa4>)
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	2300      	movs	r3, #0
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	2282      	movs	r2, #130	; 0x82
 80056fe:	4925      	ldr	r1, [pc, #148]	; (8005794 <vTaskStartScheduler+0xa8>)
 8005700:	4825      	ldr	r0, [pc, #148]	; (8005798 <vTaskStartScheduler+0xac>)
 8005702:	f7ff fe8f 	bl	8005424 <xTaskCreate>
 8005706:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d102      	bne.n	8005714 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800570e:	f000 fd4d 	bl	80061ac <xTimerCreateTimerTask>
 8005712:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d124      	bne.n	8005764 <vTaskStartScheduler+0x78>
        __asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	60bb      	str	r3, [r7, #8]
    }
 800572c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800572e:	4b1b      	ldr	r3, [pc, #108]	; (800579c <vTaskStartScheduler+0xb0>)
 8005730:	f04f 32ff 	mov.w	r2, #4294967295
 8005734:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005736:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <vTaskStartScheduler+0xb4>)
 8005738:	2201      	movs	r2, #1
 800573a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800573c:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <vTaskStartScheduler+0xb8>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005742:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <vTaskStartScheduler+0xbc>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b12      	ldr	r3, [pc, #72]	; (8005790 <vTaskStartScheduler+0xa4>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d102      	bne.n	8005754 <vTaskStartScheduler+0x68>
 800574e:	f002 feff 	bl	8008550 <SEGGER_SYSVIEW_OnIdle>
 8005752:	e004      	b.n	800575e <vTaskStartScheduler+0x72>
 8005754:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <vTaskStartScheduler+0xbc>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f002 ff57 	bl	800860c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800575e:	f001 f8c1 	bl	80068e4 <xPortStartScheduler>
 8005762:	e00e      	b.n	8005782 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d10a      	bne.n	8005782 <vTaskStartScheduler+0x96>
        __asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	607b      	str	r3, [r7, #4]
    }
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005782:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <vTaskStartScheduler+0xc0>)
 8005784:	681b      	ldr	r3, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200002c4 	.word	0x200002c4
 8005794:	08008fc8 	.word	0x08008fc8
 8005798:	08005e1d 	.word	0x08005e1d
 800579c:	200002c0 	.word	0x200002c0
 80057a0:	200002ac 	.word	0x200002ac
 80057a4:	200002a4 	.word	0x200002a4
 80057a8:	200001c8 	.word	0x200001c8
 80057ac:	20000010 	.word	0x20000010

080057b0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <vTaskSuspendAll+0x18>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	4a03      	ldr	r2, [pc, #12]	; (80057c8 <vTaskSuspendAll+0x18>)
 80057bc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80057be:	bf00      	nop
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	200002c8 	.word	0x200002c8

080057cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80057da:	4b43      	ldr	r3, [pc, #268]	; (80058e8 <xTaskResumeAll+0x11c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <xTaskResumeAll+0x2c>
        __asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	603b      	str	r3, [r7, #0]
    }
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80057f8:	f001 f916 	bl	8006a28 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80057fc:	4b3a      	ldr	r3, [pc, #232]	; (80058e8 <xTaskResumeAll+0x11c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3b01      	subs	r3, #1
 8005802:	4a39      	ldr	r2, [pc, #228]	; (80058e8 <xTaskResumeAll+0x11c>)
 8005804:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005806:	4b38      	ldr	r3, [pc, #224]	; (80058e8 <xTaskResumeAll+0x11c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d165      	bne.n	80058da <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800580e:	4b37      	ldr	r3, [pc, #220]	; (80058ec <xTaskResumeAll+0x120>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d061      	beq.n	80058da <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005816:	e032      	b.n	800587e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005818:	4b35      	ldr	r3, [pc, #212]	; (80058f0 <xTaskResumeAll+0x124>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3318      	adds	r3, #24
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff f879 	bl	800491c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3304      	adds	r3, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff f874 	bl	800491c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4618      	mov	r0, r3
 8005838:	f002 ff2a 	bl	8008690 <SEGGER_SYSVIEW_OnTaskStartReady>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	2201      	movs	r2, #1
 8005842:	409a      	lsls	r2, r3
 8005844:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <xTaskResumeAll+0x128>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4313      	orrs	r3, r2
 800584a:	4a2a      	ldr	r2, [pc, #168]	; (80058f4 <xTaskResumeAll+0x128>)
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4a27      	ldr	r2, [pc, #156]	; (80058f8 <xTaskResumeAll+0x12c>)
 800585c:	441a      	add	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f7fe fffc 	bl	8004862 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	4b23      	ldr	r3, [pc, #140]	; (80058fc <xTaskResumeAll+0x130>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d302      	bcc.n	800587e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8005878:	4b21      	ldr	r3, [pc, #132]	; (8005900 <xTaskResumeAll+0x134>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800587e:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <xTaskResumeAll+0x124>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1c8      	bne.n	8005818 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800588c:	f000 fb5c 	bl	8005f48 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005890:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <xTaskResumeAll+0x138>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d010      	beq.n	80058be <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800589c:	f000 f858 	bl	8005950 <xTaskIncrementTick>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80058a6:	4b16      	ldr	r3, [pc, #88]	; (8005900 <xTaskResumeAll+0x134>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f1      	bne.n	800589c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80058b8:	4b12      	ldr	r3, [pc, #72]	; (8005904 <xTaskResumeAll+0x138>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80058be:	4b10      	ldr	r3, [pc, #64]	; (8005900 <xTaskResumeAll+0x134>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80058ca:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <xTaskResumeAll+0x13c>)
 80058cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80058da:	f001 f8d5 	bl	8006a88 <vPortExitCritical>

    return xAlreadyYielded;
 80058de:	68bb      	ldr	r3, [r7, #8]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	200002c8 	.word	0x200002c8
 80058ec:	200002a0 	.word	0x200002a0
 80058f0:	20000260 	.word	0x20000260
 80058f4:	200002a8 	.word	0x200002a8
 80058f8:	200001cc 	.word	0x200001cc
 80058fc:	200001c8 	.word	0x200001c8
 8005900:	200002b4 	.word	0x200002b4
 8005904:	200002b0 	.word	0x200002b0
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005912:	4b05      	ldr	r3, [pc, #20]	; (8005928 <xTaskGetTickCount+0x1c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005918:	687b      	ldr	r3, [r7, #4]
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	200002a4 	.word	0x200002a4

0800592c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005932:	f001 f963 	bl	8006bfc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005936:	2300      	movs	r3, #0
 8005938:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <xTaskGetTickCountFromISR+0x20>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005940:	683b      	ldr	r3, [r7, #0]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200002a4 	.word	0x200002a4

08005950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800595a:	4b50      	ldr	r3, [pc, #320]	; (8005a9c <xTaskIncrementTick+0x14c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f040 8092 	bne.w	8005a88 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005964:	4b4e      	ldr	r3, [pc, #312]	; (8005aa0 <xTaskIncrementTick+0x150>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800596c:	4a4c      	ldr	r2, [pc, #304]	; (8005aa0 <xTaskIncrementTick+0x150>)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d120      	bne.n	80059ba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005978:	4b4a      	ldr	r3, [pc, #296]	; (8005aa4 <xTaskIncrementTick+0x154>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <xTaskIncrementTick+0x48>
        __asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	603b      	str	r3, [r7, #0]
    }
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xTaskIncrementTick+0x46>
 8005998:	4b42      	ldr	r3, [pc, #264]	; (8005aa4 <xTaskIncrementTick+0x154>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	4b42      	ldr	r3, [pc, #264]	; (8005aa8 <xTaskIncrementTick+0x158>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a40      	ldr	r2, [pc, #256]	; (8005aa4 <xTaskIncrementTick+0x154>)
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4a40      	ldr	r2, [pc, #256]	; (8005aa8 <xTaskIncrementTick+0x158>)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4b3f      	ldr	r3, [pc, #252]	; (8005aac <xTaskIncrementTick+0x15c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	4a3e      	ldr	r2, [pc, #248]	; (8005aac <xTaskIncrementTick+0x15c>)
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	f000 fac7 	bl	8005f48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80059ba:	4b3d      	ldr	r3, [pc, #244]	; (8005ab0 <xTaskIncrementTick+0x160>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d34c      	bcc.n	8005a5e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c4:	4b37      	ldr	r3, [pc, #220]	; (8005aa4 <xTaskIncrementTick+0x154>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ce:	4b38      	ldr	r3, [pc, #224]	; (8005ab0 <xTaskIncrementTick+0x160>)
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	601a      	str	r2, [r3, #0]
                    break;
 80059d6:	e042      	b.n	8005a5e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d8:	4b32      	ldr	r3, [pc, #200]	; (8005aa4 <xTaskIncrementTick+0x154>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d203      	bcs.n	80059f8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80059f0:	4a2f      	ldr	r2, [pc, #188]	; (8005ab0 <xTaskIncrementTick+0x160>)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059f6:	e032      	b.n	8005a5e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fe ff8d 	bl	800491c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d004      	beq.n	8005a14 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe ff84 	bl	800491c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f002 fe3a 	bl	8008690 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	2201      	movs	r2, #1
 8005a22:	409a      	lsls	r2, r3
 8005a24:	4b23      	ldr	r3, [pc, #140]	; (8005ab4 <xTaskIncrementTick+0x164>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	4a22      	ldr	r2, [pc, #136]	; (8005ab4 <xTaskIncrementTick+0x164>)
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <xTaskIncrementTick+0x168>)
 8005a3c:	441a      	add	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f7fe ff0c 	bl	8004862 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <xTaskIncrementTick+0x16c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d3b5      	bcc.n	80059c4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a5c:	e7b2      	b.n	80059c4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a5e:	4b17      	ldr	r3, [pc, #92]	; (8005abc <xTaskIncrementTick+0x16c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4914      	ldr	r1, [pc, #80]	; (8005ab8 <xTaskIncrementTick+0x168>)
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d901      	bls.n	8005a7a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8005a76:	2301      	movs	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <xTaskIncrementTick+0x170>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e004      	b.n	8005a92 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <xTaskIncrementTick+0x174>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4a0d      	ldr	r2, [pc, #52]	; (8005ac4 <xTaskIncrementTick+0x174>)
 8005a90:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005a92:	697b      	ldr	r3, [r7, #20]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	200002c8 	.word	0x200002c8
 8005aa0:	200002a4 	.word	0x200002a4
 8005aa4:	20000258 	.word	0x20000258
 8005aa8:	2000025c 	.word	0x2000025c
 8005aac:	200002b8 	.word	0x200002b8
 8005ab0:	200002c0 	.word	0x200002c0
 8005ab4:	200002a8 	.word	0x200002a8
 8005ab8:	200001cc 	.word	0x200001cc
 8005abc:	200001c8 	.word	0x200001c8
 8005ac0:	200002b4 	.word	0x200002b4
 8005ac4:	200002b0 	.word	0x200002b0

08005ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ace:	4b2d      	ldr	r3, [pc, #180]	; (8005b84 <vTaskSwitchContext+0xbc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005ad6:	4b2c      	ldr	r3, [pc, #176]	; (8005b88 <vTaskSwitchContext+0xc0>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005adc:	e04d      	b.n	8005b7a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005ade:	4b2a      	ldr	r3, [pc, #168]	; (8005b88 <vTaskSwitchContext+0xc0>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae4:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <vTaskSwitchContext+0xc4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	fab3 f383 	clz	r3, r3
 8005af0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005af2:	7afb      	ldrb	r3, [r7, #11]
 8005af4:	f1c3 031f 	rsb	r3, r3, #31
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	4925      	ldr	r1, [pc, #148]	; (8005b90 <vTaskSwitchContext+0xc8>)
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	607b      	str	r3, [r7, #4]
    }
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <vTaskSwitchContext+0x5a>
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <vTaskSwitchContext+0xc8>)
 8005b30:	4413      	add	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	3308      	adds	r3, #8
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d104      	bne.n	8005b54 <vTaskSwitchContext+0x8c>
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	605a      	str	r2, [r3, #4]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	4a0e      	ldr	r2, [pc, #56]	; (8005b94 <vTaskSwitchContext+0xcc>)
 8005b5c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <vTaskSwitchContext+0xcc>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <vTaskSwitchContext+0xd0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d102      	bne.n	8005b70 <vTaskSwitchContext+0xa8>
 8005b6a:	f002 fcf1 	bl	8008550 <SEGGER_SYSVIEW_OnIdle>
}
 8005b6e:	e004      	b.n	8005b7a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8005b70:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <vTaskSwitchContext+0xcc>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f002 fd49 	bl	800860c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005b7a:	bf00      	nop
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	200002c8 	.word	0x200002c8
 8005b88:	200002b4 	.word	0x200002b4
 8005b8c:	200002a8 	.word	0x200002a8
 8005b90:	200001cc 	.word	0x200001cc
 8005b94:	200001c8 	.word	0x200001c8
 8005b98:	200002c4 	.word	0x200002c4

08005b9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	60fb      	str	r3, [r7, #12]
    }
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bc2:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <vTaskPlaceOnEventList+0x44>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3318      	adds	r3, #24
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fe fe6d 	bl	80048aa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	6838      	ldr	r0, [r7, #0]
 8005bd4:	f000 fa72 	bl	80060bc <prvAddCurrentTaskToDelayedList>
}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	200001c8 	.word	0x200001c8

08005be4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	617b      	str	r3, [r7, #20]
    }
 8005c08:	bf00      	nop
 8005c0a:	e7fe      	b.n	8005c0a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <vTaskPlaceOnEventListRestricted+0x58>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3318      	adds	r3, #24
 8005c12:	4619      	mov	r1, r3
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7fe fe24 	bl	8004862 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005c20:	f04f 33ff 	mov.w	r3, #4294967295
 8005c24:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005c26:	2024      	movs	r0, #36	; 0x24
 8005c28:	f001 ff94 	bl	8007b54 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	68b8      	ldr	r0, [r7, #8]
 8005c30:	f000 fa44 	bl	80060bc <prvAddCurrentTaskToDelayedList>
    }
 8005c34:	bf00      	nop
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	200001c8 	.word	0x200001c8

08005c40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60fb      	str	r3, [r7, #12]
    }
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3318      	adds	r3, #24
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fe fe53 	bl	800491c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c76:	4b1f      	ldr	r3, [pc, #124]	; (8005cf4 <xTaskRemoveFromEventList+0xb4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d120      	bne.n	8005cc0 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	3304      	adds	r3, #4
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe fe4a 	bl	800491c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f002 fd00 	bl	8008690 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	2201      	movs	r2, #1
 8005c96:	409a      	lsls	r2, r3
 8005c98:	4b17      	ldr	r3, [pc, #92]	; (8005cf8 <xTaskRemoveFromEventList+0xb8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <xTaskRemoveFromEventList+0xb8>)
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4a13      	ldr	r2, [pc, #76]	; (8005cfc <xTaskRemoveFromEventList+0xbc>)
 8005cb0:	441a      	add	r2, r3
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f7fe fdd2 	bl	8004862 <vListInsertEnd>
 8005cbe:	e005      	b.n	8005ccc <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	480e      	ldr	r0, [pc, #56]	; (8005d00 <xTaskRemoveFromEventList+0xc0>)
 8005cc8:	f7fe fdcb 	bl	8004862 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <xTaskRemoveFromEventList+0xc4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d905      	bls.n	8005ce6 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <xTaskRemoveFromEventList+0xc8>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	e001      	b.n	8005cea <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005cea:	697b      	ldr	r3, [r7, #20]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	200002c8 	.word	0x200002c8
 8005cf8:	200002a8 	.word	0x200002a8
 8005cfc:	200001cc 	.word	0x200001cc
 8005d00:	20000260 	.word	0x20000260
 8005d04:	200001c8 	.word	0x200001c8
 8005d08:	200002b4 	.word	0x200002b4

08005d0c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d14:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <vTaskInternalSetTimeOutState+0x24>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <vTaskInternalSetTimeOutState+0x28>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	605a      	str	r2, [r3, #4]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	200002b8 	.word	0x200002b8
 8005d34:	200002a4 	.word	0x200002a4

08005d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	613b      	str	r3, [r7, #16]
    }
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	60fb      	str	r3, [r7, #12]
    }
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005d7a:	f000 fe55 	bl	8006a28 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005d7e:	4b1f      	ldr	r3, [pc, #124]	; (8005dfc <xTaskCheckForTimeOut+0xc4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	d102      	bne.n	8005d9e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	e026      	b.n	8005dec <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <xTaskCheckForTimeOut+0xc8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d00a      	beq.n	8005dc0 <xTaskCheckForTimeOut+0x88>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d305      	bcc.n	8005dc0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	e015      	b.n	8005dec <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d20b      	bcs.n	8005de2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	1ad2      	subs	r2, r2, r3
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff ff98 	bl	8005d0c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e004      	b.n	8005dec <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005de8:	2301      	movs	r3, #1
 8005dea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005dec:	f000 fe4c 	bl	8006a88 <vPortExitCritical>

    return xReturn;
 8005df0:	69fb      	ldr	r3, [r7, #28]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3720      	adds	r7, #32
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200002a4 	.word	0x200002a4
 8005e00:	200002b8 	.word	0x200002b8

08005e04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005e08:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <vTaskMissedYield+0x14>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	200002b4 	.word	0x200002b4

08005e1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005e24:	f000 f852 	bl	8005ecc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <prvIdleTask+0x28>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d9f9      	bls.n	8005e24 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005e30:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <prvIdleTask+0x2c>)
 8005e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005e40:	e7f0      	b.n	8005e24 <prvIdleTask+0x8>
 8005e42:	bf00      	nop
 8005e44:	200001cc 	.word	0x200001cc
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e52:	2300      	movs	r3, #0
 8005e54:	607b      	str	r3, [r7, #4]
 8005e56:	e00c      	b.n	8005e72 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4a12      	ldr	r2, [pc, #72]	; (8005eac <prvInitialiseTaskLists+0x60>)
 8005e64:	4413      	add	r3, r2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe fcce 	bl	8004808 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	607b      	str	r3, [r7, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d9ef      	bls.n	8005e58 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005e78:	480d      	ldr	r0, [pc, #52]	; (8005eb0 <prvInitialiseTaskLists+0x64>)
 8005e7a:	f7fe fcc5 	bl	8004808 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005e7e:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <prvInitialiseTaskLists+0x68>)
 8005e80:	f7fe fcc2 	bl	8004808 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005e84:	480c      	ldr	r0, [pc, #48]	; (8005eb8 <prvInitialiseTaskLists+0x6c>)
 8005e86:	f7fe fcbf 	bl	8004808 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005e8a:	480c      	ldr	r0, [pc, #48]	; (8005ebc <prvInitialiseTaskLists+0x70>)
 8005e8c:	f7fe fcbc 	bl	8004808 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005e90:	480b      	ldr	r0, [pc, #44]	; (8005ec0 <prvInitialiseTaskLists+0x74>)
 8005e92:	f7fe fcb9 	bl	8004808 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005e96:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <prvInitialiseTaskLists+0x78>)
 8005e98:	4a05      	ldr	r2, [pc, #20]	; (8005eb0 <prvInitialiseTaskLists+0x64>)
 8005e9a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <prvInitialiseTaskLists+0x7c>)
 8005e9e:	4a05      	ldr	r2, [pc, #20]	; (8005eb4 <prvInitialiseTaskLists+0x68>)
 8005ea0:	601a      	str	r2, [r3, #0]
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	200001cc 	.word	0x200001cc
 8005eb0:	20000230 	.word	0x20000230
 8005eb4:	20000244 	.word	0x20000244
 8005eb8:	20000260 	.word	0x20000260
 8005ebc:	20000274 	.word	0x20000274
 8005ec0:	2000028c 	.word	0x2000028c
 8005ec4:	20000258 	.word	0x20000258
 8005ec8:	2000025c 	.word	0x2000025c

08005ecc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ed2:	e019      	b.n	8005f08 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005ed4:	f000 fda8 	bl	8006a28 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed8:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <prvCheckTasksWaitingTermination+0x50>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe fd19 	bl	800491c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005eea:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <prvCheckTasksWaitingTermination+0x54>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4a0b      	ldr	r2, [pc, #44]	; (8005f20 <prvCheckTasksWaitingTermination+0x54>)
 8005ef2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <prvCheckTasksWaitingTermination+0x58>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <prvCheckTasksWaitingTermination+0x58>)
 8005efc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005efe:	f000 fdc3 	bl	8006a88 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f810 	bl	8005f28 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f08:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <prvCheckTasksWaitingTermination+0x58>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e1      	bne.n	8005ed4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000274 	.word	0x20000274
 8005f20:	200002a0 	.word	0x200002a0
 8005f24:	20000288 	.word	0x20000288

08005f28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 ff81 	bl	8006e3c <vPortFree>
                vPortFree( pxTCB );
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 ff7e 	bl	8006e3c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <prvResetNextTaskUnblockTime+0x30>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d104      	bne.n	8005f60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005f56:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <prvResetNextTaskUnblockTime+0x34>)
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005f5e:	e005      	b.n	8005f6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <prvResetNextTaskUnblockTime+0x30>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a04      	ldr	r2, [pc, #16]	; (8005f7c <prvResetNextTaskUnblockTime+0x34>)
 8005f6a:	6013      	str	r3, [r2, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	20000258 	.word	0x20000258
 8005f7c:	200002c0 	.word	0x200002c0

08005f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <xTaskGetSchedulerState+0x34>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	607b      	str	r3, [r7, #4]
 8005f92:	e008      	b.n	8005fa6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f94:	4b08      	ldr	r3, [pc, #32]	; (8005fb8 <xTaskGetSchedulerState+0x38>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d102      	bne.n	8005fa2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	607b      	str	r3, [r7, #4]
 8005fa0:	e001      	b.n	8005fa6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005fa6:	687b      	ldr	r3, [r7, #4]
    }
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	200002ac 	.word	0x200002ac
 8005fb8:	200002c8 	.word	0x200002c8

08005fbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d068      	beq.n	80060a4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005fd2:	4b37      	ldr	r3, [pc, #220]	; (80060b0 <xTaskPriorityDisinherit+0xf4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d00a      	beq.n	8005ff2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60fb      	str	r3, [r7, #12]
    }
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60bb      	str	r3, [r7, #8]
    }
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006014:	1e5a      	subs	r2, r3, #1
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006022:	429a      	cmp	r2, r3
 8006024:	d03e      	beq.n	80060a4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d13a      	bne.n	80060a4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3304      	adds	r3, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fc72 	bl	800491c <uxListRemove>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	2201      	movs	r2, #1
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	43da      	mvns	r2, r3
 800604a:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <xTaskPriorityDisinherit+0xf8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4013      	ands	r3, r2
 8006050:	4a18      	ldr	r2, [pc, #96]	; (80060b4 <xTaskPriorityDisinherit+0xf8>)
 8006052:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4619      	mov	r1, r3
 8006058:	204a      	movs	r0, #74	; 0x4a
 800605a:	f001 fd99 	bl	8007b90 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	f1c3 0205 	rsb	r2, r3, #5
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	2201      	movs	r2, #1
 8006078:	409a      	lsls	r2, r3
 800607a:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <xTaskPriorityDisinherit+0xf8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4313      	orrs	r3, r2
 8006080:	4a0c      	ldr	r2, [pc, #48]	; (80060b4 <xTaskPriorityDisinherit+0xf8>)
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4a09      	ldr	r2, [pc, #36]	; (80060b8 <xTaskPriorityDisinherit+0xfc>)
 8006092:	441a      	add	r2, r3
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7fe fbe1 	bl	8004862 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80060a4:	697b      	ldr	r3, [r7, #20]
    }
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	200001c8 	.word	0x200001c8
 80060b4:	200002a8 	.word	0x200002a8
 80060b8:	200001cc 	.word	0x200001cc

080060bc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80060c6:	4b32      	ldr	r3, [pc, #200]	; (8006190 <prvAddCurrentTaskToDelayedList+0xd4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060cc:	4b31      	ldr	r3, [pc, #196]	; (8006194 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe fc22 	bl	800491c <uxListRemove>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10b      	bne.n	80060f6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80060de:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	2201      	movs	r2, #1
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43da      	mvns	r2, r3
 80060ec:	4b2a      	ldr	r3, [pc, #168]	; (8006198 <prvAddCurrentTaskToDelayedList+0xdc>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4013      	ands	r3, r2
 80060f2:	4a29      	ldr	r2, [pc, #164]	; (8006198 <prvAddCurrentTaskToDelayedList+0xdc>)
 80060f4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d110      	bne.n	8006120 <prvAddCurrentTaskToDelayedList+0x64>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00d      	beq.n	8006120 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8006104:	4b23      	ldr	r3, [pc, #140]	; (8006194 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	211b      	movs	r1, #27
 800610a:	4618      	mov	r0, r3
 800610c:	f002 fb02 	bl	8008714 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006110:	4b20      	ldr	r3, [pc, #128]	; (8006194 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4820      	ldr	r0, [pc, #128]	; (800619c <prvAddCurrentTaskToDelayedList+0xe0>)
 800611a:	f7fe fba2 	bl	8004862 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800611e:	e032      	b.n	8006186 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4413      	add	r3, r2
 8006126:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006128:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <prvAddCurrentTaskToDelayedList+0xd8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	429a      	cmp	r2, r3
 8006136:	d20f      	bcs.n	8006158 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006138:	4b16      	ldr	r3, [pc, #88]	; (8006194 <prvAddCurrentTaskToDelayedList+0xd8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2104      	movs	r1, #4
 800613e:	4618      	mov	r0, r3
 8006140:	f002 fae8 	bl	8008714 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006144:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4b12      	ldr	r3, [pc, #72]	; (8006194 <prvAddCurrentTaskToDelayedList+0xd8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3304      	adds	r3, #4
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f7fe fbaa 	bl	80048aa <vListInsert>
}
 8006156:	e016      	b.n	8006186 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8006158:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <prvAddCurrentTaskToDelayedList+0xd8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2104      	movs	r1, #4
 800615e:	4618      	mov	r0, r3
 8006160:	f002 fad8 	bl	8008714 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006164:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <prvAddCurrentTaskToDelayedList+0xd8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f7fe fb9a 	bl	80048aa <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xec>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	d202      	bcs.n	8006186 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8006180:	4a09      	ldr	r2, [pc, #36]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xec>)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6013      	str	r3, [r2, #0]
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	200002a4 	.word	0x200002a4
 8006194:	200001c8 	.word	0x200001c8
 8006198:	200002a8 	.word	0x200002a8
 800619c:	2000028c 	.word	0x2000028c
 80061a0:	2000025c 	.word	0x2000025c
 80061a4:	20000258 	.word	0x20000258
 80061a8:	200002c0 	.word	0x200002c0

080061ac <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80061b6:	f000 fad5 	bl	8006764 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <xTimerCreateTimerTask+0x54>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80061c2:	4b10      	ldr	r3, [pc, #64]	; (8006204 <xTimerCreateTimerTask+0x58>)
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	2302      	movs	r3, #2
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	2300      	movs	r3, #0
 80061cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061d0:	490d      	ldr	r1, [pc, #52]	; (8006208 <xTimerCreateTimerTask+0x5c>)
 80061d2:	480e      	ldr	r0, [pc, #56]	; (800620c <xTimerCreateTimerTask+0x60>)
 80061d4:	f7ff f926 	bl	8005424 <xTaskCreate>
 80061d8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	603b      	str	r3, [r7, #0]
    }
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80061f6:	687b      	ldr	r3, [r7, #4]
    }
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	200002fc 	.word	0x200002fc
 8006204:	20000300 	.word	0x20000300
 8006208:	08008fd0 	.word	0x08008fd0
 800620c:	08006345 	.word	0x08006345

08006210 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	; 0x28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800621e:	2300      	movs	r3, #0
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10a      	bne.n	800623e <xTimerGenericCommand+0x2e>
        __asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	623b      	str	r3, [r7, #32]
    }
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800623e:	4b1a      	ldr	r3, [pc, #104]	; (80062a8 <xTimerGenericCommand+0x98>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d02a      	beq.n	800629c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b05      	cmp	r3, #5
 8006256:	dc18      	bgt.n	800628a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006258:	f7ff fe92 	bl	8005f80 <xTaskGetSchedulerState>
 800625c:	4603      	mov	r3, r0
 800625e:	2b02      	cmp	r3, #2
 8006260:	d109      	bne.n	8006276 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006262:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <xTimerGenericCommand+0x98>)
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	f107 0114 	add.w	r1, r7, #20
 800626a:	2300      	movs	r3, #0
 800626c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626e:	f7fe fc6f 	bl	8004b50 <xQueueGenericSend>
 8006272:	6278      	str	r0, [r7, #36]	; 0x24
 8006274:	e012      	b.n	800629c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <xTimerGenericCommand+0x98>)
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	f107 0114 	add.w	r1, r7, #20
 800627e:	2300      	movs	r3, #0
 8006280:	2200      	movs	r2, #0
 8006282:	f7fe fc65 	bl	8004b50 <xQueueGenericSend>
 8006286:	6278      	str	r0, [r7, #36]	; 0x24
 8006288:	e008      	b.n	800629c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <xTimerGenericCommand+0x98>)
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	f107 0114 	add.w	r1, r7, #20
 8006292:	2300      	movs	r3, #0
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	f7fe fd81 	bl	8004d9c <xQueueGenericSendFromISR>
 800629a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800629e:	4618      	mov	r0, r3
 80062a0:	3728      	adds	r7, #40	; 0x28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	200002fc 	.word	0x200002fc

080062ac <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b6:	4b22      	ldr	r3, [pc, #136]	; (8006340 <prvProcessExpiredTimer+0x94>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fe fb29 	bl	800491c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d022      	beq.n	800631e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	18d1      	adds	r1, r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	6978      	ldr	r0, [r7, #20]
 80062e6:	f000 f8d1 	bl	800648c <prvInsertTimerInActiveList>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01f      	beq.n	8006330 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062f0:	2300      	movs	r3, #0
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2300      	movs	r3, #0
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	2100      	movs	r1, #0
 80062fa:	6978      	ldr	r0, [r7, #20]
 80062fc:	f7ff ff88 	bl	8006210 <xTimerGenericCommand>
 8006300:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d113      	bne.n	8006330 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	60fb      	str	r3, [r7, #12]
    }
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	b2da      	uxtb	r2, r3
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	6978      	ldr	r0, [r7, #20]
 8006336:	4798      	blx	r3
    }
 8006338:	bf00      	nop
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	200002f4 	.word	0x200002f4

08006344 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800634c:	f107 0308 	add.w	r3, r7, #8
 8006350:	4618      	mov	r0, r3
 8006352:	f000 f857 	bl	8006404 <prvGetNextExpireTime>
 8006356:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4619      	mov	r1, r3
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f803 	bl	8006368 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006362:	f000 f8d5 	bl	8006510 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006366:	e7f1      	b.n	800634c <prvTimerTask+0x8>

08006368 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006372:	f7ff fa1d 	bl	80057b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006376:	f107 0308 	add.w	r3, r7, #8
 800637a:	4618      	mov	r0, r3
 800637c:	f000 f866 	bl	800644c <prvSampleTimeNow>
 8006380:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d130      	bne.n	80063ea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <prvProcessTimerOrBlockTask+0x3c>
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	429a      	cmp	r2, r3
 8006394:	d806      	bhi.n	80063a4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006396:	f7ff fa19 	bl	80057cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800639a:	68f9      	ldr	r1, [r7, #12]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff ff85 	bl	80062ac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80063a2:	e024      	b.n	80063ee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d008      	beq.n	80063bc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063aa:	4b13      	ldr	r3, [pc, #76]	; (80063f8 <prvProcessTimerOrBlockTask+0x90>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <prvProcessTimerOrBlockTask+0x50>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <prvProcessTimerOrBlockTask+0x52>
 80063b8:	2300      	movs	r3, #0
 80063ba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <prvProcessTimerOrBlockTask+0x94>)
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	4619      	mov	r1, r3
 80063ca:	f7fe fff7 	bl	80053bc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80063ce:	f7ff f9fd 	bl	80057cc <xTaskResumeAll>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80063d8:	4b09      	ldr	r3, [pc, #36]	; (8006400 <prvProcessTimerOrBlockTask+0x98>)
 80063da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	f3bf 8f6f 	isb	sy
    }
 80063e8:	e001      	b.n	80063ee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80063ea:	f7ff f9ef 	bl	80057cc <xTaskResumeAll>
    }
 80063ee:	bf00      	nop
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	200002f8 	.word	0x200002f8
 80063fc:	200002fc 	.word	0x200002fc
 8006400:	e000ed04 	.word	0xe000ed04

08006404 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <prvGetNextExpireTime+0x44>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <prvGetNextExpireTime+0x16>
 8006416:	2201      	movs	r2, #1
 8006418:	e000      	b.n	800641c <prvGetNextExpireTime+0x18>
 800641a:	2200      	movs	r2, #0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d105      	bne.n	8006434 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006428:	4b07      	ldr	r3, [pc, #28]	; (8006448 <prvGetNextExpireTime+0x44>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e001      	b.n	8006438 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006438:	68fb      	ldr	r3, [r7, #12]
    }
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	200002f4 	.word	0x200002f4

0800644c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006454:	f7ff fa5a 	bl	800590c <xTaskGetTickCount>
 8006458:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800645a:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <prvSampleTimeNow+0x3c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	429a      	cmp	r2, r3
 8006462:	d205      	bcs.n	8006470 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006464:	f000 f91a 	bl	800669c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e002      	b.n	8006476 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006476:	4a04      	ldr	r2, [pc, #16]	; (8006488 <prvSampleTimeNow+0x3c>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800647c:	68fb      	ldr	r3, [r7, #12]
    }
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000304 	.word	0x20000304

0800648c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d812      	bhi.n	80064d8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	1ad2      	subs	r2, r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d302      	bcc.n	80064c6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e01b      	b.n	80064fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064c6:	4b10      	ldr	r3, [pc, #64]	; (8006508 <prvInsertTimerInActiveList+0x7c>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f7fe f9ea 	bl	80048aa <vListInsert>
 80064d6:	e012      	b.n	80064fe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d206      	bcs.n	80064ee <prvInsertTimerInActiveList+0x62>
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d302      	bcc.n	80064ee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	e007      	b.n	80064fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064ee:	4b07      	ldr	r3, [pc, #28]	; (800650c <prvInsertTimerInActiveList+0x80>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	4610      	mov	r0, r2
 80064fa:	f7fe f9d6 	bl	80048aa <vListInsert>
            }
        }

        return xProcessTimerNow;
 80064fe:	697b      	ldr	r3, [r7, #20]
    }
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	200002f8 	.word	0x200002f8
 800650c:	200002f4 	.word	0x200002f4

08006510 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006510:	b580      	push	{r7, lr}
 8006512:	b08c      	sub	sp, #48	; 0x30
 8006514:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006516:	e0ae      	b.n	8006676 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f2c0 80aa 	blt.w	8006674 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d004      	beq.n	8006536 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	3304      	adds	r3, #4
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe f9f3 	bl	800491c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006536:	1d3b      	adds	r3, r7, #4
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff ff87 	bl	800644c <prvSampleTimeNow>
 800653e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b09      	cmp	r3, #9
 8006544:	f200 8097 	bhi.w	8006676 <prvProcessReceivedCommands+0x166>
 8006548:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <prvProcessReceivedCommands+0x40>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006579 	.word	0x08006579
 8006554:	08006579 	.word	0x08006579
 8006558:	08006579 	.word	0x08006579
 800655c:	080065ed 	.word	0x080065ed
 8006560:	08006601 	.word	0x08006601
 8006564:	0800664b 	.word	0x0800664b
 8006568:	08006579 	.word	0x08006579
 800656c:	08006579 	.word	0x08006579
 8006570:	080065ed 	.word	0x080065ed
 8006574:	08006601 	.word	0x08006601
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	b2da      	uxtb	r2, r3
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	18d1      	adds	r1, r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a3a      	ldr	r2, [r7, #32]
 8006596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006598:	f7ff ff78 	bl	800648c <prvInsertTimerInActiveList>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d069      	beq.n	8006676 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065a8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d05e      	beq.n	8006676 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	441a      	add	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	2300      	movs	r3, #0
 80065c6:	2100      	movs	r1, #0
 80065c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ca:	f7ff fe21 	bl	8006210 <xTimerGenericCommand>
 80065ce:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d14f      	bne.n	8006676 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	61bb      	str	r3, [r7, #24]
    }
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80065fe:	e03a      	b.n	8006676 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	b2da      	uxtb	r2, r3
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	617b      	str	r3, [r7, #20]
    }
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	18d1      	adds	r1, r2, r3
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	6a3a      	ldr	r2, [r7, #32]
 8006642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006644:	f7ff ff22 	bl	800648c <prvInsertTimerInActiveList>
                        break;
 8006648:	e015      	b.n	8006676 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d103      	bne.n	8006660 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800665a:	f000 fbef 	bl	8006e3c <vPortFree>
 800665e:	e00a      	b.n	8006676 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	b2da      	uxtb	r2, r3
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006672:	e000      	b.n	8006676 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006674:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <prvProcessReceivedCommands+0x188>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f107 0108 	add.w	r1, r7, #8
 800667e:	2200      	movs	r2, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f7fe fc49 	bl	8004f18 <xQueueReceive>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	f47f af45 	bne.w	8006518 <prvProcessReceivedCommands+0x8>
        }
    }
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	3728      	adds	r7, #40	; 0x28
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	200002fc 	.word	0x200002fc

0800669c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066a2:	e048      	b.n	8006736 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066a4:	4b2d      	ldr	r3, [pc, #180]	; (800675c <prvSwitchTimerLists+0xc0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ae:	4b2b      	ldr	r3, [pc, #172]	; (800675c <prvSwitchTimerLists+0xc0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fe f92d 	bl	800491c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d02e      	beq.n	8006736 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d90e      	bls.n	8006708 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066f6:	4b19      	ldr	r3, [pc, #100]	; (800675c <prvSwitchTimerLists+0xc0>)
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3304      	adds	r3, #4
 80066fe:	4619      	mov	r1, r3
 8006700:	4610      	mov	r0, r2
 8006702:	f7fe f8d2 	bl	80048aa <vListInsert>
 8006706:	e016      	b.n	8006736 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006708:	2300      	movs	r3, #0
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	2300      	movs	r3, #0
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	2100      	movs	r1, #0
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff fd7c 	bl	8006210 <xTimerGenericCommand>
 8006718:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	603b      	str	r3, [r7, #0]
    }
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <prvSwitchTimerLists+0xc0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1b1      	bne.n	80066a4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006740:	4b06      	ldr	r3, [pc, #24]	; (800675c <prvSwitchTimerLists+0xc0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <prvSwitchTimerLists+0xc4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a04      	ldr	r2, [pc, #16]	; (800675c <prvSwitchTimerLists+0xc0>)
 800674c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800674e:	4a04      	ldr	r2, [pc, #16]	; (8006760 <prvSwitchTimerLists+0xc4>)
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	6013      	str	r3, [r2, #0]
    }
 8006754:	bf00      	nop
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	200002f4 	.word	0x200002f4
 8006760:	200002f8 	.word	0x200002f8

08006764 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006768:	f000 f95e 	bl	8006a28 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800676c:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <prvCheckForValidListAndQueue+0x54>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d11d      	bne.n	80067b0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006774:	4811      	ldr	r0, [pc, #68]	; (80067bc <prvCheckForValidListAndQueue+0x58>)
 8006776:	f7fe f847 	bl	8004808 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800677a:	4811      	ldr	r0, [pc, #68]	; (80067c0 <prvCheckForValidListAndQueue+0x5c>)
 800677c:	f7fe f844 	bl	8004808 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006780:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <prvCheckForValidListAndQueue+0x60>)
 8006782:	4a0e      	ldr	r2, [pc, #56]	; (80067bc <prvCheckForValidListAndQueue+0x58>)
 8006784:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006786:	4b10      	ldr	r3, [pc, #64]	; (80067c8 <prvCheckForValidListAndQueue+0x64>)
 8006788:	4a0d      	ldr	r2, [pc, #52]	; (80067c0 <prvCheckForValidListAndQueue+0x5c>)
 800678a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800678c:	2200      	movs	r2, #0
 800678e:	210c      	movs	r1, #12
 8006790:	200a      	movs	r0, #10
 8006792:	f7fe f955 	bl	8004a40 <xQueueGenericCreate>
 8006796:	4603      	mov	r3, r0
 8006798:	4a07      	ldr	r2, [pc, #28]	; (80067b8 <prvCheckForValidListAndQueue+0x54>)
 800679a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800679c:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <prvCheckForValidListAndQueue+0x54>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <prvCheckForValidListAndQueue+0x54>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4908      	ldr	r1, [pc, #32]	; (80067cc <prvCheckForValidListAndQueue+0x68>)
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fdd4 	bl	8005358 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80067b0:	f000 f96a 	bl	8006a88 <vPortExitCritical>
    }
 80067b4:	bf00      	nop
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200002fc 	.word	0x200002fc
 80067bc:	200002cc 	.word	0x200002cc
 80067c0:	200002e0 	.word	0x200002e0
 80067c4:	200002f4 	.word	0x200002f4
 80067c8:	200002f8 	.word	0x200002f8
 80067cc:	08008fd8 	.word	0x08008fd8

080067d0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3b04      	subs	r3, #4
 80067e0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3b04      	subs	r3, #4
 80067ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f023 0201 	bic.w	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3b04      	subs	r3, #4
 80067fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006800:	4a0c      	ldr	r2, [pc, #48]	; (8006834 <pxPortInitialiseStack+0x64>)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3b14      	subs	r3, #20
 800680a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3b04      	subs	r3, #4
 8006816:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f06f 0202 	mvn.w	r2, #2
 800681e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3b20      	subs	r3, #32
 8006824:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006826:	68fb      	ldr	r3, [r7, #12]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	08006839 	.word	0x08006839

08006838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006842:	4b12      	ldr	r3, [pc, #72]	; (800688c <prvTaskExitError+0x54>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684a:	d00a      	beq.n	8006862 <prvTaskExitError+0x2a>
        __asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	60fb      	str	r3, [r7, #12]
    }
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <prvTaskExitError+0x28>
        __asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	60bb      	str	r3, [r7, #8]
    }
 8006874:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006876:	bf00      	nop
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0fc      	beq.n	8006878 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800687e:	bf00      	nop
 8006880:	bf00      	nop
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	20000014 	.word	0x20000014

08006890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <pxCurrentTCBConst2>)
 8006892:	6819      	ldr	r1, [r3, #0]
 8006894:	6808      	ldr	r0, [r1, #0]
 8006896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689a:	f380 8809 	msr	PSP, r0
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f04f 0000 	mov.w	r0, #0
 80068a6:	f380 8811 	msr	BASEPRI, r0
 80068aa:	4770      	bx	lr
 80068ac:	f3af 8000 	nop.w

080068b0 <pxCurrentTCBConst2>:
 80068b0:	200001c8 	.word	0x200001c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop

080068b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80068b8:	4808      	ldr	r0, [pc, #32]	; (80068dc <prvPortStartFirstTask+0x24>)
 80068ba:	6800      	ldr	r0, [r0, #0]
 80068bc:	6800      	ldr	r0, [r0, #0]
 80068be:	f380 8808 	msr	MSP, r0
 80068c2:	f04f 0000 	mov.w	r0, #0
 80068c6:	f380 8814 	msr	CONTROL, r0
 80068ca:	b662      	cpsie	i
 80068cc:	b661      	cpsie	f
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	df00      	svc	0
 80068d8:	bf00      	nop
 80068da:	0000      	.short	0x0000
 80068dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop

080068e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068ea:	4b46      	ldr	r3, [pc, #280]	; (8006a04 <xPortStartScheduler+0x120>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a46      	ldr	r2, [pc, #280]	; (8006a08 <xPortStartScheduler+0x124>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d10a      	bne.n	800690a <xPortStartScheduler+0x26>
        __asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	613b      	str	r3, [r7, #16]
    }
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800690a:	4b3e      	ldr	r3, [pc, #248]	; (8006a04 <xPortStartScheduler+0x120>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a3f      	ldr	r2, [pc, #252]	; (8006a0c <xPortStartScheduler+0x128>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d10a      	bne.n	800692a <xPortStartScheduler+0x46>
        __asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	60fb      	str	r3, [r7, #12]
    }
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800692a:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <xPortStartScheduler+0x12c>)
 800692c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	22ff      	movs	r2, #255	; 0xff
 800693a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800694c:	b2da      	uxtb	r2, r3
 800694e:	4b31      	ldr	r3, [pc, #196]	; (8006a14 <xPortStartScheduler+0x130>)
 8006950:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006952:	4b31      	ldr	r3, [pc, #196]	; (8006a18 <xPortStartScheduler+0x134>)
 8006954:	2207      	movs	r2, #7
 8006956:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006958:	e009      	b.n	800696e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800695a:	4b2f      	ldr	r3, [pc, #188]	; (8006a18 <xPortStartScheduler+0x134>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3b01      	subs	r3, #1
 8006960:	4a2d      	ldr	r2, [pc, #180]	; (8006a18 <xPortStartScheduler+0x134>)
 8006962:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	b2db      	uxtb	r3, r3
 800696c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800696e:	78fb      	ldrb	r3, [r7, #3]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006976:	2b80      	cmp	r3, #128	; 0x80
 8006978:	d0ef      	beq.n	800695a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800697a:	4b27      	ldr	r3, [pc, #156]	; (8006a18 <xPortStartScheduler+0x134>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f1c3 0307 	rsb	r3, r3, #7
 8006982:	2b04      	cmp	r3, #4
 8006984:	d00a      	beq.n	800699c <xPortStartScheduler+0xb8>
        __asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60bb      	str	r3, [r7, #8]
    }
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800699c:	4b1e      	ldr	r3, [pc, #120]	; (8006a18 <xPortStartScheduler+0x134>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	4a1d      	ldr	r2, [pc, #116]	; (8006a18 <xPortStartScheduler+0x134>)
 80069a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069a6:	4b1c      	ldr	r3, [pc, #112]	; (8006a18 <xPortStartScheduler+0x134>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ae:	4a1a      	ldr	r2, [pc, #104]	; (8006a18 <xPortStartScheduler+0x134>)
 80069b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80069ba:	4b18      	ldr	r3, [pc, #96]	; (8006a1c <xPortStartScheduler+0x138>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a17      	ldr	r2, [pc, #92]	; (8006a1c <xPortStartScheduler+0x138>)
 80069c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80069c6:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <xPortStartScheduler+0x138>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a14      	ldr	r2, [pc, #80]	; (8006a1c <xPortStartScheduler+0x138>)
 80069cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80069d2:	f000 f8e3 	bl	8006b9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80069d6:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <xPortStartScheduler+0x13c>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80069dc:	f000 f902 	bl	8006be4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069e0:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <xPortStartScheduler+0x140>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a0f      	ldr	r2, [pc, #60]	; (8006a24 <xPortStartScheduler+0x140>)
 80069e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80069ec:	f7ff ff64 	bl	80068b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80069f0:	f7ff f86a 	bl	8005ac8 <vTaskSwitchContext>
    prvTaskExitError();
 80069f4:	f7ff ff20 	bl	8006838 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	e000ed00 	.word	0xe000ed00
 8006a08:	410fc271 	.word	0x410fc271
 8006a0c:	410fc270 	.word	0x410fc270
 8006a10:	e000e400 	.word	0xe000e400
 8006a14:	20000308 	.word	0x20000308
 8006a18:	2000030c 	.word	0x2000030c
 8006a1c:	e000ed20 	.word	0xe000ed20
 8006a20:	20000014 	.word	0x20000014
 8006a24:	e000ef34 	.word	0xe000ef34

08006a28 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
        __asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
    }
 8006a40:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <vPortEnterCritical+0x58>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3301      	adds	r3, #1
 8006a48:	4a0d      	ldr	r2, [pc, #52]	; (8006a80 <vPortEnterCritical+0x58>)
 8006a4a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <vPortEnterCritical+0x58>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d10f      	bne.n	8006a74 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <vPortEnterCritical+0x5c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <vPortEnterCritical+0x4c>
        __asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	603b      	str	r3, [r7, #0]
    }
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <vPortEnterCritical+0x4a>
    }
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	20000014 	.word	0x20000014
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <vPortExitCritical+0x50>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <vPortExitCritical+0x24>
        __asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	607b      	str	r3, [r7, #4]
    }
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006aac:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <vPortExitCritical+0x50>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	4a09      	ldr	r2, [pc, #36]	; (8006ad8 <vPortExitCritical+0x50>)
 8006ab4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006ab6:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <vPortExitCritical+0x50>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d105      	bne.n	8006aca <vPortExitCritical+0x42>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	f383 8811 	msr	BASEPRI, r3
    }
 8006ac8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	20000014 	.word	0x20000014
 8006adc:	00000000 	.word	0x00000000

08006ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006ae0:	f3ef 8009 	mrs	r0, PSP
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <pxCurrentTCBConst>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f01e 0f10 	tst.w	lr, #16
 8006af0:	bf08      	it	eq
 8006af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	6010      	str	r0, [r2, #0]
 8006afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b04:	f380 8811 	msr	BASEPRI, r0
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f7fe ffda 	bl	8005ac8 <vTaskSwitchContext>
 8006b14:	f04f 0000 	mov.w	r0, #0
 8006b18:	f380 8811 	msr	BASEPRI, r0
 8006b1c:	bc09      	pop	{r0, r3}
 8006b1e:	6819      	ldr	r1, [r3, #0]
 8006b20:	6808      	ldr	r0, [r1, #0]
 8006b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b26:	f01e 0f10 	tst.w	lr, #16
 8006b2a:	bf08      	it	eq
 8006b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b30:	f380 8809 	msr	PSP, r0
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	f3af 8000 	nop.w

08006b40 <pxCurrentTCBConst>:
 8006b40:	200001c8 	.word	0x200001c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
        __asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
    }
 8006b60:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006b62:	f001 fc7b 	bl	800845c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006b66:	f7fe fef3 	bl	8005950 <xTaskIncrementTick>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d006      	beq.n	8006b7e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8006b70:	f001 fcd2 	bl	8008518 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b74:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <SysTick_Handler+0x50>)
 8006b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	e001      	b.n	8006b82 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8006b7e:	f001 fcaf 	bl	80084e0 <SEGGER_SYSVIEW_RecordExitISR>
 8006b82:	2300      	movs	r3, #0
 8006b84:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	f383 8811 	msr	BASEPRI, r3
    }
 8006b8c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8006b8e:	bf00      	nop
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <vPortSetupTimerInterrupt+0x34>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <vPortSetupTimerInterrupt+0x38>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bac:	4b0a      	ldr	r3, [pc, #40]	; (8006bd8 <vPortSetupTimerInterrupt+0x3c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <vPortSetupTimerInterrupt+0x40>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	099b      	lsrs	r3, r3, #6
 8006bb8:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <vPortSetupTimerInterrupt+0x44>)
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bbe:	4b04      	ldr	r3, [pc, #16]	; (8006bd0 <vPortSetupTimerInterrupt+0x34>)
 8006bc0:	2207      	movs	r2, #7
 8006bc2:	601a      	str	r2, [r3, #0]
}
 8006bc4:	bf00      	nop
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	e000e010 	.word	0xe000e010
 8006bd4:	e000e018 	.word	0xe000e018
 8006bd8:	20000008 	.word	0x20000008
 8006bdc:	10624dd3 	.word	0x10624dd3
 8006be0:	e000e014 	.word	0xe000e014

08006be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006bf4 <vPortEnableVFP+0x10>
 8006be8:	6801      	ldr	r1, [r0, #0]
 8006bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bee:	6001      	str	r1, [r0, #0]
 8006bf0:	4770      	bx	lr
 8006bf2:	0000      	.short	0x0000
 8006bf4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop

08006bfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006c02:	f3ef 8305 	mrs	r3, IPSR
 8006c06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b0f      	cmp	r3, #15
 8006c0c:	d914      	bls.n	8006c38 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c0e:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <vPortValidateInterruptPriority+0x70>)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4413      	add	r3, r2
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c18:	4b15      	ldr	r3, [pc, #84]	; (8006c70 <vPortValidateInterruptPriority+0x74>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	7afa      	ldrb	r2, [r7, #11]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d20a      	bcs.n	8006c38 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	607b      	str	r3, [r7, #4]
    }
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c38:	4b0e      	ldr	r3, [pc, #56]	; (8006c74 <vPortValidateInterruptPriority+0x78>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c40:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <vPortValidateInterruptPriority+0x7c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d90a      	bls.n	8006c5e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	603b      	str	r3, [r7, #0]
    }
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <vPortValidateInterruptPriority+0x60>
    }
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	e000e3f0 	.word	0xe000e3f0
 8006c70:	20000308 	.word	0x20000308
 8006c74:	e000ed0c 	.word	0xe000ed0c
 8006c78:	2000030c 	.word	0x2000030c

08006c7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08a      	sub	sp, #40	; 0x28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006c88:	f7fe fd92 	bl	80057b0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006c8c:	4b65      	ldr	r3, [pc, #404]	; (8006e24 <pvPortMalloc+0x1a8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006c94:	f000 f934 	bl	8006f00 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c98:	4b63      	ldr	r3, [pc, #396]	; (8006e28 <pvPortMalloc+0x1ac>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 80a7 	bne.w	8006df4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d02d      	beq.n	8006d08 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006cac:	2208      	movs	r2, #8
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d227      	bcs.n	8006d08 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006cb8:	2208      	movs	r2, #8
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d021      	beq.n	8006d0e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f023 0307 	bic.w	r3, r3, #7
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d214      	bcs.n	8006d02 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f023 0307 	bic.w	r3, r3, #7
 8006cde:	3308      	adds	r3, #8
 8006ce0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d010      	beq.n	8006d0e <pvPortMalloc+0x92>
        __asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	617b      	str	r3, [r7, #20]
    }
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d06:	e002      	b.n	8006d0e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	607b      	str	r3, [r7, #4]
 8006d0c:	e000      	b.n	8006d10 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d0e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d06e      	beq.n	8006df4 <pvPortMalloc+0x178>
 8006d16:	4b45      	ldr	r3, [pc, #276]	; (8006e2c <pvPortMalloc+0x1b0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d869      	bhi.n	8006df4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006d20:	4b43      	ldr	r3, [pc, #268]	; (8006e30 <pvPortMalloc+0x1b4>)
 8006d22:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006d24:	4b42      	ldr	r3, [pc, #264]	; (8006e30 <pvPortMalloc+0x1b4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d2a:	e004      	b.n	8006d36 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d903      	bls.n	8006d48 <pvPortMalloc+0xcc>
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1f1      	bne.n	8006d2c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006d48:	4b36      	ldr	r3, [pc, #216]	; (8006e24 <pvPortMalloc+0x1a8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d050      	beq.n	8006df4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2208      	movs	r2, #8
 8006d58:	4413      	add	r3, r2
 8006d5a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	1ad2      	subs	r2, r2, r3
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d91f      	bls.n	8006db4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <pvPortMalloc+0x120>
        __asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	613b      	str	r3, [r7, #16]
    }
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	1ad2      	subs	r2, r2, r3
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dae:	69b8      	ldr	r0, [r7, #24]
 8006db0:	f000 f908 	bl	8006fc4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006db4:	4b1d      	ldr	r3, [pc, #116]	; (8006e2c <pvPortMalloc+0x1b0>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <pvPortMalloc+0x1b0>)
 8006dc0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dc2:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <pvPortMalloc+0x1b0>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	; (8006e34 <pvPortMalloc+0x1b8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d203      	bcs.n	8006dd6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dce:	4b17      	ldr	r3, [pc, #92]	; (8006e2c <pvPortMalloc+0x1b0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a18      	ldr	r2, [pc, #96]	; (8006e34 <pvPortMalloc+0x1b8>)
 8006dd4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	4b13      	ldr	r3, [pc, #76]	; (8006e28 <pvPortMalloc+0x1ac>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006dea:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <pvPortMalloc+0x1bc>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3301      	adds	r3, #1
 8006df0:	4a11      	ldr	r2, [pc, #68]	; (8006e38 <pvPortMalloc+0x1bc>)
 8006df2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006df4:	f7fe fcea 	bl	80057cc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <pvPortMalloc+0x19c>
        __asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60fb      	str	r3, [r7, #12]
    }
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <pvPortMalloc+0x19a>
    return pvReturn;
 8006e18:	69fb      	ldr	r3, [r7, #28]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3728      	adds	r7, #40	; 0x28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20012f18 	.word	0x20012f18
 8006e28:	20012f2c 	.word	0x20012f2c
 8006e2c:	20012f1c 	.word	0x20012f1c
 8006e30:	20012f10 	.word	0x20012f10
 8006e34:	20012f20 	.word	0x20012f20
 8006e38:	20012f24 	.word	0x20012f24

08006e3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d04d      	beq.n	8006eea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006e4e:	2308      	movs	r3, #8
 8006e50:	425b      	negs	r3, r3
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4413      	add	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <vPortFree+0xb8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4013      	ands	r3, r2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <vPortFree+0x44>
        __asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	60fb      	str	r3, [r7, #12]
    }
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <vPortFree+0x62>
        __asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	60bb      	str	r3, [r7, #8]
    }
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	4b14      	ldr	r3, [pc, #80]	; (8006ef4 <vPortFree+0xb8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01e      	beq.n	8006eea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d11a      	bne.n	8006eea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <vPortFree+0xb8>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	401a      	ands	r2, r3
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006ec4:	f7fe fc74 	bl	80057b0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <vPortFree+0xbc>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	4a09      	ldr	r2, [pc, #36]	; (8006ef8 <vPortFree+0xbc>)
 8006ed4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ed6:	6938      	ldr	r0, [r7, #16]
 8006ed8:	f000 f874 	bl	8006fc4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006edc:	4b07      	ldr	r3, [pc, #28]	; (8006efc <vPortFree+0xc0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	4a06      	ldr	r2, [pc, #24]	; (8006efc <vPortFree+0xc0>)
 8006ee4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006ee6:	f7fe fc71 	bl	80057cc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006eea:	bf00      	nop
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20012f2c 	.word	0x20012f2c
 8006ef8:	20012f1c 	.word	0x20012f1c
 8006efc:	20012f28 	.word	0x20012f28

08006f00 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f06:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006f0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006f0c:	4b27      	ldr	r3, [pc, #156]	; (8006fac <prvHeapInit+0xac>)
 8006f0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00c      	beq.n	8006f34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3307      	adds	r3, #7
 8006f1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0307 	bic.w	r3, r3, #7
 8006f26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <prvHeapInit+0xac>)
 8006f30:	4413      	add	r3, r2
 8006f32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f38:	4a1d      	ldr	r2, [pc, #116]	; (8006fb0 <prvHeapInit+0xb0>)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006f3e:	4b1c      	ldr	r3, [pc, #112]	; (8006fb0 <prvHeapInit+0xb0>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4413      	add	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	1a9b      	subs	r3, r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0307 	bic.w	r3, r3, #7
 8006f5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4a15      	ldr	r2, [pc, #84]	; (8006fb4 <prvHeapInit+0xb4>)
 8006f60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006f62:	4b14      	ldr	r3, [pc, #80]	; (8006fb4 <prvHeapInit+0xb4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2200      	movs	r2, #0
 8006f68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006f6a:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <prvHeapInit+0xb4>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	1ad2      	subs	r2, r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f80:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <prvHeapInit+0xb4>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	4a0a      	ldr	r2, [pc, #40]	; (8006fb8 <prvHeapInit+0xb8>)
 8006f8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	4a09      	ldr	r2, [pc, #36]	; (8006fbc <prvHeapInit+0xbc>)
 8006f96:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f98:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <prvHeapInit+0xc0>)
 8006f9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f9e:	601a      	str	r2, [r3, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	20000310 	.word	0x20000310
 8006fb0:	20012f10 	.word	0x20012f10
 8006fb4:	20012f18 	.word	0x20012f18
 8006fb8:	20012f20 	.word	0x20012f20
 8006fbc:	20012f1c 	.word	0x20012f1c
 8006fc0:	20012f2c 	.word	0x20012f2c

08006fc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fcc:	4b28      	ldr	r3, [pc, #160]	; (8007070 <prvInsertBlockIntoFreeList+0xac>)
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e002      	b.n	8006fd8 <prvInsertBlockIntoFreeList+0x14>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d8f7      	bhi.n	8006fd2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	4413      	add	r3, r2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d108      	bne.n	8007006 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	441a      	add	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d118      	bne.n	800704c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4b15      	ldr	r3, [pc, #84]	; (8007074 <prvInsertBlockIntoFreeList+0xb0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d00d      	beq.n	8007042 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	441a      	add	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e008      	b.n	8007054 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007042:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <prvInsertBlockIntoFreeList+0xb0>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	e003      	b.n	8007054 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	429a      	cmp	r2, r3
 800705a:	d002      	beq.n	8007062 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20012f10 	.word	0x20012f10
 8007074:	20012f18 	.word	0x20012f18

08007078 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800707e:	4b26      	ldr	r3, [pc, #152]	; (8007118 <_DoInit+0xa0>)
 8007080:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8007082:	22a8      	movs	r2, #168	; 0xa8
 8007084:	2100      	movs	r1, #0
 8007086:	6838      	ldr	r0, [r7, #0]
 8007088:	f001 fe7c 	bl	8008d84 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2203      	movs	r2, #3
 8007090:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2203      	movs	r2, #3
 8007096:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4a20      	ldr	r2, [pc, #128]	; (800711c <_DoInit+0xa4>)
 800709c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <_DoInit+0xa8>)
 80070a2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070aa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2200      	movs	r2, #0
 80070b6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	4a16      	ldr	r2, [pc, #88]	; (800711c <_DoInit+0xa4>)
 80070c2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	4a17      	ldr	r2, [pc, #92]	; (8007124 <_DoInit+0xac>)
 80070c8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2210      	movs	r2, #16
 80070ce:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2200      	movs	r2, #0
 80070d4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2200      	movs	r2, #0
 80070da:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2200      	movs	r2, #0
 80070e0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80070e2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
 80070ea:	e00c      	b.n	8007106 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f1c3 030f 	rsb	r3, r3, #15
 80070f2:	4a0d      	ldr	r2, [pc, #52]	; (8007128 <_DoInit+0xb0>)
 80070f4:	5cd1      	ldrb	r1, [r2, r3]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4413      	add	r3, r2
 80070fc:	460a      	mov	r2, r1
 80070fe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3301      	adds	r3, #1
 8007104:	607b      	str	r3, [r7, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b0f      	cmp	r3, #15
 800710a:	d9ef      	bls.n	80070ec <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800710c:	f3bf 8f5f 	dmb	sy
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20012f30 	.word	0x20012f30
 800711c:	08008fe0 	.word	0x08008fe0
 8007120:	20012fd8 	.word	0x20012fd8
 8007124:	200133d8 	.word	0x200133d8
 8007128:	080090e8 	.word	0x080090e8

0800712c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800712c:	b580      	push	{r7, lr}
 800712e:	b08c      	sub	sp, #48	; 0x30
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007138:	4b3e      	ldr	r3, [pc, #248]	; (8007234 <SEGGER_RTT_ReadNoLock+0x108>)
 800713a:	623b      	str	r3, [r7, #32]
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <SEGGER_RTT_ReadNoLock+0x1e>
 8007146:	f7ff ff97 	bl	8007078 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4613      	mov	r3, r2
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	4413      	add	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	3360      	adds	r3, #96	; 0x60
 8007156:	4a37      	ldr	r2, [pc, #220]	; (8007234 <SEGGER_RTT_ReadNoLock+0x108>)
 8007158:	4413      	add	r3, r2
 800715a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800716c:	2300      	movs	r3, #0
 800716e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	429a      	cmp	r2, r3
 8007176:	d92b      	bls.n	80071d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4293      	cmp	r3, r2
 8007188:	bf28      	it	cs
 800718a:	4613      	movcs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	4413      	add	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	6939      	ldr	r1, [r7, #16]
 800719c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800719e:	f001 fde3 	bl	8008d68 <memcpy>
    NumBytesRead += NumBytesRem;
 80071a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	4413      	add	r3, r2
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80071aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	4413      	add	r3, r2
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80071ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	4413      	add	r3, r2
 80071c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d101      	bne.n	80071d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80071cc:	2300      	movs	r3, #0
 80071ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4293      	cmp	r3, r2
 80071de:	bf28      	it	cs
 80071e0:	4613      	movcs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d019      	beq.n	800721e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	4413      	add	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	6939      	ldr	r1, [r7, #16]
 80071f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071fa:	f001 fdb5 	bl	8008d68 <memcpy>
    NumBytesRead += NumBytesRem;
 80071fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	4413      	add	r3, r2
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	4413      	add	r3, r2
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007228:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800722c:	4618      	mov	r0, r3
 800722e:	3730      	adds	r7, #48	; 0x30
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20012f30 	.word	0x20012f30

08007238 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007246:	4b3d      	ldr	r3, [pc, #244]	; (800733c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007254:	f7ff ff10 	bl	8007078 <_DoInit>
  SEGGER_RTT_LOCK();
 8007258:	f3ef 8311 	mrs	r3, BASEPRI
 800725c:	f04f 0120 	mov.w	r1, #32
 8007260:	f381 8811 	msr	BASEPRI, r1
 8007264:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007266:	4b35      	ldr	r3, [pc, #212]	; (800733c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007268:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800726e:	6939      	ldr	r1, [r7, #16]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	4613      	mov	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	440b      	add	r3, r1
 800727e:	3304      	adds	r3, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3301      	adds	r3, #1
 800728a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	429a      	cmp	r2, r3
 8007294:	dbeb      	blt.n	800726e <SEGGER_RTT_AllocUpBuffer+0x36>
 8007296:	e000      	b.n	800729a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007298:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	da3f      	bge.n	8007324 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80072a4:	6939      	ldr	r1, [r7, #16]
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	4613      	mov	r3, r2
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4413      	add	r3, r2
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	440b      	add	r3, r1
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80072b8:	6939      	ldr	r1, [r7, #16]
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	4613      	mov	r3, r2
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	4413      	add	r3, r2
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	440b      	add	r3, r1
 80072c8:	3304      	adds	r3, #4
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80072ce:	6939      	ldr	r1, [r7, #16]
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	4613      	mov	r3, r2
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	4413      	add	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	440b      	add	r3, r1
 80072dc:	3320      	adds	r3, #32
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80072e2:	6939      	ldr	r1, [r7, #16]
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	4613      	mov	r3, r2
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	4413      	add	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	440b      	add	r3, r1
 80072f0:	3328      	adds	r3, #40	; 0x28
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80072f6:	6939      	ldr	r1, [r7, #16]
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	4613      	mov	r3, r2
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	4413      	add	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	440b      	add	r3, r1
 8007304:	3324      	adds	r3, #36	; 0x24
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800730a:	6939      	ldr	r1, [r7, #16]
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	4613      	mov	r3, r2
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	4413      	add	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	440b      	add	r3, r1
 8007318:	332c      	adds	r3, #44	; 0x2c
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800731e:	f3bf 8f5f 	dmb	sy
 8007322:	e002      	b.n	800732a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007324:	f04f 33ff 	mov.w	r3, #4294967295
 8007328:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007330:	69fb      	ldr	r3, [r7, #28]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20012f30 	.word	0x20012f30

08007340 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800734e:	4b21      	ldr	r3, [pc, #132]	; (80073d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007350:	623b      	str	r3, [r7, #32]
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800735c:	f7ff fe8c 	bl	8007078 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007360:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007362:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d82c      	bhi.n	80073c4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800736a:	f3ef 8311 	mrs	r3, BASEPRI
 800736e:	f04f 0120 	mov.w	r1, #32
 8007372:	f381 8811 	msr	BASEPRI, r1
 8007376:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	4613      	mov	r3, r2
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	4413      	add	r3, r2
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	3360      	adds	r3, #96	; 0x60
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00e      	beq.n	80073ae <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2200      	movs	r2, #0
 80073a6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2200      	movs	r2, #0
 80073ac:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80073b4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80073be:	2300      	movs	r3, #0
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
 80073c2:	e002      	b.n	80073ca <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80073c4:	f04f 33ff 	mov.w	r3, #4294967295
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3728      	adds	r7, #40	; 0x28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20012f30 	.word	0x20012f30

080073d8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00f      	beq.n	800740e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80073ee:	e002      	b.n	80073f6 <_EncodeStr+0x1e>
      Len++;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	3301      	adds	r3, #1
 80073f4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4413      	add	r3, r2
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1f6      	bne.n	80073f0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	d901      	bls.n	800740e <_EncodeStr+0x36>
      Len = Limit;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2bfe      	cmp	r3, #254	; 0xfe
 8007412:	d806      	bhi.n	8007422 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	60fa      	str	r2, [r7, #12]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e011      	b.n	8007446 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	60fa      	str	r2, [r7, #12]
 8007428:	22ff      	movs	r2, #255	; 0xff
 800742a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	60fa      	str	r2, [r7, #12]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	0a19      	lsrs	r1, r3, #8
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	60fa      	str	r2, [r7, #12]
 8007442:	b2ca      	uxtb	r2, r1
 8007444:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800744a:	e00a      	b.n	8007462 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	1c53      	adds	r3, r2, #1
 8007450:	60bb      	str	r3, [r7, #8]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1c59      	adds	r1, r3, #1
 8007456:	60f9      	str	r1, [r7, #12]
 8007458:	7812      	ldrb	r2, [r2, #0]
 800745a:	701a      	strb	r2, [r3, #0]
    n++;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	3301      	adds	r3, #1
 8007460:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	429a      	cmp	r2, r3
 8007468:	d3f0      	bcc.n	800744c <_EncodeStr+0x74>
  }
  return pPayload;
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	4618      	mov	r0, r3
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3307      	adds	r3, #7
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007496:	4b35      	ldr	r3, [pc, #212]	; (800756c <_HandleIncomingPacket+0xdc>)
 8007498:	7e1b      	ldrb	r3, [r3, #24]
 800749a:	4618      	mov	r0, r3
 800749c:	1cfb      	adds	r3, r7, #3
 800749e:	2201      	movs	r2, #1
 80074a0:	4619      	mov	r1, r3
 80074a2:	f7ff fe43 	bl	800712c <SEGGER_RTT_ReadNoLock>
 80074a6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d052      	beq.n	8007554 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d031      	beq.n	8007518 <_HandleIncomingPacket+0x88>
 80074b4:	2b80      	cmp	r3, #128	; 0x80
 80074b6:	dc40      	bgt.n	800753a <_HandleIncomingPacket+0xaa>
 80074b8:	2b07      	cmp	r3, #7
 80074ba:	dc15      	bgt.n	80074e8 <_HandleIncomingPacket+0x58>
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dd3c      	ble.n	800753a <_HandleIncomingPacket+0xaa>
 80074c0:	3b01      	subs	r3, #1
 80074c2:	2b06      	cmp	r3, #6
 80074c4:	d839      	bhi.n	800753a <_HandleIncomingPacket+0xaa>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <_HandleIncomingPacket+0x3c>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074ef 	.word	0x080074ef
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074fb 	.word	0x080074fb
 80074d8:	08007501 	.word	0x08007501
 80074dc:	08007507 	.word	0x08007507
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	08007513 	.word	0x08007513
 80074e8:	2b7f      	cmp	r3, #127	; 0x7f
 80074ea:	d035      	beq.n	8007558 <_HandleIncomingPacket+0xc8>
 80074ec:	e025      	b.n	800753a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80074ee:	f000 fced 	bl	8007ecc <SEGGER_SYSVIEW_Start>
      break;
 80074f2:	e036      	b.n	8007562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80074f4:	f000 fda4 	bl	8008040 <SEGGER_SYSVIEW_Stop>
      break;
 80074f8:	e033      	b.n	8007562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80074fa:	f000 ff7d 	bl	80083f8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80074fe:	e030      	b.n	8007562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007500:	f000 ff42 	bl	8008388 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007504:	e02d      	b.n	8007562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007506:	f000 fdc1 	bl	800808c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800750a:	e02a      	b.n	8007562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800750c:	f001 fa10 	bl	8008930 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007510:	e027      	b.n	8007562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007512:	f001 f9ef 	bl	80088f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007516:	e024      	b.n	8007562 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007518:	4b14      	ldr	r3, [pc, #80]	; (800756c <_HandleIncomingPacket+0xdc>)
 800751a:	7e1b      	ldrb	r3, [r3, #24]
 800751c:	4618      	mov	r0, r3
 800751e:	1cfb      	adds	r3, r7, #3
 8007520:	2201      	movs	r2, #1
 8007522:	4619      	mov	r1, r3
 8007524:	f7ff fe02 	bl	800712c <SEGGER_RTT_ReadNoLock>
 8007528:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d015      	beq.n	800755c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	4618      	mov	r0, r3
 8007534:	f001 f95e 	bl	80087f4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007538:	e010      	b.n	800755c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	b25b      	sxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	da0e      	bge.n	8007560 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007542:	4b0a      	ldr	r3, [pc, #40]	; (800756c <_HandleIncomingPacket+0xdc>)
 8007544:	7e1b      	ldrb	r3, [r3, #24]
 8007546:	4618      	mov	r0, r3
 8007548:	1cfb      	adds	r3, r7, #3
 800754a:	2201      	movs	r2, #1
 800754c:	4619      	mov	r1, r3
 800754e:	f7ff fded 	bl	800712c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007552:	e005      	b.n	8007560 <_HandleIncomingPacket+0xd0>
    }
  }
 8007554:	bf00      	nop
 8007556:	e004      	b.n	8007562 <_HandleIncomingPacket+0xd2>
      break;
 8007558:	bf00      	nop
 800755a:	e002      	b.n	8007562 <_HandleIncomingPacket+0xd2>
      break;
 800755c:	bf00      	nop
 800755e:	e000      	b.n	8007562 <_HandleIncomingPacket+0xd2>
      break;
 8007560:	bf00      	nop
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200143f0 	.word	0x200143f0

08007570 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b08c      	sub	sp, #48	; 0x30
 8007574:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007576:	2301      	movs	r3, #1
 8007578:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800757a:	1d3b      	adds	r3, r7, #4
 800757c:	3301      	adds	r3, #1
 800757e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007584:	4b31      	ldr	r3, [pc, #196]	; (800764c <_TrySendOverflowPacket+0xdc>)
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28
 800758a:	e00b      	b.n	80075a4 <_TrySendOverflowPacket+0x34>
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	b2da      	uxtb	r2, r3
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	1c59      	adds	r1, r3, #1
 8007594:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800759a:	b2d2      	uxtb	r2, r2
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	09db      	lsrs	r3, r3, #7
 80075a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	2b7f      	cmp	r3, #127	; 0x7f
 80075a8:	d8f0      	bhi.n	800758c <_TrySendOverflowPacket+0x1c>
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	701a      	strb	r2, [r3, #0]
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80075ba:	4b25      	ldr	r3, [pc, #148]	; (8007650 <_TrySendOverflowPacket+0xe0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80075c0:	4b22      	ldr	r3, [pc, #136]	; (800764c <_TrySendOverflowPacket+0xdc>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	623b      	str	r3, [r7, #32]
 80075d2:	e00b      	b.n	80075ec <_TrySendOverflowPacket+0x7c>
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	1c59      	adds	r1, r3, #1
 80075dc:	6279      	str	r1, [r7, #36]	; 0x24
 80075de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	09db      	lsrs	r3, r3, #7
 80075ea:	623b      	str	r3, [r7, #32]
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	2b7f      	cmp	r3, #127	; 0x7f
 80075f0:	d8f0      	bhi.n	80075d4 <_TrySendOverflowPacket+0x64>
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	627a      	str	r2, [r7, #36]	; 0x24
 80075f8:	6a3a      	ldr	r2, [r7, #32]
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <_TrySendOverflowPacket+0xdc>)
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	4618      	mov	r0, r3
 8007608:	1d3b      	adds	r3, r7, #4
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	461a      	mov	r2, r3
 8007610:	1d3b      	adds	r3, r7, #4
 8007612:	4619      	mov	r1, r3
 8007614:	f7f8 fdec 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007618:	4603      	mov	r3, r0
 800761a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007622:	4a0a      	ldr	r2, [pc, #40]	; (800764c <_TrySendOverflowPacket+0xdc>)
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007628:	4b08      	ldr	r3, [pc, #32]	; (800764c <_TrySendOverflowPacket+0xdc>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	3b01      	subs	r3, #1
 800762e:	b2da      	uxtb	r2, r3
 8007630:	4b06      	ldr	r3, [pc, #24]	; (800764c <_TrySendOverflowPacket+0xdc>)
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e004      	b.n	8007640 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007636:	4b05      	ldr	r3, [pc, #20]	; (800764c <_TrySendOverflowPacket+0xdc>)
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	3301      	adds	r3, #1
 800763c:	4a03      	ldr	r2, [pc, #12]	; (800764c <_TrySendOverflowPacket+0xdc>)
 800763e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007640:	693b      	ldr	r3, [r7, #16]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3730      	adds	r7, #48	; 0x30
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	200143f0 	.word	0x200143f0
 8007650:	e0001004 	.word	0xe0001004

08007654 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	; 0x28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007660:	4b98      	ldr	r3, [pc, #608]	; (80078c4 <_SendPacket+0x270>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d010      	beq.n	800768a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007668:	4b96      	ldr	r3, [pc, #600]	; (80078c4 <_SendPacket+0x270>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 812d 	beq.w	80078cc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007672:	4b94      	ldr	r3, [pc, #592]	; (80078c4 <_SendPacket+0x270>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d109      	bne.n	800768e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800767a:	f7ff ff79 	bl	8007570 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800767e:	4b91      	ldr	r3, [pc, #580]	; (80078c4 <_SendPacket+0x270>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b01      	cmp	r3, #1
 8007684:	f040 8124 	bne.w	80078d0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8007688:	e001      	b.n	800768e <_SendPacket+0x3a>
    goto Send;
 800768a:	bf00      	nop
 800768c:	e000      	b.n	8007690 <_SendPacket+0x3c>
Send:
 800768e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b1f      	cmp	r3, #31
 8007694:	d809      	bhi.n	80076aa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007696:	4b8b      	ldr	r3, [pc, #556]	; (80078c4 <_SendPacket+0x270>)
 8007698:	69da      	ldr	r2, [r3, #28]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f040 8115 	bne.w	80078d4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b17      	cmp	r3, #23
 80076ae:	d807      	bhi.n	80076c0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	60fb      	str	r3, [r7, #12]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	e0c4      	b.n	800784a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	2b7f      	cmp	r3, #127	; 0x7f
 80076cc:	d912      	bls.n	80076f4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	09da      	lsrs	r2, r3, #7
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	3a01      	subs	r2, #1
 80076e6:	60fa      	str	r2, [r7, #12]
 80076e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e006      	b.n	8007702 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b7e      	cmp	r3, #126	; 0x7e
 8007706:	d807      	bhi.n	8007718 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3b01      	subs	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	b2da      	uxtb	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	e098      	b.n	800784a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800771e:	d212      	bcs.n	8007746 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	09da      	lsrs	r2, r3, #7
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3b01      	subs	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	3a01      	subs	r2, #1
 8007738:	60fa      	str	r2, [r7, #12]
 800773a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800773e:	b2da      	uxtb	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	e081      	b.n	800784a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800774c:	d21d      	bcs.n	800778a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	0b9a      	lsrs	r2, r3, #14
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3b01      	subs	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	09db      	lsrs	r3, r3, #7
 8007762:	b2db      	uxtb	r3, r3
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	3a01      	subs	r2, #1
 8007768:	60fa      	str	r2, [r7, #12]
 800776a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800776e:	b2da      	uxtb	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	3a01      	subs	r2, #1
 800777c:	60fa      	str	r2, [r7, #12]
 800777e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007782:	b2da      	uxtb	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	e05f      	b.n	800784a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007790:	d228      	bcs.n	80077e4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	0d5a      	lsrs	r2, r3, #21
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3b01      	subs	r3, #1
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	b2d2      	uxtb	r2, r2
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	0b9b      	lsrs	r3, r3, #14
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	3a01      	subs	r2, #1
 80077ac:	60fa      	str	r2, [r7, #12]
 80077ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	09db      	lsrs	r3, r3, #7
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	3a01      	subs	r2, #1
 80077c2:	60fa      	str	r2, [r7, #12]
 80077c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	3a01      	subs	r2, #1
 80077d6:	60fa      	str	r2, [r7, #12]
 80077d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	e032      	b.n	800784a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	0f1a      	lsrs	r2, r3, #28
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	0d5b      	lsrs	r3, r3, #21
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	3a01      	subs	r2, #1
 80077fe:	60fa      	str	r2, [r7, #12]
 8007800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007804:	b2da      	uxtb	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	0b9b      	lsrs	r3, r3, #14
 800780e:	b2db      	uxtb	r3, r3
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	3a01      	subs	r2, #1
 8007814:	60fa      	str	r2, [r7, #12]
 8007816:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800781a:	b2da      	uxtb	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	09db      	lsrs	r3, r3, #7
 8007824:	b2db      	uxtb	r3, r3
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	3a01      	subs	r2, #1
 800782a:	60fa      	str	r2, [r7, #12]
 800782c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007830:	b2da      	uxtb	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	3a01      	subs	r2, #1
 800783e:	60fa      	str	r2, [r7, #12]
 8007840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007844:	b2da      	uxtb	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800784a:	4b1f      	ldr	r3, [pc, #124]	; (80078c8 <_SendPacket+0x274>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007850:	4b1c      	ldr	r3, [pc, #112]	; (80078c4 <_SendPacket+0x270>)
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	623b      	str	r3, [r7, #32]
 8007862:	e00b      	b.n	800787c <_SendPacket+0x228>
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	b2da      	uxtb	r2, r3
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	1c59      	adds	r1, r3, #1
 800786c:	6279      	str	r1, [r7, #36]	; 0x24
 800786e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	09db      	lsrs	r3, r3, #7
 800787a:	623b      	str	r3, [r7, #32]
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	2b7f      	cmp	r3, #127	; 0x7f
 8007880:	d8f0      	bhi.n	8007864 <_SendPacket+0x210>
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	627a      	str	r2, [r7, #36]	; 0x24
 8007888:	6a3a      	ldr	r2, [r7, #32]
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8007892:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <_SendPacket+0x270>)
 8007894:	785b      	ldrb	r3, [r3, #1]
 8007896:	4618      	mov	r0, r3
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	68f9      	ldr	r1, [r7, #12]
 80078a2:	f7f8 fca5 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80078a6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80078ae:	4a05      	ldr	r2, [pc, #20]	; (80078c4 <_SendPacket+0x270>)
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	60d3      	str	r3, [r2, #12]
 80078b4:	e00f      	b.n	80078d6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80078b6:	4b03      	ldr	r3, [pc, #12]	; (80078c4 <_SendPacket+0x270>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	3301      	adds	r3, #1
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	4b01      	ldr	r3, [pc, #4]	; (80078c4 <_SendPacket+0x270>)
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	e008      	b.n	80078d6 <_SendPacket+0x282>
 80078c4:	200143f0 	.word	0x200143f0
 80078c8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80078cc:	bf00      	nop
 80078ce:	e002      	b.n	80078d6 <_SendPacket+0x282>
      goto SendDone;
 80078d0:	bf00      	nop
 80078d2:	e000      	b.n	80078d6 <_SendPacket+0x282>
      goto SendDone;
 80078d4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <_SendPacket+0x2d4>)
 80078d8:	7e1b      	ldrb	r3, [r3, #24]
 80078da:	4619      	mov	r1, r3
 80078dc:	4a13      	ldr	r2, [pc, #76]	; (800792c <_SendPacket+0x2d8>)
 80078de:	460b      	mov	r3, r1
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	440b      	add	r3, r1
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	4413      	add	r3, r2
 80078e8:	336c      	adds	r3, #108	; 0x6c
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	4b0e      	ldr	r3, [pc, #56]	; (8007928 <_SendPacket+0x2d4>)
 80078ee:	7e1b      	ldrb	r3, [r3, #24]
 80078f0:	4618      	mov	r0, r3
 80078f2:	490e      	ldr	r1, [pc, #56]	; (800792c <_SendPacket+0x2d8>)
 80078f4:	4603      	mov	r3, r0
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	4403      	add	r3, r0
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	440b      	add	r3, r1
 80078fe:	3370      	adds	r3, #112	; 0x70
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d00b      	beq.n	800791e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007906:	4b08      	ldr	r3, [pc, #32]	; (8007928 <_SendPacket+0x2d4>)
 8007908:	789b      	ldrb	r3, [r3, #2]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d107      	bne.n	800791e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <_SendPacket+0x2d4>)
 8007910:	2201      	movs	r2, #1
 8007912:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007914:	f7ff fdbc 	bl	8007490 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007918:	4b03      	ldr	r3, [pc, #12]	; (8007928 <_SendPacket+0x2d4>)
 800791a:	2200      	movs	r2, #0
 800791c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800791e:	bf00      	nop
 8007920:	3728      	adds	r7, #40	; 0x28
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	200143f0 	.word	0x200143f0
 800792c:	20012f30 	.word	0x20012f30

08007930 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b0a2      	sub	sp, #136	; 0x88
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8007946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8007952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01d      	beq.n	8007996 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800795a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800795e:	2b25      	cmp	r3, #37	; 0x25
 8007960:	d1f1      	bne.n	8007946 <_VPrintHost+0x16>
      c = *p;
 8007962:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	1d19      	adds	r1, r3, #4
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6011      	str	r1, [r2, #0]
 8007974:	6819      	ldr	r1, [r3, #0]
 8007976:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007980:	460a      	mov	r2, r1
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	3388      	adds	r3, #136	; 0x88
 8007986:	443b      	add	r3, r7
 8007988:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800798c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007990:	2b10      	cmp	r3, #16
 8007992:	d002      	beq.n	800799a <_VPrintHost+0x6a>
    c = *p++;
 8007994:	e7d7      	b.n	8007946 <_VPrintHost+0x16>
      break;
 8007996:	bf00      	nop
 8007998:	e000      	b.n	800799c <_VPrintHost+0x6c>
        break;
 800799a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800799c:	f3ef 8311 	mrs	r3, BASEPRI
 80079a0:	f04f 0120 	mov.w	r1, #32
 80079a4:	f381 8811 	msr	BASEPRI, r1
 80079a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80079aa:	483f      	ldr	r0, [pc, #252]	; (8007aa8 <_VPrintHost+0x178>)
 80079ac:	f7ff fd64 	bl	8007478 <_PreparePacket>
 80079b0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80079b2:	2280      	movs	r2, #128	; 0x80
 80079b4:	68f9      	ldr	r1, [r7, #12]
 80079b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80079b8:	f7ff fd0e 	bl	80073d8 <_EncodeStr>
 80079bc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 80079be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079c0:	677b      	str	r3, [r7, #116]	; 0x74
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	673b      	str	r3, [r7, #112]	; 0x70
 80079c6:	e00b      	b.n	80079e0 <_VPrintHost+0xb0>
 80079c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ce:	1c59      	adds	r1, r3, #1
 80079d0:	6779      	str	r1, [r7, #116]	; 0x74
 80079d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	701a      	strb	r2, [r3, #0]
 80079da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079dc:	09db      	lsrs	r3, r3, #7
 80079de:	673b      	str	r3, [r7, #112]	; 0x70
 80079e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079e2:	2b7f      	cmp	r3, #127	; 0x7f
 80079e4:	d8f0      	bhi.n	80079c8 <_VPrintHost+0x98>
 80079e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	677a      	str	r2, [r7, #116]	; 0x74
 80079ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80079ee:	b2d2      	uxtb	r2, r2
 80079f0:	701a      	strb	r2, [r3, #0]
 80079f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079f4:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 80079f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a00:	e00b      	b.n	8007a1a <_VPrintHost+0xea>
 8007a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a08:	1c59      	adds	r1, r3, #1
 8007a0a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8007a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a16:	09db      	lsrs	r3, r3, #7
 8007a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a1e:	d8f0      	bhi.n	8007a02 <_VPrintHost+0xd2>
 8007a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8007a30:	f107 0314 	add.w	r3, r7, #20
 8007a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8007a38:	e022      	b.n	8007a80 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8007a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	663b      	str	r3, [r7, #96]	; 0x60
 8007a46:	e00b      	b.n	8007a60 <_VPrintHost+0x130>
 8007a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a4e:	1c59      	adds	r1, r3, #1
 8007a50:	6679      	str	r1, [r7, #100]	; 0x64
 8007a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a5c:	09db      	lsrs	r3, r3, #7
 8007a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8007a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a62:	2b7f      	cmp	r3, #127	; 0x7f
 8007a64:	d8f0      	bhi.n	8007a48 <_VPrintHost+0x118>
 8007a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	667a      	str	r2, [r7, #100]	; 0x64
 8007a6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a74:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8007a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8007a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a84:	1e5a      	subs	r2, r3, #1
 8007a86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1d5      	bne.n	8007a3a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007a8e:	221a      	movs	r2, #26
 8007a90:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007a92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a94:	f7ff fdde 	bl	8007654 <_SendPacket>
    RECORD_END();
 8007a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a9a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3788      	adds	r7, #136	; 0x88
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20014420 	.word	0x20014420

08007aac <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007aba:	2300      	movs	r3, #0
 8007abc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ac0:	4917      	ldr	r1, [pc, #92]	; (8007b20 <SEGGER_SYSVIEW_Init+0x74>)
 8007ac2:	4818      	ldr	r0, [pc, #96]	; (8007b24 <SEGGER_SYSVIEW_Init+0x78>)
 8007ac4:	f7ff fbb8 	bl	8007238 <SEGGER_RTT_AllocUpBuffer>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	4b16      	ldr	r3, [pc, #88]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007ace:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007ad0:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007ad2:	785a      	ldrb	r2, [r3, #1]
 8007ad4:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007ad6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007ad8:	4b13      	ldr	r3, [pc, #76]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007ada:	7e1b      	ldrb	r3, [r3, #24]
 8007adc:	4618      	mov	r0, r3
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	2308      	movs	r3, #8
 8007ae4:	4a11      	ldr	r2, [pc, #68]	; (8007b2c <SEGGER_SYSVIEW_Init+0x80>)
 8007ae6:	490f      	ldr	r1, [pc, #60]	; (8007b24 <SEGGER_SYSVIEW_Init+0x78>)
 8007ae8:	f7ff fc2a 	bl	8007340 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007aec:	4b0e      	ldr	r3, [pc, #56]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007af2:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <SEGGER_SYSVIEW_Init+0x84>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a0c      	ldr	r2, [pc, #48]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007af8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007afa:	4a0b      	ldr	r2, [pc, #44]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007b00:	4a09      	ldr	r2, [pc, #36]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007b06:	4a08      	ldr	r2, [pc, #32]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007b0c:	4a06      	ldr	r2, [pc, #24]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007b12:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	200133e8 	.word	0x200133e8
 8007b24:	08008fec 	.word	0x08008fec
 8007b28:	200143f0 	.word	0x200143f0
 8007b2c:	200143e8 	.word	0x200143e8
 8007b30:	e0001004 	.word	0xe0001004

08007b34 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007b3c:	4a04      	ldr	r2, [pc, #16]	; (8007b50 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6113      	str	r3, [r2, #16]
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	200143f0 	.word	0x200143f0

08007b54 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8007b60:	f04f 0120 	mov.w	r1, #32
 8007b64:	f381 8811 	msr	BASEPRI, r1
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	4808      	ldr	r0, [pc, #32]	; (8007b8c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007b6c:	f7ff fc84 	bl	8007478 <_PreparePacket>
 8007b70:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	68b9      	ldr	r1, [r7, #8]
 8007b76:	68b8      	ldr	r0, [r7, #8]
 8007b78:	f7ff fd6c 	bl	8007654 <_SendPacket>
  RECORD_END();
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f383 8811 	msr	BASEPRI, r3
}
 8007b82:	bf00      	nop
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20014420 	.word	0x20014420

08007b90 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007b9a:	f3ef 8311 	mrs	r3, BASEPRI
 8007b9e:	f04f 0120 	mov.w	r1, #32
 8007ba2:	f381 8811 	msr	BASEPRI, r1
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	4816      	ldr	r0, [pc, #88]	; (8007c04 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007baa:	f7ff fc65 	bl	8007478 <_PreparePacket>
 8007bae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	61bb      	str	r3, [r7, #24]
 8007bbc:	e00b      	b.n	8007bd6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	1c59      	adds	r1, r3, #1
 8007bc6:	61f9      	str	r1, [r7, #28]
 8007bc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	09db      	lsrs	r3, r3, #7
 8007bd4:	61bb      	str	r3, [r7, #24]
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8007bda:	d8f0      	bhi.n	8007bbe <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	61fa      	str	r2, [r7, #28]
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	68f9      	ldr	r1, [r7, #12]
 8007bf0:	6938      	ldr	r0, [r7, #16]
 8007bf2:	f7ff fd2f 	bl	8007654 <_SendPacket>
  RECORD_END();
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f383 8811 	msr	BASEPRI, r3
}
 8007bfc:	bf00      	nop
 8007bfe:	3720      	adds	r7, #32
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	20014420 	.word	0x20014420

08007c08 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08c      	sub	sp, #48	; 0x30
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c14:	f3ef 8311 	mrs	r3, BASEPRI
 8007c18:	f04f 0120 	mov.w	r1, #32
 8007c1c:	f381 8811 	msr	BASEPRI, r1
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	4825      	ldr	r0, [pc, #148]	; (8007cb8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007c24:	f7ff fc28 	bl	8007478 <_PreparePacket>
 8007c28:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c36:	e00b      	b.n	8007c50 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	1c59      	adds	r1, r3, #1
 8007c40:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	09db      	lsrs	r3, r3, #7
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	2b7f      	cmp	r3, #127	; 0x7f
 8007c54:	d8f0      	bhi.n	8007c38 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	627b      	str	r3, [r7, #36]	; 0x24
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	623b      	str	r3, [r7, #32]
 8007c6e:	e00b      	b.n	8007c88 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	1c59      	adds	r1, r3, #1
 8007c78:	6279      	str	r1, [r7, #36]	; 0x24
 8007c7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	09db      	lsrs	r3, r3, #7
 8007c86:	623b      	str	r3, [r7, #32]
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c8c:	d8f0      	bhi.n	8007c70 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	627a      	str	r2, [r7, #36]	; 0x24
 8007c94:	6a3a      	ldr	r2, [r7, #32]
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	6979      	ldr	r1, [r7, #20]
 8007ca2:	69b8      	ldr	r0, [r7, #24]
 8007ca4:	f7ff fcd6 	bl	8007654 <_SendPacket>
  RECORD_END();
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f383 8811 	msr	BASEPRI, r3
}
 8007cae:	bf00      	nop
 8007cb0:	3730      	adds	r7, #48	; 0x30
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20014420 	.word	0x20014420

08007cbc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08e      	sub	sp, #56	; 0x38
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007cca:	f3ef 8311 	mrs	r3, BASEPRI
 8007cce:	f04f 0120 	mov.w	r1, #32
 8007cd2:	f381 8811 	msr	BASEPRI, r1
 8007cd6:	61fb      	str	r3, [r7, #28]
 8007cd8:	4832      	ldr	r0, [pc, #200]	; (8007da4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007cda:	f7ff fbcd 	bl	8007478 <_PreparePacket>
 8007cde:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
 8007cec:	e00b      	b.n	8007d06 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf4:	1c59      	adds	r1, r3, #1
 8007cf6:	6379      	str	r1, [r7, #52]	; 0x34
 8007cf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cfc:	b2d2      	uxtb	r2, r2
 8007cfe:	701a      	strb	r2, [r3, #0]
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	09db      	lsrs	r3, r3, #7
 8007d04:	633b      	str	r3, [r7, #48]	; 0x30
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	2b7f      	cmp	r3, #127	; 0x7f
 8007d0a:	d8f0      	bhi.n	8007cee <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	637a      	str	r2, [r7, #52]	; 0x34
 8007d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	701a      	strb	r2, [r3, #0]
 8007d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d24:	e00b      	b.n	8007d3e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	1c59      	adds	r1, r3, #1
 8007d2e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	09db      	lsrs	r3, r3, #7
 8007d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	2b7f      	cmp	r3, #127	; 0x7f
 8007d42:	d8f0      	bhi.n	8007d26 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	701a      	strb	r2, [r3, #0]
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	623b      	str	r3, [r7, #32]
 8007d5c:	e00b      	b.n	8007d76 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	1c59      	adds	r1, r3, #1
 8007d66:	6279      	str	r1, [r7, #36]	; 0x24
 8007d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	09db      	lsrs	r3, r3, #7
 8007d74:	623b      	str	r3, [r7, #32]
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	2b7f      	cmp	r3, #127	; 0x7f
 8007d7a:	d8f0      	bhi.n	8007d5e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	627a      	str	r2, [r7, #36]	; 0x24
 8007d82:	6a3a      	ldr	r2, [r7, #32]
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	6979      	ldr	r1, [r7, #20]
 8007d90:	69b8      	ldr	r0, [r7, #24]
 8007d92:	f7ff fc5f 	bl	8007654 <_SendPacket>
  RECORD_END();
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	f383 8811 	msr	BASEPRI, r3
}
 8007d9c:	bf00      	nop
 8007d9e:	3738      	adds	r7, #56	; 0x38
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20014420 	.word	0x20014420

08007da8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b090      	sub	sp, #64	; 0x40
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007db6:	f3ef 8311 	mrs	r3, BASEPRI
 8007dba:	f04f 0120 	mov.w	r1, #32
 8007dbe:	f381 8811 	msr	BASEPRI, r1
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	4840      	ldr	r0, [pc, #256]	; (8007ec8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007dc6:	f7ff fb57 	bl	8007478 <_PreparePacket>
 8007dca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dd8:	e00b      	b.n	8007df2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de0:	1c59      	adds	r1, r3, #1
 8007de2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007de4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	701a      	strb	r2, [r3, #0]
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	09db      	lsrs	r3, r3, #7
 8007df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	2b7f      	cmp	r3, #127	; 0x7f
 8007df6:	d8f0      	bhi.n	8007dda <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e00:	b2d2      	uxtb	r2, r2
 8007e02:	701a      	strb	r2, [r3, #0]
 8007e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e10:	e00b      	b.n	8007e2a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e18:	1c59      	adds	r1, r3, #1
 8007e1a:	6379      	str	r1, [r7, #52]	; 0x34
 8007e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	09db      	lsrs	r3, r3, #7
 8007e28:	633b      	str	r3, [r7, #48]	; 0x30
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007e2e:	d8f0      	bhi.n	8007e12 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	637a      	str	r2, [r7, #52]	; 0x34
 8007e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	701a      	strb	r2, [r3, #0]
 8007e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e48:	e00b      	b.n	8007e62 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	1c59      	adds	r1, r3, #1
 8007e52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007e54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	09db      	lsrs	r3, r3, #7
 8007e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	2b7f      	cmp	r3, #127	; 0x7f
 8007e66:	d8f0      	bhi.n	8007e4a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e70:	b2d2      	uxtb	r2, r2
 8007e72:	701a      	strb	r2, [r3, #0]
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e7e:	623b      	str	r3, [r7, #32]
 8007e80:	e00b      	b.n	8007e9a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	1c59      	adds	r1, r3, #1
 8007e8a:	6279      	str	r1, [r7, #36]	; 0x24
 8007e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	701a      	strb	r2, [r3, #0]
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	09db      	lsrs	r3, r3, #7
 8007e98:	623b      	str	r3, [r7, #32]
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8007e9e:	d8f0      	bhi.n	8007e82 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	627a      	str	r2, [r7, #36]	; 0x24
 8007ea6:	6a3a      	ldr	r2, [r7, #32]
 8007ea8:	b2d2      	uxtb	r2, r2
 8007eaa:	701a      	strb	r2, [r3, #0]
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	6979      	ldr	r1, [r7, #20]
 8007eb4:	69b8      	ldr	r0, [r7, #24]
 8007eb6:	f7ff fbcd 	bl	8007654 <_SendPacket>
  RECORD_END();
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	f383 8811 	msr	BASEPRI, r3
}
 8007ec0:	bf00      	nop
 8007ec2:	3740      	adds	r7, #64	; 0x40
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20014420 	.word	0x20014420

08007ecc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08c      	sub	sp, #48	; 0x30
 8007ed0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007ed2:	4b58      	ldr	r3, [pc, #352]	; (8008034 <SEGGER_SYSVIEW_Start+0x168>)
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007ed8:	f3ef 8311 	mrs	r3, BASEPRI
 8007edc:	f04f 0120 	mov.w	r1, #32
 8007ee0:	f381 8811 	msr	BASEPRI, r1
 8007ee4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007ee6:	4b53      	ldr	r3, [pc, #332]	; (8008034 <SEGGER_SYSVIEW_Start+0x168>)
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	220a      	movs	r2, #10
 8007eec:	4952      	ldr	r1, [pc, #328]	; (8008038 <SEGGER_SYSVIEW_Start+0x16c>)
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7f8 f97e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007efa:	200a      	movs	r0, #10
 8007efc:	f7ff fe2a 	bl	8007b54 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007f00:	f3ef 8311 	mrs	r3, BASEPRI
 8007f04:	f04f 0120 	mov.w	r1, #32
 8007f08:	f381 8811 	msr	BASEPRI, r1
 8007f0c:	60bb      	str	r3, [r7, #8]
 8007f0e:	484b      	ldr	r0, [pc, #300]	; (800803c <SEGGER_SYSVIEW_Start+0x170>)
 8007f10:	f7ff fab2 	bl	8007478 <_PreparePacket>
 8007f14:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f1e:	4b45      	ldr	r3, [pc, #276]	; (8008034 <SEGGER_SYSVIEW_Start+0x168>)
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f24:	e00b      	b.n	8007f3e <SEGGER_SYSVIEW_Start+0x72>
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	1c59      	adds	r1, r3, #1
 8007f2e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	701a      	strb	r2, [r3, #0]
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	09db      	lsrs	r3, r3, #7
 8007f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	2b7f      	cmp	r3, #127	; 0x7f
 8007f42:	d8f0      	bhi.n	8007f26 <SEGGER_SYSVIEW_Start+0x5a>
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f4c:	b2d2      	uxtb	r2, r2
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
 8007f58:	4b36      	ldr	r3, [pc, #216]	; (8008034 <SEGGER_SYSVIEW_Start+0x168>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	623b      	str	r3, [r7, #32]
 8007f5e:	e00b      	b.n	8007f78 <SEGGER_SYSVIEW_Start+0xac>
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	1c59      	adds	r1, r3, #1
 8007f68:	6279      	str	r1, [r7, #36]	; 0x24
 8007f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	09db      	lsrs	r3, r3, #7
 8007f76:	623b      	str	r3, [r7, #32]
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f7c:	d8f0      	bhi.n	8007f60 <SEGGER_SYSVIEW_Start+0x94>
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	627a      	str	r2, [r7, #36]	; 0x24
 8007f84:	6a3a      	ldr	r2, [r7, #32]
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	4b28      	ldr	r3, [pc, #160]	; (8008034 <SEGGER_SYSVIEW_Start+0x168>)
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	61bb      	str	r3, [r7, #24]
 8007f98:	e00b      	b.n	8007fb2 <SEGGER_SYSVIEW_Start+0xe6>
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	1c59      	adds	r1, r3, #1
 8007fa2:	61f9      	str	r1, [r7, #28]
 8007fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	701a      	strb	r2, [r3, #0]
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	09db      	lsrs	r3, r3, #7
 8007fb0:	61bb      	str	r3, [r7, #24]
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8007fb6:	d8f0      	bhi.n	8007f9a <SEGGER_SYSVIEW_Start+0xce>
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	61fa      	str	r2, [r7, #28]
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	b2d2      	uxtb	r2, r2
 8007fc2:	701a      	strb	r2, [r3, #0]
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	617b      	str	r3, [r7, #20]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	613b      	str	r3, [r7, #16]
 8007fd0:	e00b      	b.n	8007fea <SEGGER_SYSVIEW_Start+0x11e>
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	1c59      	adds	r1, r3, #1
 8007fda:	6179      	str	r1, [r7, #20]
 8007fdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	701a      	strb	r2, [r3, #0]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	09db      	lsrs	r3, r3, #7
 8007fe8:	613b      	str	r3, [r7, #16]
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b7f      	cmp	r3, #127	; 0x7f
 8007fee:	d8f0      	bhi.n	8007fd2 <SEGGER_SYSVIEW_Start+0x106>
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	617a      	str	r2, [r7, #20]
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008000:	2218      	movs	r2, #24
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff fb25 	bl	8007654 <_SendPacket>
      RECORD_END();
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008010:	4b08      	ldr	r3, [pc, #32]	; (8008034 <SEGGER_SYSVIEW_Start+0x168>)
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008018:	4b06      	ldr	r3, [pc, #24]	; (8008034 <SEGGER_SYSVIEW_Start+0x168>)
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800801e:	f000 f9eb 	bl	80083f8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008022:	f000 f9b1 	bl	8008388 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008026:	f000 fc83 	bl	8008930 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800802a:	bf00      	nop
 800802c:	3730      	adds	r7, #48	; 0x30
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	200143f0 	.word	0x200143f0
 8008038:	080090fc 	.word	0x080090fc
 800803c:	20014420 	.word	0x20014420

08008040 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008046:	f3ef 8311 	mrs	r3, BASEPRI
 800804a:	f04f 0120 	mov.w	r1, #32
 800804e:	f381 8811 	msr	BASEPRI, r1
 8008052:	607b      	str	r3, [r7, #4]
 8008054:	480b      	ldr	r0, [pc, #44]	; (8008084 <SEGGER_SYSVIEW_Stop+0x44>)
 8008056:	f7ff fa0f 	bl	8007478 <_PreparePacket>
 800805a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <SEGGER_SYSVIEW_Stop+0x48>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d007      	beq.n	8008074 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008064:	220b      	movs	r2, #11
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6838      	ldr	r0, [r7, #0]
 800806a:	f7ff faf3 	bl	8007654 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800806e:	4b06      	ldr	r3, [pc, #24]	; (8008088 <SEGGER_SYSVIEW_Stop+0x48>)
 8008070:	2200      	movs	r2, #0
 8008072:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f383 8811 	msr	BASEPRI, r3
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20014420 	.word	0x20014420
 8008088:	200143f0 	.word	0x200143f0

0800808c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800808c:	b580      	push	{r7, lr}
 800808e:	b08c      	sub	sp, #48	; 0x30
 8008090:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008092:	f3ef 8311 	mrs	r3, BASEPRI
 8008096:	f04f 0120 	mov.w	r1, #32
 800809a:	f381 8811 	msr	BASEPRI, r1
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	4845      	ldr	r0, [pc, #276]	; (80081b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80080a2:	f7ff f9e9 	bl	8007478 <_PreparePacket>
 80080a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080b0:	4b42      	ldr	r3, [pc, #264]	; (80081bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080b6:	e00b      	b.n	80080d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080be:	1c59      	adds	r1, r3, #1
 80080c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80080c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080c6:	b2d2      	uxtb	r2, r2
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	09db      	lsrs	r3, r3, #7
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	2b7f      	cmp	r3, #127	; 0x7f
 80080d4:	d8f0      	bhi.n	80080b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80080d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
 80080ea:	4b34      	ldr	r3, [pc, #208]	; (80081bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	623b      	str	r3, [r7, #32]
 80080f0:	e00b      	b.n	800810a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	1c59      	adds	r1, r3, #1
 80080fa:	6279      	str	r1, [r7, #36]	; 0x24
 80080fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	09db      	lsrs	r3, r3, #7
 8008108:	623b      	str	r3, [r7, #32]
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	2b7f      	cmp	r3, #127	; 0x7f
 800810e:	d8f0      	bhi.n	80080f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	627a      	str	r2, [r7, #36]	; 0x24
 8008116:	6a3a      	ldr	r2, [r7, #32]
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	61fb      	str	r3, [r7, #28]
 8008124:	4b25      	ldr	r3, [pc, #148]	; (80081bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	61bb      	str	r3, [r7, #24]
 800812a:	e00b      	b.n	8008144 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	b2da      	uxtb	r2, r3
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	1c59      	adds	r1, r3, #1
 8008134:	61f9      	str	r1, [r7, #28]
 8008136:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	09db      	lsrs	r3, r3, #7
 8008142:	61bb      	str	r3, [r7, #24]
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	2b7f      	cmp	r3, #127	; 0x7f
 8008148:	d8f0      	bhi.n	800812c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	61fa      	str	r2, [r7, #28]
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	2300      	movs	r3, #0
 8008160:	613b      	str	r3, [r7, #16]
 8008162:	e00b      	b.n	800817c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	b2da      	uxtb	r2, r3
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	1c59      	adds	r1, r3, #1
 800816c:	6179      	str	r1, [r7, #20]
 800816e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008172:	b2d2      	uxtb	r2, r2
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	09db      	lsrs	r3, r3, #7
 800817a:	613b      	str	r3, [r7, #16]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2b7f      	cmp	r3, #127	; 0x7f
 8008180:	d8f0      	bhi.n	8008164 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	1c5a      	adds	r2, r3, #1
 8008186:	617a      	str	r2, [r7, #20]
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008192:	2218      	movs	r2, #24
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	68b8      	ldr	r0, [r7, #8]
 8008198:	f7ff fa5c 	bl	8007654 <_SendPacket>
  RECORD_END();
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80081a2:	4b06      	ldr	r3, [pc, #24]	; (80081bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80081aa:	4b04      	ldr	r3, [pc, #16]	; (80081bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	4798      	blx	r3
  }
}
 80081b0:	bf00      	nop
 80081b2:	3730      	adds	r7, #48	; 0x30
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20014420 	.word	0x20014420
 80081bc:	200143f0 	.word	0x200143f0

080081c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b092      	sub	sp, #72	; 0x48
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80081c8:	f3ef 8311 	mrs	r3, BASEPRI
 80081cc:	f04f 0120 	mov.w	r1, #32
 80081d0:	f381 8811 	msr	BASEPRI, r1
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	486a      	ldr	r0, [pc, #424]	; (8008380 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80081d8:	f7ff f94e 	bl	8007478 <_PreparePacket>
 80081dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	647b      	str	r3, [r7, #68]	; 0x44
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4b66      	ldr	r3, [pc, #408]	; (8008384 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	643b      	str	r3, [r7, #64]	; 0x40
 80081f2:	e00b      	b.n	800820c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80081f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081fa:	1c59      	adds	r1, r3, #1
 80081fc:	6479      	str	r1, [r7, #68]	; 0x44
 80081fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008208:	09db      	lsrs	r3, r3, #7
 800820a:	643b      	str	r3, [r7, #64]	; 0x40
 800820c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800820e:	2b7f      	cmp	r3, #127	; 0x7f
 8008210:	d8f0      	bhi.n	80081f4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	647a      	str	r2, [r7, #68]	; 0x44
 8008218:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008220:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	63bb      	str	r3, [r7, #56]	; 0x38
 800822c:	e00b      	b.n	8008246 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	b2da      	uxtb	r2, r3
 8008232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008234:	1c59      	adds	r1, r3, #1
 8008236:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	09db      	lsrs	r3, r3, #7
 8008244:	63bb      	str	r3, [r7, #56]	; 0x38
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	2b7f      	cmp	r3, #127	; 0x7f
 800824a:	d8f0      	bhi.n	800822e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800824c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008254:	b2d2      	uxtb	r2, r2
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2220      	movs	r2, #32
 8008262:	4619      	mov	r1, r3
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7ff f8b7 	bl	80073d8 <_EncodeStr>
 800826a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800826c:	2209      	movs	r2, #9
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	6938      	ldr	r0, [r7, #16]
 8008272:	f7ff f9ef 	bl	8007654 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4b40      	ldr	r3, [pc, #256]	; (8008384 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	633b      	str	r3, [r7, #48]	; 0x30
 800828a:	e00b      	b.n	80082a4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	b2da      	uxtb	r2, r3
 8008290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008292:	1c59      	adds	r1, r3, #1
 8008294:	6379      	str	r1, [r7, #52]	; 0x34
 8008296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	09db      	lsrs	r3, r3, #7
 80082a2:	633b      	str	r3, [r7, #48]	; 0x30
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	2b7f      	cmp	r3, #127	; 0x7f
 80082a8:	d8f0      	bhi.n	800828c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80082aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	637a      	str	r2, [r7, #52]	; 0x34
 80082b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082c4:	e00b      	b.n	80082de <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	1c59      	adds	r1, r3, #1
 80082ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80082d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082d4:	b2d2      	uxtb	r2, r2
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	09db      	lsrs	r3, r3, #7
 80082dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	2b7f      	cmp	r3, #127	; 0x7f
 80082e2:	d8f0      	bhi.n	80082c6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ec:	b2d2      	uxtb	r2, r2
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	623b      	str	r3, [r7, #32]
 80082fe:	e00b      	b.n	8008318 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	b2da      	uxtb	r2, r3
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	1c59      	adds	r1, r3, #1
 8008308:	6279      	str	r1, [r7, #36]	; 0x24
 800830a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800830e:	b2d2      	uxtb	r2, r2
 8008310:	701a      	strb	r2, [r3, #0]
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	09db      	lsrs	r3, r3, #7
 8008316:	623b      	str	r3, [r7, #32]
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	2b7f      	cmp	r3, #127	; 0x7f
 800831c:	d8f0      	bhi.n	8008300 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	627a      	str	r2, [r7, #36]	; 0x24
 8008324:	6a3a      	ldr	r2, [r7, #32]
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	61fb      	str	r3, [r7, #28]
 8008332:	2300      	movs	r3, #0
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	e00b      	b.n	8008350 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	b2da      	uxtb	r2, r3
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	1c59      	adds	r1, r3, #1
 8008340:	61f9      	str	r1, [r7, #28]
 8008342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	09db      	lsrs	r3, r3, #7
 800834e:	61bb      	str	r3, [r7, #24]
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b7f      	cmp	r3, #127	; 0x7f
 8008354:	d8f0      	bhi.n	8008338 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	61fa      	str	r2, [r7, #28]
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	701a      	strb	r2, [r3, #0]
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008366:	2215      	movs	r2, #21
 8008368:	68f9      	ldr	r1, [r7, #12]
 800836a:	6938      	ldr	r0, [r7, #16]
 800836c:	f7ff f972 	bl	8007654 <_SendPacket>
  RECORD_END();
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f383 8811 	msr	BASEPRI, r3
}
 8008376:	bf00      	nop
 8008378:	3748      	adds	r7, #72	; 0x48
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20014420 	.word	0x20014420
 8008384:	200143f0 	.word	0x200143f0

08008388 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800838c:	4b07      	ldr	r3, [pc, #28]	; (80083ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d008      	beq.n	80083a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008394:	4b05      	ldr	r3, [pc, #20]	; (80083ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800839e:	4b03      	ldr	r3, [pc, #12]	; (80083ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	4798      	blx	r3
  }
}
 80083a6:	bf00      	nop
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	200143f0 	.word	0x200143f0

080083b0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80083b8:	f3ef 8311 	mrs	r3, BASEPRI
 80083bc:	f04f 0120 	mov.w	r1, #32
 80083c0:	f381 8811 	msr	BASEPRI, r1
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	480b      	ldr	r0, [pc, #44]	; (80083f4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80083c8:	f7ff f856 	bl	8007478 <_PreparePacket>
 80083cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80083ce:	2280      	movs	r2, #128	; 0x80
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	6938      	ldr	r0, [r7, #16]
 80083d4:	f7ff f800 	bl	80073d8 <_EncodeStr>
 80083d8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80083da:	220e      	movs	r2, #14
 80083dc:	68f9      	ldr	r1, [r7, #12]
 80083de:	6938      	ldr	r0, [r7, #16]
 80083e0:	f7ff f938 	bl	8007654 <_SendPacket>
  RECORD_END();
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f383 8811 	msr	BASEPRI, r3
}
 80083ea:	bf00      	nop
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20014420 	.word	0x20014420

080083f8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80083f8:	b590      	push	{r4, r7, lr}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80083fe:	4b15      	ldr	r3, [pc, #84]	; (8008454 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01a      	beq.n	800843c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008406:	4b13      	ldr	r3, [pc, #76]	; (8008454 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d015      	beq.n	800843c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008410:	4b10      	ldr	r3, [pc, #64]	; (8008454 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4798      	blx	r3
 8008418:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800841c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800841e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008422:	f04f 0200 	mov.w	r2, #0
 8008426:	f04f 0300 	mov.w	r3, #0
 800842a:	000a      	movs	r2, r1
 800842c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800842e:	4613      	mov	r3, r2
 8008430:	461a      	mov	r2, r3
 8008432:	4621      	mov	r1, r4
 8008434:	200d      	movs	r0, #13
 8008436:	f7ff fbe7 	bl	8007c08 <SEGGER_SYSVIEW_RecordU32x2>
 800843a:	e006      	b.n	800844a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4619      	mov	r1, r3
 8008442:	200c      	movs	r0, #12
 8008444:	f7ff fba4 	bl	8007b90 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	bd90      	pop	{r4, r7, pc}
 8008452:	bf00      	nop
 8008454:	200143f0 	.word	0x200143f0
 8008458:	e0001004 	.word	0xe0001004

0800845c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008462:	f3ef 8311 	mrs	r3, BASEPRI
 8008466:	f04f 0120 	mov.w	r1, #32
 800846a:	f381 8811 	msr	BASEPRI, r1
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	4819      	ldr	r0, [pc, #100]	; (80084d8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008472:	f7ff f801 	bl	8007478 <_PreparePacket>
 8008476:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800847c:	4b17      	ldr	r3, [pc, #92]	; (80084dc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008484:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	617b      	str	r3, [r7, #20]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	613b      	str	r3, [r7, #16]
 800848e:	e00b      	b.n	80084a8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	b2da      	uxtb	r2, r3
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	1c59      	adds	r1, r3, #1
 8008498:	6179      	str	r1, [r7, #20]
 800849a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	09db      	lsrs	r3, r3, #7
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2b7f      	cmp	r3, #127	; 0x7f
 80084ac:	d8f0      	bhi.n	8008490 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	617a      	str	r2, [r7, #20]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	b2d2      	uxtb	r2, r2
 80084b8:	701a      	strb	r2, [r3, #0]
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80084be:	2202      	movs	r2, #2
 80084c0:	6879      	ldr	r1, [r7, #4]
 80084c2:	68b8      	ldr	r0, [r7, #8]
 80084c4:	f7ff f8c6 	bl	8007654 <_SendPacket>
  RECORD_END();
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f383 8811 	msr	BASEPRI, r3
}
 80084ce:	bf00      	nop
 80084d0:	3718      	adds	r7, #24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20014420 	.word	0x20014420
 80084dc:	e000ed04 	.word	0xe000ed04

080084e0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80084e6:	f3ef 8311 	mrs	r3, BASEPRI
 80084ea:	f04f 0120 	mov.w	r1, #32
 80084ee:	f381 8811 	msr	BASEPRI, r1
 80084f2:	607b      	str	r3, [r7, #4]
 80084f4:	4807      	ldr	r0, [pc, #28]	; (8008514 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80084f6:	f7fe ffbf 	bl	8007478 <_PreparePacket>
 80084fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80084fc:	2203      	movs	r2, #3
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6838      	ldr	r0, [r7, #0]
 8008502:	f7ff f8a7 	bl	8007654 <_SendPacket>
  RECORD_END();
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f383 8811 	msr	BASEPRI, r3
}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	20014420 	.word	0x20014420

08008518 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800851e:	f3ef 8311 	mrs	r3, BASEPRI
 8008522:	f04f 0120 	mov.w	r1, #32
 8008526:	f381 8811 	msr	BASEPRI, r1
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	4807      	ldr	r0, [pc, #28]	; (800854c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800852e:	f7fe ffa3 	bl	8007478 <_PreparePacket>
 8008532:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008534:	2212      	movs	r2, #18
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6838      	ldr	r0, [r7, #0]
 800853a:	f7ff f88b 	bl	8007654 <_SendPacket>
  RECORD_END();
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f383 8811 	msr	BASEPRI, r3
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	20014420 	.word	0x20014420

08008550 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008556:	f3ef 8311 	mrs	r3, BASEPRI
 800855a:	f04f 0120 	mov.w	r1, #32
 800855e:	f381 8811 	msr	BASEPRI, r1
 8008562:	607b      	str	r3, [r7, #4]
 8008564:	4807      	ldr	r0, [pc, #28]	; (8008584 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008566:	f7fe ff87 	bl	8007478 <_PreparePacket>
 800856a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800856c:	2211      	movs	r2, #17
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6838      	ldr	r0, [r7, #0]
 8008572:	f7ff f86f 	bl	8007654 <_SendPacket>
  RECORD_END();
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f383 8811 	msr	BASEPRI, r3
}
 800857c:	bf00      	nop
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20014420 	.word	0x20014420

08008588 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008590:	f3ef 8311 	mrs	r3, BASEPRI
 8008594:	f04f 0120 	mov.w	r1, #32
 8008598:	f381 8811 	msr	BASEPRI, r1
 800859c:	617b      	str	r3, [r7, #20]
 800859e:	4819      	ldr	r0, [pc, #100]	; (8008604 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80085a0:	f7fe ff6a 	bl	8007478 <_PreparePacket>
 80085a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80085aa:	4b17      	ldr	r3, [pc, #92]	; (8008608 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	e00b      	b.n	80085d6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	1c59      	adds	r1, r3, #1
 80085c6:	61f9      	str	r1, [r7, #28]
 80085c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085cc:	b2d2      	uxtb	r2, r2
 80085ce:	701a      	strb	r2, [r3, #0]
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	09db      	lsrs	r3, r3, #7
 80085d4:	61bb      	str	r3, [r7, #24]
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b7f      	cmp	r3, #127	; 0x7f
 80085da:	d8f0      	bhi.n	80085be <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	61fa      	str	r2, [r7, #28]
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	b2d2      	uxtb	r2, r2
 80085e6:	701a      	strb	r2, [r3, #0]
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80085ec:	2208      	movs	r2, #8
 80085ee:	68f9      	ldr	r1, [r7, #12]
 80085f0:	6938      	ldr	r0, [r7, #16]
 80085f2:	f7ff f82f 	bl	8007654 <_SendPacket>
  RECORD_END();
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f383 8811 	msr	BASEPRI, r3
}
 80085fc:	bf00      	nop
 80085fe:	3720      	adds	r7, #32
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20014420 	.word	0x20014420
 8008608:	200143f0 	.word	0x200143f0

0800860c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008614:	f3ef 8311 	mrs	r3, BASEPRI
 8008618:	f04f 0120 	mov.w	r1, #32
 800861c:	f381 8811 	msr	BASEPRI, r1
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	4819      	ldr	r0, [pc, #100]	; (8008688 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008624:	f7fe ff28 	bl	8007478 <_PreparePacket>
 8008628:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800862e:	4b17      	ldr	r3, [pc, #92]	; (800868c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	61fb      	str	r3, [r7, #28]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	61bb      	str	r3, [r7, #24]
 8008640:	e00b      	b.n	800865a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	b2da      	uxtb	r2, r3
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	1c59      	adds	r1, r3, #1
 800864a:	61f9      	str	r1, [r7, #28]
 800864c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008650:	b2d2      	uxtb	r2, r2
 8008652:	701a      	strb	r2, [r3, #0]
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	09db      	lsrs	r3, r3, #7
 8008658:	61bb      	str	r3, [r7, #24]
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b7f      	cmp	r3, #127	; 0x7f
 800865e:	d8f0      	bhi.n	8008642 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	61fa      	str	r2, [r7, #28]
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	b2d2      	uxtb	r2, r2
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008670:	2204      	movs	r2, #4
 8008672:	68f9      	ldr	r1, [r7, #12]
 8008674:	6938      	ldr	r0, [r7, #16]
 8008676:	f7fe ffed 	bl	8007654 <_SendPacket>
  RECORD_END();
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f383 8811 	msr	BASEPRI, r3
}
 8008680:	bf00      	nop
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20014420 	.word	0x20014420
 800868c:	200143f0 	.word	0x200143f0

08008690 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008698:	f3ef 8311 	mrs	r3, BASEPRI
 800869c:	f04f 0120 	mov.w	r1, #32
 80086a0:	f381 8811 	msr	BASEPRI, r1
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	4819      	ldr	r0, [pc, #100]	; (800870c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80086a8:	f7fe fee6 	bl	8007478 <_PreparePacket>
 80086ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80086b2:	4b17      	ldr	r3, [pc, #92]	; (8008710 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	61bb      	str	r3, [r7, #24]
 80086c4:	e00b      	b.n	80086de <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	1c59      	adds	r1, r3, #1
 80086ce:	61f9      	str	r1, [r7, #28]
 80086d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086d4:	b2d2      	uxtb	r2, r2
 80086d6:	701a      	strb	r2, [r3, #0]
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	09db      	lsrs	r3, r3, #7
 80086dc:	61bb      	str	r3, [r7, #24]
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b7f      	cmp	r3, #127	; 0x7f
 80086e2:	d8f0      	bhi.n	80086c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	61fa      	str	r2, [r7, #28]
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	b2d2      	uxtb	r2, r2
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80086f4:	2206      	movs	r2, #6
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	6938      	ldr	r0, [r7, #16]
 80086fa:	f7fe ffab 	bl	8007654 <_SendPacket>
  RECORD_END();
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f383 8811 	msr	BASEPRI, r3
}
 8008704:	bf00      	nop
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20014420 	.word	0x20014420
 8008710:	200143f0 	.word	0x200143f0

08008714 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b08a      	sub	sp, #40	; 0x28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800871e:	f3ef 8311 	mrs	r3, BASEPRI
 8008722:	f04f 0120 	mov.w	r1, #32
 8008726:	f381 8811 	msr	BASEPRI, r1
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	4827      	ldr	r0, [pc, #156]	; (80087cc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800872e:	f7fe fea3 	bl	8007478 <_PreparePacket>
 8008732:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008738:	4b25      	ldr	r3, [pc, #148]	; (80087d0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	623b      	str	r3, [r7, #32]
 800874a:	e00b      	b.n	8008764 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	b2da      	uxtb	r2, r3
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	1c59      	adds	r1, r3, #1
 8008754:	6279      	str	r1, [r7, #36]	; 0x24
 8008756:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800875a:	b2d2      	uxtb	r2, r2
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	09db      	lsrs	r3, r3, #7
 8008762:	623b      	str	r3, [r7, #32]
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	2b7f      	cmp	r3, #127	; 0x7f
 8008768:	d8f0      	bhi.n	800874c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	627a      	str	r2, [r7, #36]	; 0x24
 8008770:	6a3a      	ldr	r2, [r7, #32]
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	61fb      	str	r3, [r7, #28]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	61bb      	str	r3, [r7, #24]
 8008782:	e00b      	b.n	800879c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	b2da      	uxtb	r2, r3
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	1c59      	adds	r1, r3, #1
 800878c:	61f9      	str	r1, [r7, #28]
 800878e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	09db      	lsrs	r3, r3, #7
 800879a:	61bb      	str	r3, [r7, #24]
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	2b7f      	cmp	r3, #127	; 0x7f
 80087a0:	d8f0      	bhi.n	8008784 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	61fa      	str	r2, [r7, #28]
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	b2d2      	uxtb	r2, r2
 80087ac:	701a      	strb	r2, [r3, #0]
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80087b2:	2207      	movs	r2, #7
 80087b4:	68f9      	ldr	r1, [r7, #12]
 80087b6:	6938      	ldr	r0, [r7, #16]
 80087b8:	f7fe ff4c 	bl	8007654 <_SendPacket>
  RECORD_END();
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f383 8811 	msr	BASEPRI, r3
}
 80087c2:	bf00      	nop
 80087c4:	3728      	adds	r7, #40	; 0x28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20014420 	.word	0x20014420
 80087d0:	200143f0 	.word	0x200143f0

080087d4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80087dc:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	1ad3      	subs	r3, r2, r3
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	200143f0 	.word	0x200143f0

080087f4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08c      	sub	sp, #48	; 0x30
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80087fe:	4b3b      	ldr	r3, [pc, #236]	; (80088ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d06d      	beq.n	80088e2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008806:	4b39      	ldr	r3, [pc, #228]	; (80088ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800880c:	2300      	movs	r3, #0
 800880e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008810:	e008      	b.n	8008824 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	3301      	adds	r3, #1
 8008822:	62bb      	str	r3, [r7, #40]	; 0x28
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008828:	429a      	cmp	r2, r3
 800882a:	d3f2      	bcc.n	8008812 <SEGGER_SYSVIEW_SendModule+0x1e>
 800882c:	e000      	b.n	8008830 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800882e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008832:	2b00      	cmp	r3, #0
 8008834:	d055      	beq.n	80088e2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008836:	f3ef 8311 	mrs	r3, BASEPRI
 800883a:	f04f 0120 	mov.w	r1, #32
 800883e:	f381 8811 	msr	BASEPRI, r1
 8008842:	617b      	str	r3, [r7, #20]
 8008844:	482a      	ldr	r0, [pc, #168]	; (80088f0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008846:	f7fe fe17 	bl	8007478 <_PreparePacket>
 800884a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	623b      	str	r3, [r7, #32]
 8008858:	e00b      	b.n	8008872 <SEGGER_SYSVIEW_SendModule+0x7e>
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	b2da      	uxtb	r2, r3
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	1c59      	adds	r1, r3, #1
 8008862:	6279      	str	r1, [r7, #36]	; 0x24
 8008864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	09db      	lsrs	r3, r3, #7
 8008870:	623b      	str	r3, [r7, #32]
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	2b7f      	cmp	r3, #127	; 0x7f
 8008876:	d8f0      	bhi.n	800885a <SEGGER_SYSVIEW_SendModule+0x66>
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	627a      	str	r2, [r7, #36]	; 0x24
 800887e:	6a3a      	ldr	r2, [r7, #32]
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	701a      	strb	r2, [r3, #0]
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	61fb      	str	r3, [r7, #28]
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	61bb      	str	r3, [r7, #24]
 8008892:	e00b      	b.n	80088ac <SEGGER_SYSVIEW_SendModule+0xb8>
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	b2da      	uxtb	r2, r3
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	1c59      	adds	r1, r3, #1
 800889c:	61f9      	str	r1, [r7, #28]
 800889e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088a2:	b2d2      	uxtb	r2, r2
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	09db      	lsrs	r3, r3, #7
 80088aa:	61bb      	str	r3, [r7, #24]
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	2b7f      	cmp	r3, #127	; 0x7f
 80088b0:	d8f0      	bhi.n	8008894 <SEGGER_SYSVIEW_SendModule+0xa0>
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	61fa      	str	r2, [r7, #28]
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2280      	movs	r2, #128	; 0x80
 80088c8:	4619      	mov	r1, r3
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f7fe fd84 	bl	80073d8 <_EncodeStr>
 80088d0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80088d2:	2216      	movs	r2, #22
 80088d4:	68f9      	ldr	r1, [r7, #12]
 80088d6:	6938      	ldr	r0, [r7, #16]
 80088d8:	f7fe febc 	bl	8007654 <_SendPacket>
      RECORD_END();
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80088e2:	bf00      	nop
 80088e4:	3730      	adds	r7, #48	; 0x30
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20014418 	.word	0x20014418
 80088f0:	20014420 	.word	0x20014420

080088f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80088fa:	4b0c      	ldr	r3, [pc, #48]	; (800892c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00f      	beq.n	8008922 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008902:	4b0a      	ldr	r3, [pc, #40]	; (800892c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d002      	beq.n	8008916 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1f2      	bne.n	8008908 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008922:	bf00      	nop
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20014418 	.word	0x20014418

08008930 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008936:	f3ef 8311 	mrs	r3, BASEPRI
 800893a:	f04f 0120 	mov.w	r1, #32
 800893e:	f381 8811 	msr	BASEPRI, r1
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	4817      	ldr	r0, [pc, #92]	; (80089a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008946:	f7fe fd97 	bl	8007478 <_PreparePacket>
 800894a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	613b      	str	r3, [r7, #16]
 800895a:	e00b      	b.n	8008974 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	b2da      	uxtb	r2, r3
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	1c59      	adds	r1, r3, #1
 8008964:	6179      	str	r1, [r7, #20]
 8008966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800896a:	b2d2      	uxtb	r2, r2
 800896c:	701a      	strb	r2, [r3, #0]
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	09db      	lsrs	r3, r3, #7
 8008972:	613b      	str	r3, [r7, #16]
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2b7f      	cmp	r3, #127	; 0x7f
 8008978:	d8f0      	bhi.n	800895c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	1c5a      	adds	r2, r3, #1
 800897e:	617a      	str	r2, [r7, #20]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	b2d2      	uxtb	r2, r2
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800898a:	221b      	movs	r2, #27
 800898c:	6879      	ldr	r1, [r7, #4]
 800898e:	68b8      	ldr	r0, [r7, #8]
 8008990:	f7fe fe60 	bl	8007654 <_SendPacket>
  RECORD_END();
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f383 8811 	msr	BASEPRI, r3
}
 800899a:	bf00      	nop
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20014420 	.word	0x20014420
 80089a8:	2001441c 	.word	0x2001441c

080089ac <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 80089ac:	b40f      	push	{r0, r1, r2, r3}
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 80089b4:	f107 0314 	add.w	r3, r7, #20
 80089b8:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80089ba:	1d3b      	adds	r3, r7, #4
 80089bc:	461a      	mov	r2, r3
 80089be:	2100      	movs	r1, #0
 80089c0:	6938      	ldr	r0, [r7, #16]
 80089c2:	f7fe ffb5 	bl	8007930 <_VPrintHost>
  va_end(ParamList);
#endif
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089d0:	b004      	add	sp, #16
 80089d2:	4770      	bx	lr

080089d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08a      	sub	sp, #40	; 0x28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80089dc:	f3ef 8311 	mrs	r3, BASEPRI
 80089e0:	f04f 0120 	mov.w	r1, #32
 80089e4:	f381 8811 	msr	BASEPRI, r1
 80089e8:	617b      	str	r3, [r7, #20]
 80089ea:	4827      	ldr	r0, [pc, #156]	; (8008a88 <SEGGER_SYSVIEW_Warn+0xb4>)
 80089ec:	f7fe fd44 	bl	8007478 <_PreparePacket>
 80089f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80089f2:	2280      	movs	r2, #128	; 0x80
 80089f4:	6879      	ldr	r1, [r7, #4]
 80089f6:	6938      	ldr	r0, [r7, #16]
 80089f8:	f7fe fcee 	bl	80073d8 <_EncodeStr>
 80089fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
 8008a02:	2301      	movs	r3, #1
 8008a04:	623b      	str	r3, [r7, #32]
 8008a06:	e00b      	b.n	8008a20 <SEGGER_SYSVIEW_Warn+0x4c>
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	1c59      	adds	r1, r3, #1
 8008a10:	6279      	str	r1, [r7, #36]	; 0x24
 8008a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	09db      	lsrs	r3, r3, #7
 8008a1e:	623b      	str	r3, [r7, #32]
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	2b7f      	cmp	r3, #127	; 0x7f
 8008a24:	d8f0      	bhi.n	8008a08 <SEGGER_SYSVIEW_Warn+0x34>
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	627a      	str	r2, [r7, #36]	; 0x24
 8008a2c:	6a3a      	ldr	r2, [r7, #32]
 8008a2e:	b2d2      	uxtb	r2, r2
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	61fb      	str	r3, [r7, #28]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	61bb      	str	r3, [r7, #24]
 8008a3e:	e00b      	b.n	8008a58 <SEGGER_SYSVIEW_Warn+0x84>
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	1c59      	adds	r1, r3, #1
 8008a48:	61f9      	str	r1, [r7, #28]
 8008a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a4e:	b2d2      	uxtb	r2, r2
 8008a50:	701a      	strb	r2, [r3, #0]
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	09db      	lsrs	r3, r3, #7
 8008a56:	61bb      	str	r3, [r7, #24]
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a5c:	d8f0      	bhi.n	8008a40 <SEGGER_SYSVIEW_Warn+0x6c>
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	61fa      	str	r2, [r7, #28]
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	b2d2      	uxtb	r2, r2
 8008a68:	701a      	strb	r2, [r3, #0]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008a6e:	221a      	movs	r2, #26
 8008a70:	68f9      	ldr	r1, [r7, #12]
 8008a72:	6938      	ldr	r0, [r7, #16]
 8008a74:	f7fe fdee 	bl	8007654 <_SendPacket>
  RECORD_END();
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f383 8811 	msr	BASEPRI, r3
}
 8008a7e:	bf00      	nop
 8008a80:	3728      	adds	r7, #40	; 0x28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20014420 	.word	0x20014420

08008a8c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008a90:	4803      	ldr	r0, [pc, #12]	; (8008aa0 <_cbSendSystemDesc+0x14>)
 8008a92:	f7ff fc8d 	bl	80083b0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8008a96:	4803      	ldr	r0, [pc, #12]	; (8008aa4 <_cbSendSystemDesc+0x18>)
 8008a98:	f7ff fc8a 	bl	80083b0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8008a9c:	bf00      	nop
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	08008ff4 	.word	0x08008ff4
 8008aa4:	08009038 	.word	0x08009038

08008aa8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008aac:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <SEGGER_SYSVIEW_Conf+0x20>)
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <SEGGER_SYSVIEW_Conf+0x20>)
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	4b05      	ldr	r3, [pc, #20]	; (8008acc <SEGGER_SYSVIEW_Conf+0x24>)
 8008ab6:	4a06      	ldr	r2, [pc, #24]	; (8008ad0 <SEGGER_SYSVIEW_Conf+0x28>)
 8008ab8:	f7fe fff8 	bl	8007aac <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008abc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008ac0:	f7ff f838 	bl	8007b34 <SEGGER_SYSVIEW_SetRAMBase>
}
 8008ac4:	bf00      	nop
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	20000008 	.word	0x20000008
 8008acc:	08008a8d 	.word	0x08008a8d
 8008ad0:	08009108 	.word	0x08009108

08008ad4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008ada:	2300      	movs	r3, #0
 8008adc:	607b      	str	r3, [r7, #4]
 8008ade:	e033      	b.n	8008b48 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008ae0:	491e      	ldr	r1, [pc, #120]	; (8008b5c <_cbSendTaskList+0x88>)
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	491a      	ldr	r1, [pc, #104]	; (8008b5c <_cbSendTaskList+0x88>)
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	3304      	adds	r3, #4
 8008b00:	6819      	ldr	r1, [r3, #0]
 8008b02:	4c16      	ldr	r4, [pc, #88]	; (8008b5c <_cbSendTaskList+0x88>)
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4423      	add	r3, r4
 8008b10:	3308      	adds	r3, #8
 8008b12:	681c      	ldr	r4, [r3, #0]
 8008b14:	4d11      	ldr	r5, [pc, #68]	; (8008b5c <_cbSendTaskList+0x88>)
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	442b      	add	r3, r5
 8008b22:	330c      	adds	r3, #12
 8008b24:	681d      	ldr	r5, [r3, #0]
 8008b26:	4e0d      	ldr	r6, [pc, #52]	; (8008b5c <_cbSendTaskList+0x88>)
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4433      	add	r3, r6
 8008b34:	3310      	adds	r3, #16
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	462b      	mov	r3, r5
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	f000 f8bd 	bl	8008cbc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3301      	adds	r3, #1
 8008b46:	607b      	str	r3, [r7, #4]
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <_cbSendTaskList+0x8c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d3c6      	bcc.n	8008ae0 <_cbSendTaskList+0xc>
  }
}
 8008b52:	bf00      	nop
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b5c:	20014504 	.word	0x20014504
 8008b60:	200145a4 	.word	0x200145a4

08008b64 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b68:	b082      	sub	sp, #8
 8008b6a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008b6c:	f7fc fede 	bl	800592c <xTaskGetTickCountFromISR>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2200      	movs	r2, #0
 8008b74:	469a      	mov	sl, r3
 8008b76:	4693      	mov	fp, r2
 8008b78:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	f04f 0a00 	mov.w	sl, #0
 8008b88:	f04f 0b00 	mov.w	fp, #0
 8008b8c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008b90:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008b94:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008b98:	4652      	mov	r2, sl
 8008b9a:	465b      	mov	r3, fp
 8008b9c:	1a14      	subs	r4, r2, r0
 8008b9e:	eb63 0501 	sbc.w	r5, r3, r1
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	f04f 0300 	mov.w	r3, #0
 8008baa:	00ab      	lsls	r3, r5, #2
 8008bac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008bb0:	00a2      	lsls	r2, r4, #2
 8008bb2:	4614      	mov	r4, r2
 8008bb4:	461d      	mov	r5, r3
 8008bb6:	eb14 0800 	adds.w	r8, r4, r0
 8008bba:	eb45 0901 	adc.w	r9, r5, r1
 8008bbe:	f04f 0200 	mov.w	r2, #0
 8008bc2:	f04f 0300 	mov.w	r3, #0
 8008bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bd2:	4690      	mov	r8, r2
 8008bd4:	4699      	mov	r9, r3
 8008bd6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008bda:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008bde:	4610      	mov	r0, r2
 8008be0:	4619      	mov	r1, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008bec <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008bfa:	2205      	movs	r2, #5
 8008bfc:	492b      	ldr	r1, [pc, #172]	; (8008cac <SYSVIEW_AddTask+0xc0>)
 8008bfe:	68b8      	ldr	r0, [r7, #8]
 8008c00:	f000 f8a2 	bl	8008d48 <memcmp>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d04b      	beq.n	8008ca2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008c0a:	4b29      	ldr	r3, [pc, #164]	; (8008cb0 <SYSVIEW_AddTask+0xc4>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b07      	cmp	r3, #7
 8008c10:	d903      	bls.n	8008c1a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8008c12:	4828      	ldr	r0, [pc, #160]	; (8008cb4 <SYSVIEW_AddTask+0xc8>)
 8008c14:	f7ff fede 	bl	80089d4 <SEGGER_SYSVIEW_Warn>
    return;
 8008c18:	e044      	b.n	8008ca4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008c1a:	4b25      	ldr	r3, [pc, #148]	; (8008cb0 <SYSVIEW_AddTask+0xc4>)
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	4926      	ldr	r1, [pc, #152]	; (8008cb8 <SYSVIEW_AddTask+0xcc>)
 8008c20:	4613      	mov	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	440b      	add	r3, r1
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008c2e:	4b20      	ldr	r3, [pc, #128]	; (8008cb0 <SYSVIEW_AddTask+0xc4>)
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	4921      	ldr	r1, [pc, #132]	; (8008cb8 <SYSVIEW_AddTask+0xcc>)
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	440b      	add	r3, r1
 8008c3e:	3304      	adds	r3, #4
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008c44:	4b1a      	ldr	r3, [pc, #104]	; (8008cb0 <SYSVIEW_AddTask+0xc4>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	491b      	ldr	r1, [pc, #108]	; (8008cb8 <SYSVIEW_AddTask+0xcc>)
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	440b      	add	r3, r1
 8008c54:	3308      	adds	r3, #8
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008c5a:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <SYSVIEW_AddTask+0xc4>)
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4916      	ldr	r1, [pc, #88]	; (8008cb8 <SYSVIEW_AddTask+0xcc>)
 8008c60:	4613      	mov	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	440b      	add	r3, r1
 8008c6a:	330c      	adds	r3, #12
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008c70:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <SYSVIEW_AddTask+0xc4>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	4910      	ldr	r1, [pc, #64]	; (8008cb8 <SYSVIEW_AddTask+0xcc>)
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	3310      	adds	r3, #16
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8008c86:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <SYSVIEW_AddTask+0xc4>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	4a08      	ldr	r2, [pc, #32]	; (8008cb0 <SYSVIEW_AddTask+0xc4>)
 8008c8e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	68b9      	ldr	r1, [r7, #8]
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 f80e 	bl	8008cbc <SYSVIEW_SendTaskInfo>
 8008ca0:	e000      	b.n	8008ca4 <SYSVIEW_AddTask+0xb8>
    return;
 8008ca2:	bf00      	nop

}
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	08009048 	.word	0x08009048
 8008cb0:	200145a4 	.word	0x200145a4
 8008cb4:	08009050 	.word	0x08009050
 8008cb8:	20014504 	.word	0x20014504

08008cbc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	; 0x28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008cca:	f107 0314 	add.w	r3, r7, #20
 8008cce:	2214      	movs	r2, #20
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f856 	bl	8008d84 <memset>
  TaskInfo.TaskID     = TaskID;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008cec:	f107 0314 	add.w	r3, r7, #20
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7ff fa65 	bl	80081c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008cf6:	bf00      	nop
 8008cf8:	3728      	adds	r7, #40	; 0x28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
	...

08008d00 <__libc_init_array>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	4d0d      	ldr	r5, [pc, #52]	; (8008d38 <__libc_init_array+0x38>)
 8008d04:	4c0d      	ldr	r4, [pc, #52]	; (8008d3c <__libc_init_array+0x3c>)
 8008d06:	1b64      	subs	r4, r4, r5
 8008d08:	10a4      	asrs	r4, r4, #2
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	42a6      	cmp	r6, r4
 8008d0e:	d109      	bne.n	8008d24 <__libc_init_array+0x24>
 8008d10:	4d0b      	ldr	r5, [pc, #44]	; (8008d40 <__libc_init_array+0x40>)
 8008d12:	4c0c      	ldr	r4, [pc, #48]	; (8008d44 <__libc_init_array+0x44>)
 8008d14:	f000 f83e 	bl	8008d94 <_init>
 8008d18:	1b64      	subs	r4, r4, r5
 8008d1a:	10a4      	asrs	r4, r4, #2
 8008d1c:	2600      	movs	r6, #0
 8008d1e:	42a6      	cmp	r6, r4
 8008d20:	d105      	bne.n	8008d2e <__libc_init_array+0x2e>
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d28:	4798      	blx	r3
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	e7ee      	b.n	8008d0c <__libc_init_array+0xc>
 8008d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d32:	4798      	blx	r3
 8008d34:	3601      	adds	r6, #1
 8008d36:	e7f2      	b.n	8008d1e <__libc_init_array+0x1e>
 8008d38:	08009118 	.word	0x08009118
 8008d3c:	08009118 	.word	0x08009118
 8008d40:	08009118 	.word	0x08009118
 8008d44:	0800911c 	.word	0x0800911c

08008d48 <memcmp>:
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	3901      	subs	r1, #1
 8008d4c:	4402      	add	r2, r0
 8008d4e:	4290      	cmp	r0, r2
 8008d50:	d101      	bne.n	8008d56 <memcmp+0xe>
 8008d52:	2000      	movs	r0, #0
 8008d54:	e005      	b.n	8008d62 <memcmp+0x1a>
 8008d56:	7803      	ldrb	r3, [r0, #0]
 8008d58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	d001      	beq.n	8008d64 <memcmp+0x1c>
 8008d60:	1b18      	subs	r0, r3, r4
 8008d62:	bd10      	pop	{r4, pc}
 8008d64:	3001      	adds	r0, #1
 8008d66:	e7f2      	b.n	8008d4e <memcmp+0x6>

08008d68 <memcpy>:
 8008d68:	440a      	add	r2, r1
 8008d6a:	4291      	cmp	r1, r2
 8008d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d70:	d100      	bne.n	8008d74 <memcpy+0xc>
 8008d72:	4770      	bx	lr
 8008d74:	b510      	push	{r4, lr}
 8008d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d7e:	4291      	cmp	r1, r2
 8008d80:	d1f9      	bne.n	8008d76 <memcpy+0xe>
 8008d82:	bd10      	pop	{r4, pc}

08008d84 <memset>:
 8008d84:	4402      	add	r2, r0
 8008d86:	4603      	mov	r3, r0
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d100      	bne.n	8008d8e <memset+0xa>
 8008d8c:	4770      	bx	lr
 8008d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d92:	e7f9      	b.n	8008d88 <memset+0x4>

08008d94 <_init>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	bf00      	nop
 8008d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9a:	bc08      	pop	{r3}
 8008d9c:	469e      	mov	lr, r3
 8008d9e:	4770      	bx	lr

08008da0 <_fini>:
 8008da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da2:	bf00      	nop
 8008da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008da6:	bc08      	pop	{r3}
 8008da8:	469e      	mov	lr, r3
 8008daa:	4770      	bx	lr
